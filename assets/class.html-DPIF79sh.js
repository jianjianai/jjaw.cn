import{_ as c,r as o,o as l,c as i,b as n,e as s,d as a,w as r,a as t}from"./app-DQjX1JtR.js";const d={},k=t(`<h1 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h1><h2 id="为什么这些空类的行为很奇怪" tabindex="-1"><a class="header-anchor" href="#为什么这些空类的行为很奇怪"><span>为什么这些空类的行为很奇怪？</span></a></h2><blockquote><p>我写下这段代码，并期望它抛出错误</p></blockquote><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Empty</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* empty */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> e2<span class="token operator">:</span> Empty <span class="token operator">=</span> window<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div>`,4),u=t(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span></span>
<span class="line">  important<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  properties<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Alpha</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Bravo</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><code>Alpha</code> 和 <code>Bravo</code> 的结构相同，都是继承自 <code>Base</code>，这会产生许多令人惊讶的效果，所以别这么做。如果你想让 <code>Alpha</code> 与 <code>Bravo</code> 不相同，为它们各自提供一个属性。</p><h2 id="什么是名义上的类" tabindex="-1"><a class="header-anchor" href="#什么是名义上的类"><span>什么是名义上的类</span></a></h2><p>这两段代码该如何解释：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span></span>
<span class="line">  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Bravo</span> <span class="token punctuation">{</span></span>
<span class="line">  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Charlie</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Delta</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bravo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Charlie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// OK</span></span>
<span class="line">c <span class="token operator">=</span> d<span class="token punctuation">;</span> <span class="token comment">// Error</span></span>
<span class="line"></span></code></pre></div><p>在 TypeScript 中，类进行结构上的比较，有一个例外是对于 <code>private</code> 与 <code>protected</code> 的成员。当一个成员是 <code>private</code> 或者 <code>protected</code> 时，它们必须来自同一个声明，才能被视为与另一个 <code>private</code> 或者 <code>protected</code> 的成员相同。</p><h2 id="为什么在我的实例方法中-this-成了一个「孤儿」" tabindex="-1"><a class="header-anchor" href="#为什么在我的实例方法中-this-成了一个「孤儿」"><span>为什么在我的实例方法中，<code>this</code> 成了一个「孤儿」？</span></a></h2><blockquote><p>我写下如下代码</p></blockquote><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">  x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">someCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints &#39;undefined&#39;, not 10</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws error &quot;this.method is not a function&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>someCallback<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>可能会提出一些相似的问题：</p><ul><li>为什么在我的回调函数中类的属性没有定义？</li><li>为什么在我的回调函数中，<code>this</code> 指向 <code>window</code>？</li><li>为什么在我的回调函数中，<code>this</code> 指向 <code>undefined</code>？</li><li>为什么我会得到 <code>this.someMethod is not a function</code> 的错误？</li><li>为什么我会得到 <code>Cannot read property &#39;someMethod&#39; of undefined</code> 的错误？</li></ul><p>在 JavaScript 中，<code>this</code> 值由以下确定：</p><ol><li><p>该函数是调用 <code>.bind</code> 的结果吗？如果是这样，<code>this</code> 由传递给 <code>bind</code> 的第一个参数确定</p></li><li><p>该函数是通过属性表达式 <code>expr.method() ?</code> 直接调用吗？如果是这样，<code>this</code> 指向 <code>expr</code></p></li><li><p>否则，<code>this</code> 是 <code>undefined</code>（在严格模式中），或者是 <code>window</code> （非严格模式中）。</p></li></ol><p>在上一个例子中，影响结果的是这行代码：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>someCallback<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>在这里，我们提供了 <code>obj.someCallback</code> 到 <code>setTimeout</code> 的函数引用，然后该函数并不是作为 <code>bind</code> 的结果调用，也不是直接作为一个方法调用。因此在 <code>someCallback</code> 里的 <code>this</code> 指向 <code>window</code>（或者在严格模式下的 <code>undefied</code>）。</p><p>这里概述了一些解决办法：http://stackoverflow.com/a/20627988/1704166</p><h2 id="当-bar-是一个-class-时-bar-和-typeof-bar-有什么区别" tabindex="-1"><a class="header-anchor" href="#当-bar-是一个-class-时-bar-和-typeof-bar-有什么区别"><span>当 <code>Bar</code> 是一个 <code>class</code> 时，<code>Bar</code> 和 <code>typeof Bar</code> 有什么区别？</span></a></h2><blockquote><p>我写下这段代码，但是我不理解我为什么会得到错误：</p></blockquote><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> x<span class="token operator">:</span> MyClass<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Cannot assign &#39;typeof MyClass&#39; to MyClass? Huh?</span></span>
<span class="line">x <span class="token operator">=</span> MyClass<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>在 JavaScript 中，类仅仅是个函数，这点很重要。我们将类对象本身 -- <code>MyClass</code> 的值，作为是构造函数。当一个构造函数被 <code>new</code> 调用时，我们得到一个对象，它是该类的实例。</p><p>因此，当我们定义一个类时，实际上，我们定义了两个不同的类型。</p><p>第一个是由类的名字推导而来，在这个例子中是 <code>MyClass</code>。这个是类实例的类型，它定义了类的实例具有的属性和方法，它是一个通过调用类的构造函数来返回的类型。</p><p>第二个类型是一个匿名的类型，它是构造函数具有的类型。它包含一个返回类实例的构造函数签名（可以使用 <code>new</code> 调用），同时，它也包含类中可能含有的 <code>static</code> 属性和方法。它也通常被称为「静态方面」，因为它包含那些静态成员（以及作为类的构造函数）。我们可以用 <code>typeof</code> 来引用此类型。</p><p>当在类型位置使用 <code>typeof</code> 操作符时，描述了表达式的类型。因此 <code>typeof MyClass</code> 是指 <code>MyClass</code> 的类型。</p><h2 id="为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值" tabindex="-1"><a class="header-anchor" href="#为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值"><span>为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值？</span></a></h2>`,26),m={href:"https://github.com/Microsoft/TypeScript/issues/1617",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="声明类和接口有什么区别" tabindex="-1"><a class="header-anchor" href="#声明类和接口有什么区别"><span>声明类和接口有什么区别？</span></a></h2><p>参阅: http://stackoverflow.com/a/14348084/1704166</p><h2 id="接口继承类-意味着什么" tabindex="-1"><a class="header-anchor" href="#接口继承类-意味着什么"><span>接口继承类，意味着什么？</span></a></h2><blockquote><p>这段代码是什么意思？</p></blockquote><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这创建了一个名叫 <code>Bar</code> 的类型，它与 <code>Foo</code> 的实例具有相同的成员。当 <code>Foo</code> 具有私有成员时，<code>Bar</code> 内的相同属性，必须由一个继承自 <code>Foo</code> 的类实现。总的来说，这种模式是应当避免的，尤其是在 <code>Foo</code> 有私有成员时。</p><h2 id="为什么我会得到错误-typeerror-base-class-name-is-not-defined-in-extends" tabindex="-1"><a class="header-anchor" href="#为什么我会得到错误-typeerror-base-class-name-is-not-defined-in-extends"><span>为什么我会得到错误：<code>TypeError: [base class name] is not defined in __extends</code>？</span></a></h2><blockquote><p>我写下一段代码，</p></blockquote><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">/** file1.ts **/</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/** file2.ts **/</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Bravo</span> <span class="token keyword">extends</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>在运行时，有如下错误发生在 <code>_extends</code> 中：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">Uncaught TypeError<span class="token operator">:</span> Alpha <span class="token keyword">is</span> not defined</span>
<span class="line"></span></code></pre></div><p>最常见的原因是在你的 HTML 中包含有 file2.ts 的 <code>script</code>，但是并没有包含 <code>file1.ts</code> 的 <code>script</code>。因此你需要在引用 <code>file2.ts</code> 之前引用 <code>file1.ts</code>。</p><h2 id="为什么我会得到-typeerror-cannot-read-property-prototype-of-undefined-in-extends-的错误" tabindex="-1"><a class="header-anchor" href="#为什么我会得到-typeerror-cannot-read-property-prototype-of-undefined-in-extends-的错误"><span>为什么我会得到 <code>TypeError: Cannot read property &#39;prototype&#39; of undefined&quot; in __extends</code> 的错误？</span></a></h2><blockquote><p>我写下如下代码：</p></blockquote><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">/** file1.ts **/</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/** file2.ts **/</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Bravo</span> <span class="token keyword">extends</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>在运行时，有如下错误发生在 <code>_extends</code> 中：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">Uncaught TypeError<span class="token operator">:</span> Cannot read property <span class="token string">&#39;prototype&#39;</span> <span class="token keyword">of</span> <span class="token keyword">undefined</span></span>
<span class="line"></span></code></pre></div><p>出现这种情况，原因可能有一些。</p><p>首先，在单个文件中，你在基类之前定义了派生类，那么你应该重新排序文件，以便在派生类之前声明基类。</p><p>如果你使用了 <code>--out</code> 的编译选项，编译器可能会对你希望文件的顺序感到困惑。请参阅常见问题简答中「如果控制文件排序」部分</p><p>如果您没有使用 <code>--out</code>，HTML 文件中的 <code>script</code> 引用文件的顺序可能出现错误。重新排序 <code>script</code> 对文件的引用，以便在定义派生类的文件之前包含定义基类的文件。</p><p>最后，如果你使用某种类型的第三方包，该包可能会错误地排序了文件。请参阅该工具的文档以了解如何在结果输出中正确排序输入文件。</p><h2 id="为什么不扩展-error、array、map-内置函数" tabindex="-1"><a class="header-anchor" href="#为什么不扩展-error、array、map-内置函数"><span>为什么不扩展 <code>Error</code>、<code>Array</code>、<code>Map</code> 内置函数？</span></a></h2><p>在 ES2015 中，返回一个对象的构造函数将 <code>this</code> 的值隐式替换为 <code>super(...)</code> 的任何调用者。这对于构造函数代码捕获 <code>super(...)</code> 的任何潜在返回值并将其替换为 <code>this</code> 是必要的。</p><p>这样导致的结果是：<code>Error</code>、<code>Array</code> 等子类将不再按预期工作。这是由于 <code>Error</code>、<code>Array</code> 等的构造函数使用 ECMAScript6 中的 <code>new.target</code> 来调整原型链。但是，在 ECMAScript 5 中调用构造函数时，无法确保 <code>new.target</code> 的值。在其他一些低水平的编译器通常都有相同的限制。</p><h3 id="例如" tabindex="-1"><a class="header-anchor" href="#例如"><span>例如：</span></a></h3><p>如下作为一个子类：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">FooError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>m<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;hello &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>你可能会发现：</p><ul><li>通过这些子类的构造函数返回的对象中，方法可能是 <code>undefined</code>。因此，当调用 <code>sayHello</code> 时，会抛出一个错误。</li><li><code>instanceof</code> 将会在子类的实例和自身实例中被中断。因此 <code>new FooError() instanceof FooError</code> 将返回 <code>false</code>。</li></ul><h3 id="推荐" tabindex="-1"><a class="header-anchor" href="#推荐"><span>推荐</span></a></h3><p>作为一个推荐方式，你可以在 <code>super(...)</code> 被调用之后手动调整原型。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">FooError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>m<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Set the prototype explicitly.</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> FooError<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;hello &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>然而，任何 <code>FooError</code> 的子类将不得不手动设置原型。在运行时，对于那些不支持 <code>Object.setPrototypeOf</code> 属性的，你可能用要 <code>__proto__</code> 来替代他。</p>`,34),g={href:"https://docs.microsoft.com/zh-cn/microsoft-edge/dev-guide/whats-new/javascript-version-information",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"FooError.prototype",-1),b=n("code",null,"this",-1);function f(w,v){const p=o("RouteLink"),e=o("ExternalLinkIcon");return l(),i("div",null,[k,n("p",null,[s("请参阅此问题「"),a(p,{to:"/git/ts-book/docs/faqs/type-system-behavior.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%89%80%E6%9C%89%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%83%BD%E8%83%BD%E8%B5%8B%E5%80%BC%E7%BB%99%E4%B8%80%E4%B8%AA%E7%A9%BA%E7%9A%84%E6%8E%A5%E5%8F%A3%EF%BC%9F"},{default:r(()=>[s("为什么所有的内容都能赋值给空的接口")]),_:1}),s("」。值得重新思考一下这个答案的建议：一般来说，你永远不应该声明一个没有属性的类。即使对于子类也是如此：")]),u,n("p",null,[s("有关此问题，和其他初始化顺序问题，请参阅 "),n("a",m,[s("#1617"),a(e)]),s("。")]),h,n("p",null,[s("不幸的是，"),n("a",g,[s("IE 10 及其一下不兼容这些方法"),a(e)]),s("。你可以手动将原型中的方法复制到实例本身，(例如："),y,s(" 复制到 "),b,s(" 上)，但是对于原型链本身是无法修复的。")])])}const E=c(d,[["render",f],["__file","class.html.vue"]]),B=JSON.parse(`{"path":"/git/ts-book/docs/faqs/class.html","title":"类","lang":"zh-CN","frontmatter":{"description":"类 为什么这些空类的行为很奇怪？ 我写下这段代码，并期望它抛出错误 请参阅此问题「」。值得重新思考一下这个答案的建议：一般来说，你永远不应该声明一个没有属性的类。即使对于子类也是如此： Alpha 和 Bravo 的结构相同，都是继承自 Base，这会产生许多令人惊讶的效果，所以别这么做。如果你想让 Alpha 与 Bravo 不相同，为它们各自提供一...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/faqs/class.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"类"}],["meta",{"property":"og:description","content":"类 为什么这些空类的行为很奇怪？ 我写下这段代码，并期望它抛出错误 请参阅此问题「」。值得重新思考一下这个答案的建议：一般来说，你永远不应该声明一个没有属性的类。即使对于子类也是如此： Alpha 和 Bravo 的结构相同，都是继承自 Base，这会产生许多令人惊讶的效果，所以别这么做。如果你想让 Alpha 与 Bravo 不相同，为它们各自提供一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-07-01T09:35:00.000Z"}],["meta",{"property":"article:modified_time","content":"2020-07-01T09:35:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-07-01T09:35:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"为什么这些空类的行为很奇怪？","slug":"为什么这些空类的行为很奇怪","link":"#为什么这些空类的行为很奇怪","children":[]},{"level":2,"title":"什么是名义上的类","slug":"什么是名义上的类","link":"#什么是名义上的类","children":[]},{"level":2,"title":"为什么在我的实例方法中，this 成了一个「孤儿」？","slug":"为什么在我的实例方法中-this-成了一个「孤儿」","link":"#为什么在我的实例方法中-this-成了一个「孤儿」","children":[]},{"level":2,"title":"当 Bar 是一个 class 时，Bar 和 typeof Bar 有什么区别？","slug":"当-bar-是一个-class-时-bar-和-typeof-bar-有什么区别","link":"#当-bar-是一个-class-时-bar-和-typeof-bar-有什么区别","children":[]},{"level":2,"title":"为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值？","slug":"为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值","link":"#为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值","children":[]},{"level":2,"title":"声明类和接口有什么区别？","slug":"声明类和接口有什么区别","link":"#声明类和接口有什么区别","children":[]},{"level":2,"title":"接口继承类，意味着什么？","slug":"接口继承类-意味着什么","link":"#接口继承类-意味着什么","children":[]},{"level":2,"title":"为什么我会得到错误：TypeError: [base class name] is not defined in __extends？","slug":"为什么我会得到错误-typeerror-base-class-name-is-not-defined-in-extends","link":"#为什么我会得到错误-typeerror-base-class-name-is-not-defined-in-extends","children":[]},{"level":2,"title":"为什么我会得到 TypeError: Cannot read property 'prototype' of undefined\\" in __extends 的错误？","slug":"为什么我会得到-typeerror-cannot-read-property-prototype-of-undefined-in-extends-的错误","link":"#为什么我会得到-typeerror-cannot-read-property-prototype-of-undefined-in-extends-的错误","children":[]},{"level":2,"title":"为什么不扩展 Error、Array、Map 内置函数？","slug":"为什么不扩展-error、array、map-内置函数","link":"#为什么不扩展-error、array、map-内置函数","children":[{"level":3,"title":"例如：","slug":"例如","link":"#例如","children":[]},{"level":3,"title":"推荐","slug":"推荐","link":"#推荐","children":[]}]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1551100134000,"updatedTime":1593596100000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":6},{"name":"AllenLee","email":"648384410li@gmail.com","commits":1},{"name":"Charlie An","email":"1481988258@qq.com","commits":1}]},"excerpt":"\\n<h2>为什么这些空类的行为很奇怪？</h2>\\n<blockquote>\\n<p>我写下这段代码，并期望它抛出错误</p>\\n</blockquote>\\n<div class=\\"language-typescript\\" data-highlighter=\\"prismjs\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Empty</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token comment\\">/* empty */</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">var</span> e2<span class=\\"token operator\\">:</span> Empty <span class=\\"token operator\\">=</span> window<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/faqs/class.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}`);export{E as comp,B as data};
