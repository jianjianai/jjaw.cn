import{_ as a,o as e,c as o,b as s,a as p,e as t}from"./app-C48C3RRu.js";const i={},l=p(`<h1 id="解读-errors" tabindex="-1"><a class="header-anchor" href="#解读-errors"><span>解读 Errors</span></a></h1><p>TypeScript 是一种专注于帮助开发人员的编程语言，当错误出现时，它会提供尽可能提供非常有用的错误信息。这对于那些信任使用者的编译器来说，可能会导致轻微的信息量过载，而不会那么实用。</p><p>让我们来看一个在 IDE 中的例子：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">SomethingComplex</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">takeSomethingComplex</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> SomethingComplex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&#39;some bar&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 一个可能会出现的错误使用</span></span>
<span class="line"><span class="token keyword">const</span> fail <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  foo<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span></span>
<span class="line">  bar<span class="token operator">:</span> getBar</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">takeSomethingComplex</span><span class="token punctuation">(</span>fail<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在这里 TypeScript 会报错</span></span>
<span class="line"></span></code></pre></div><p>这个简单的例子，演示了一个常见的程序设计错误，它调用函数失败（<code>bar: getBar</code> 应该是 <code>bar: getBar()</code>）。幸运的是，一旦不符合类型要求，TypeScript 将会捕捉到这个错误。</p><h2 id="错误分类" tabindex="-1"><a class="header-anchor" href="#错误分类"><span>错误分类</span></a></h2><p>TypeScript 错误信息分为两类：简洁和详细。</p><h3 id="简洁" tabindex="-1"><a class="header-anchor" href="#简洁"><span>简洁</span></a></h3><p>简洁的错误信息是为了提供一个编译器描述的错误号以及一些相关的信息，一个简洁的错误信息类似于如下所示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token constant">TS2345</span><span class="token operator">:</span> Argument <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;{ foo: number; bar: () =&gt; string; }&#39;</span> <span class="token keyword">is</span> not assignable to parameter <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;SomethingComplex&#39;</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre></div><p>然而，它没有提供更深层次的信息，如为什么这个错误会发生。这就是详细错误所需要的原因。</p><h2 id="详细" tabindex="-1"><a class="header-anchor" href="#详细"><span>详细</span></a></h2><p>详细的错误信息类似于如下所示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token punctuation">[</span>ts<span class="token punctuation">]</span></span>
<span class="line">Argument <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;{ foo: number; bar: () =&gt; string; }&#39;</span> <span class="token keyword">is</span> not assignable to parameter <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;SomethingComplex&#39;</span><span class="token punctuation">.</span></span>
<span class="line">  Types <span class="token keyword">of</span> property <span class="token string">&#39;bar&#39;</span> are incompatible<span class="token punctuation">.</span></span>
<span class="line">    Type <span class="token string">&#39;() =&gt; string&#39;</span> <span class="token keyword">is</span> not assignable to <span class="token keyword">type</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre></div><p>详细的错误信息是为了指导使用者知道为什么一些错误（在这个例子里是类型不兼容）会发生。第一行与简洁的错误信息相同，后跟一些详细的信息。你应该阅读这些详细信息，因为对于开发者的一些疑问，它都给出了问答：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token constant">ERROR</span><span class="token operator">:</span> Argument <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;{ foo: number; bar: () =&gt; string; }&#39;</span> <span class="token keyword">is</span> not assignable to parameter <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;SomethingComplex&#39;</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token constant">WHY</span><span class="token operator">?</span></span>
<span class="line"><span class="token constant">CAUSE</span> <span class="token constant">ERROR</span><span class="token operator">:</span> Types <span class="token keyword">of</span> property <span class="token string">&#39;bar&#39;</span> are incompatible<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token constant">WHY</span><span class="token operator">?</span></span>
<span class="line"><span class="token constant">CAUSE</span> <span class="token constant">ERROR</span><span class="token operator">:</span> Type <span class="token string">&#39;() =&gt; string&#39;</span> <span class="token keyword">is</span> not assignable to <span class="token keyword">type</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre></div><p>所以，最根本的原因是：</p><ul><li>在属性 <code>bar</code></li><li>函数 <code>() =&gt; string</code> 它应该是一个字符串。</li></ul><p>这能够帮助开发者修复 bar 属性的 bug（它们忘记了调用这个函数）。</p><h2 id="在-ide-中怎么提示" tabindex="-1"><a class="header-anchor" href="#在-ide-中怎么提示"><span>在 IDE 中怎么提示</span></a></h2><p>IDE 通常会在详细的错误提示之后显示简洁版本，如下所示：</p>`,21),c=["src"],r=s("ul",null,[s("li",null,"你通常可能只会阅读「为什么」的详细信息；"),s("li",null,[t("当你想寻找相同的错误时（使用 "),s("code",null,"TSXXX"),t(" 错误编号，或者部分错误信息），使用简洁的版本。")])],-1);function k(n,g){return e(),o("div",null,[l,s("img",{src:n.$withBase("/ide.png"),alt:"ide"},null,8,c),r])}const m=a(i,[["render",k],["__file","interpreting.html.vue"]]),u=JSON.parse(`{"path":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors","lang":"zh-CN","frontmatter":{"description":"解读 Errors TypeScript 是一种专注于帮助开发人员的编程语言，当错误出现时，它会提供尽可能提供非常有用的错误信息。这对于那些信任使用者的编译器来说，可能会导致轻微的信息量过载，而不会那么实用。 让我们来看一个在 IDE 中的例子： 这个简单的例子，演示了一个常见的程序设计错误，它调用函数失败（bar: getBar 应该是 bar: g...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/error/interpreting.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"解读 Errors"}],["meta",{"property":"og:description","content":"解读 Errors TypeScript 是一种专注于帮助开发人员的编程语言，当错误出现时，它会提供尽可能提供非常有用的错误信息。这对于那些信任使用者的编译器来说，可能会导致轻微的信息量过载，而不会那么实用。 让我们来看一个在 IDE 中的例子： 这个简单的例子，演示了一个常见的程序设计错误，它调用函数失败（bar: getBar 应该是 bar: g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2018-09-02T06:08:54.000Z"}],["meta",{"property":"article:modified_time","content":"2018-09-02T06:08:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解读 Errors\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2018-09-02T06:08:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"错误分类","slug":"错误分类","link":"#错误分类","children":[{"level":3,"title":"简洁","slug":"简洁","link":"#简洁","children":[]}]},{"level":2,"title":"详细","slug":"详细","link":"#详细","children":[]},{"level":2,"title":"在 IDE 中怎么提示","slug":"在-ide-中怎么提示","link":"#在-ide-中怎么提示","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1535292267000,"updatedTime":1535868534000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":3}]},"excerpt":"\\n<p>TypeScript 是一种专注于帮助开发人员的编程语言，当错误出现时，它会提供尽可能提供非常有用的错误信息。这对于那些信任使用者的编译器来说，可能会导致轻微的信息量过载，而不会那么实用。</p>\\n<p>让我们来看一个在 IDE 中的例子：</p>\\n<div class=\\"language-typescript\\" data-highlighter=\\"prismjs\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">SomethingComplex</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  foo<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  bar<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">takeSomethingComplex</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token operator\\">:</span> SomethingComplex<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">getBar</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">'some bar'</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 一个可能会出现的错误使用</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> fail <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  foo<span class=\\"token operator\\">:</span> <span class=\\"token number\\">123</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">  bar<span class=\\"token operator\\">:</span> getBar</span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token function\\">takeSomethingComplex</span><span class=\\"token punctuation\\">(</span>fail<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 在这里 TypeScript 会报错</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/error/interpreting.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}`);export{m as comp,u as data};
