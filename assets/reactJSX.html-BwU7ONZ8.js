import{_ as c,r as p,o as l,c as i,b as s,e as n,d as a,w as k,a as e}from"./app-D0VI1FnG.js";const r={},u=s("h1",{id:"react-jsx",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#react-jsx"},[s("span",null,"React JSX")])],-1),d={href:"https://egghead.io/courses/use-typescript-to-develop-react-applications",target:"_blank",rel:"noopener noreferrer"},g=s("h2",{id:"建立",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#建立"},[s("span",null,"建立")])],-1),m={href:"https://basarat.gitbooks.io/typescript/content/docs/quick/browser.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<ul><li>使用文件后缀 <code>.tsx</code>（替代 <code>.ts</code>）；</li><li>在你的 <code>tsconfig.json</code> 配置文件的 <code>compilerOptions</code> 里设置选项 <code>&quot;jsx&quot;: &quot;react&quot;</code>；</li><li>在你的项目里为 <code>JSX</code> 和 <code>React</code> 安装声明文件：<code>npm i -D @types/react @types/react-dom</code>；</li><li>导入 <code>react</code> 到你的 <code>.tsx</code> 文件（<code>import * as React from &#39;react&#39;</code>）。</li></ul><h2 id="html-标签-vs-组件" tabindex="-1"><a class="header-anchor" href="#html-标签-vs-组件"><span>HTML 标签 vs 组件</span></a></h2><p>React 不但能渲染 HTML 标签（strings）也能渲染 React 组件（classes）。JavaScript 触发这些的原理是不同的（<code>React.createElement(&#39;div&#39;)</code> vs <code>React.createElement(MyComponent)</code>），\b\b\b\b 确定使用哪一种方式取决于首字母的大小写，<code>foo</code> 被认为是 HTML 标签，<code>Foo</code> 被认为是一个组件。</p><h2 id="类型检查" tabindex="-1"><a class="header-anchor" href="#类型检查"><span>类型检查</span></a></h2><h3 id="html-标签" tabindex="-1"><a class="header-anchor" href="#html-标签"><span>HTML 标签</span></a></h3><p>一个 HTML 标签 <code>foo</code> 被标记为 <code>JSX.IntrinsicElements.foo</code> 类型。在我们已经安装的文件 <code>react-jsx.d.ts</code> 中定义了所有主要标签的类型，如下是一部分示例：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">namespace</span> <span class="token constant">JSX</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">interface</span> <span class="token class-name">IntrinsicElements</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token operator">:</span> React<span class="token punctuation">.</span>HTMLAttributes<span class="token punctuation">;</span></span>
<span class="line">    abbr<span class="token operator">:</span> React<span class="token punctuation">.</span>HTMLAttributes<span class="token punctuation">;</span></span>
<span class="line">    div<span class="token operator">:</span> React<span class="token punctuation">.</span>HTMLAttributes<span class="token punctuation">;</span></span>
<span class="line">    span<span class="token operator">:</span> React<span class="token punctuation">.</span>HTMLAttributes<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 其他</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="函数式组件" tabindex="-1"><a class="header-anchor" href="#函数式组件"><span>函数式组件</span></a></h3><p>你可以使用 <code>React.FunctionComponent</code> 接口定义函数组件：</p><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> MyComponent<span class="token operator">:</span> React<span class="token punctuation">.</span>FunctionComponent<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> props <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="类组件" tabindex="-1"><a class="header-anchor" href="#类组件"><span>类组件</span></a></h3><p>根据组件的 <code>props</code> 属性对组件进行类型检查。这是以 JSX 如何转换作为蓝本，例如：属性成为 <code>props</code> 的组成部分。</p><p><code>react.d.ts</code> 文件定义了 <code>React.Component&lt;Props,State&gt;</code>，你应该使用自己所需的 <code>Props</code> 和 <code>State</code> 声明扩展它：</p><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="react-jsx-tip-接收组件的实例" tabindex="-1"><a class="header-anchor" href="#react-jsx-tip-接收组件的实例"><span>React JSX Tip: 接收组件的实例</span></a></h3><p>react 类型声明文件提供了 <code>React.ReactElement&lt;T&gt;</code>，它可以让你通过传入 <code>&lt;T/&gt;</code>，来注解类组件的实例化结果。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyAwesomeComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> foo<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span>MyAwesomeComponent<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>MyAwesomeComponent <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Okay</span></span>
<span class="line"><span class="token keyword">const</span> bar<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span>MyAwesomeComponent<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>NotMyAwesomeComponent <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Error!</span></span>
<span class="line"></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当然，你可以将它用作函数参数的注解，甚至可以是 React 组件的 prop 成员。</p></div><h3 id="react-jsx-tip-接受一个可以在-props-起作用-并使用-jsx-渲染的组件" tabindex="-1"><a class="header-anchor" href="#react-jsx-tip-接受一个可以在-props-起作用-并使用-jsx-渲染的组件"><span>React JSX Tip: 接受一个可以在 Props 起作用，并使用 JSX 渲染的组件</span></a></h3><p>类型 <code>React.Component&lt;Props&gt;</code> 是 <code>React.ComponentClass&lt;P&gt;</code> 与 <code>React.StatelessComponent&lt;P&gt;</code> 的组合，所以你可以接受一些可以用作 Props 类型和使用 JSX 渲染的组件。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> <span class="token constant">X</span><span class="token operator">:</span> React<span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// from somewhere</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Render X with some props:</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token constant">X</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="react-jsx-tip-可渲染的接口" tabindex="-1"><a class="header-anchor" href="#react-jsx-tip-可渲染的接口"><span>React JSX Tip: 可渲染的接口</span></a></h3><p>React 可以渲染一些像 <code>JSX</code> 或者是 <code>string</code> 的内容，这些被合并到类型 <code>React.ReactNode</code> 中，因此，当你接收可渲染的内容时，你可以使用它：</p><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  header<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line">  body<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>header<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">header</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Header</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">body</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">body</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre></div><h3 id="react-jsx-tip-接收组件的接口" tabindex="-1"><a class="header-anchor" href="#react-jsx-tip-接收组件的接口"><span>React JSX tip: 接收组件的接口</span></a></h3><p>React 声明文件提供 <code>React.ReactElement&lt;T&gt;</code> 的接口，可以让你注解一个类组件实例化的返回值<code>&lt;T/&gt;</code>，如：</p><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyAwesomeComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> foo<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span>MyAwesomeComponent<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyAwesomeComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span> <span class="token comment">// Okay</span></span>
<span class="line"><span class="token keyword">const</span> bar<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span>MyAwesomeComponent<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NotMyAwesomeComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span> <span class="token comment">// Error!</span></span>
<span class="line"></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你也可以将其用做函数参数的注解，或者是 React 组件的 prop 注解。</p></div><h3 id="react-jsx-tip-接收可以作为-props-的组件-并且使用-jsx-渲染它" tabindex="-1"><a class="header-anchor" href="#react-jsx-tip-接收可以作为-props-的组件-并且使用-jsx-渲染它"><span>React JSX tip: 接收可以作为 props 的组件，并且使用 JSX 渲染它</span></a></h3><p>类型 <code>React.Component&lt;Props&gt;</code> 合并了 <code>React.ComponentClass&lt;P&gt;</code> 和 <code>React.StatelessComponent&lt;P&gt;</code>，因此，你可以接收一些使用 <code>Prop</code> 类型的组件，并使用 JSX 渲染它：</p><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="line"><span class="token keyword">const</span> <span class="token constant">X</span><span class="token operator">:</span> React<span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> foo <span class="token comment">// 来自其他地方</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 渲染 X</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">X</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre></div><h3 id="react-jsx-tip-泛型组件" tabindex="-1"><a class="header-anchor" href="#react-jsx-tip-泛型组件"><span>React JSX tip: 泛型组件</span></a></h3><p>它完全能按我们预期工作，如：</p><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="line"><span class="token comment">// 一个泛型组件</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">SelectProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> items<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Select<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>SelectProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Select<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> items<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="泛型函数" tabindex="-1"><a class="header-anchor" href="#泛型函数"><span>泛型函数</span></a></h3><p>一些像下面这样的正常工作：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">foo</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>然而不能使用箭头泛型函数：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span> <span class="token comment">// Error: T 标签没有关闭</span></span>
<span class="line"></span></code></pre></div><p><strong>解决办法</strong>：在泛型参数里使用 <code>extends</code> 来提示编译器，这是个泛型：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="react-tip-强类型的-refs" tabindex="-1"><a class="header-anchor" href="#react-tip-强类型的-refs"><span>React Tip: 强类型的 Refs</span></a></h3><p>基本上你在初始化一个变量时，使用 ref 和 null 的联合类型，并且在回调函数中初始化他：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ... something</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Foo<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Use</span> <span class="token punctuation">{</span></span>
<span class="line">  exampleRef<span class="token operator">:</span> Example <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Example ref<span class="token operator">=</span><span class="token punctuation">{</span>exampleRef <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exampleRef <span class="token operator">=</span> exampleRef<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>使用原生元素时也一样：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">FocusingInput</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span><span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token function-variable function">onChange</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  input<span class="token operator">:</span> HTMLInputElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>input</span>
<span class="line">        ref<span class="token operator">=</span><span class="token punctuation">{</span>input <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> input<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span>
<span class="line">        onChange<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h3>`,47),y=s("code",null,"as Foo",-1),b=e(`<h2 id="默认-props" tabindex="-1"><a class="header-anchor" href="#默认-props"><span>默认 Props</span></a></h2><ul><li>在有状态组件中使用默认的 Props：你可以通过 <code>null</code> 操作符（这不是一个理想的方式，但是这是我能想到的最简单的最小代码解决方案）告诉 TypeScript 一个属性将会被外部提供（React）。</li></ul><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/**</span>
<span class="line">   * @default &#39;TypeScript&#39;</span>
<span class="line">   */</span></span>
<span class="line">  compiler<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  framework<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    compiler<span class="token operator">:</span> <span class="token string">&#39;TypeScript&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>compiler<span class="token operator">!</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>compiler<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>framework<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hello</span></span> <span class="token attr-name">framework</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>React<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> <span class="token comment">// TypeScript React</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li>在 SFC 中使用默认的 Props：推荐使用简单的 JavaScript 参数，因为同样适用于 TypeScript 类型系统：</li></ul><div class="language-tsx" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="line"><span class="token keyword">const</span> Hello<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">SFC</span><span class="token operator">&lt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/**</span>
<span class="line">   * @default &#39;TypeScript&#39;</span>
<span class="line">   */</span></span>
<span class="line">  compiler<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  framework<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  compiler <span class="token operator">=</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Default prop</span></span>
<span class="line">  framework</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>compiler<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>framework<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hello</span></span> <span class="token attr-name">framework</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>React<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> <span class="token comment">// TypeScript React</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div>`,5);function x(f,v){const t=p("ExternalLinkIcon"),o=p("RouteLink");return l(),i("div",null,[u,s("blockquote",null,[s("p",null,[s("a",d,[n("在 React 中使用 TypeScript 的教学视频"),a(t)])])]),g,s("p",null,[n("在 "),s("a",m,[n("TypeScript in the browser"),a(t)]),n(" 章节中，我们已经学会开始开发 React 的应用了，以下是一些重点：")]),h,s("p",null,[n("如我们之前"),a(o,{to:"/git/ts-book/docs/typings/typeAssertion.html#as-foo-%E4%B8%8E-foo"},{default:k(()=>[n("提到")]),_:1}),n("的，可以使用 "),y,n(" 语法进行类型断言。")]),b])}const R=c(r,[["render",x],["__file","reactJSX.html.vue"]]),S=JSON.parse('{"path":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX","lang":"zh-CN","frontmatter":{"description":"React JSX 在 React 中使用 TypeScript 的教学视频 建立 在 TypeScript in the browser 章节中，我们已经学会开始开发 React 的应用了，以下是一些重点： 使用文件后缀 .tsx（替代 .ts）； 在你的 tsconfig.json 配置文件的 compilerOptions 里设置选项 \\"jsx\\"...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/jsx/reactJSX.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"React JSX"}],["meta",{"property":"og:description","content":"React JSX 在 React 中使用 TypeScript 的教学视频 建立 在 TypeScript in the browser 章节中，我们已经学会开始开发 React 的应用了，以下是一些重点： 使用文件后缀 .tsx（替代 .ts）； 在你的 tsconfig.json 配置文件的 compilerOptions 里设置选项 \\"jsx\\"..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-07-01T09:35:00.000Z"}],["meta",{"property":"article:modified_time","content":"2020-07-01T09:35:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React JSX\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-07-01T09:35:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"建立","slug":"建立","link":"#建立","children":[]},{"level":2,"title":"HTML 标签 vs 组件","slug":"html-标签-vs-组件","link":"#html-标签-vs-组件","children":[]},{"level":2,"title":"类型检查","slug":"类型检查","link":"#类型检查","children":[{"level":3,"title":"HTML 标签","slug":"html-标签","link":"#html-标签","children":[]},{"level":3,"title":"函数式组件","slug":"函数式组件","link":"#函数式组件","children":[]},{"level":3,"title":"类组件","slug":"类组件","link":"#类组件","children":[]},{"level":3,"title":"React JSX Tip: 接收组件的实例","slug":"react-jsx-tip-接收组件的实例","link":"#react-jsx-tip-接收组件的实例","children":[]},{"level":3,"title":"React JSX Tip: 接受一个可以在 Props 起作用，并使用 JSX 渲染的组件","slug":"react-jsx-tip-接受一个可以在-props-起作用-并使用-jsx-渲染的组件","link":"#react-jsx-tip-接受一个可以在-props-起作用-并使用-jsx-渲染的组件","children":[]},{"level":3,"title":"React JSX Tip: 可渲染的接口","slug":"react-jsx-tip-可渲染的接口","link":"#react-jsx-tip-可渲染的接口","children":[]},{"level":3,"title":"React JSX tip: 接收组件的接口","slug":"react-jsx-tip-接收组件的接口","link":"#react-jsx-tip-接收组件的接口","children":[]},{"level":3,"title":"React JSX tip: 接收可以作为 props 的组件，并且使用 JSX 渲染它","slug":"react-jsx-tip-接收可以作为-props-的组件-并且使用-jsx-渲染它","link":"#react-jsx-tip-接收可以作为-props-的组件-并且使用-jsx-渲染它","children":[]},{"level":3,"title":"React JSX tip: 泛型组件","slug":"react-jsx-tip-泛型组件","link":"#react-jsx-tip-泛型组件","children":[]},{"level":3,"title":"泛型函数","slug":"泛型函数","link":"#泛型函数","children":[]},{"level":3,"title":"React Tip: 强类型的 Refs","slug":"react-tip-强类型的-refs","link":"#react-tip-强类型的-refs","children":[]},{"level":3,"title":"类型断言","slug":"类型断言","link":"#类型断言","children":[]}]},{"level":2,"title":"默认 Props","slug":"默认-props","link":"#默认-props","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1535451088000,"updatedTime":1593596100000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":5},{"name":"Aaron Xie","email":"xieqiang9408@gmail.com","commits":1},{"name":"Charlie An","email":"1481988258@qq.com","commits":1},{"name":"King Muji","email":"z7fiv5@gmail.com","commits":1},{"name":"YanYuan","email":"1025138284@qq.com","commits":1},{"name":"chenc","email":"double_cl@163.com","commits":1},{"name":"zhangciwu","email":"conanla@qq.com","commits":1},{"name":"zongzi531","email":"zongzi.xy@gmail.com","commits":1},{"name":"随风","email":"daskyrk@users.noreply.github.com","commits":1}]},"excerpt":"\\n<blockquote>\\n<p><a href=\\"https://egghead.io/courses/use-typescript-to-develop-react-applications\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">在 React 中使用 TypeScript 的教学视频</a></p>\\n</blockquote>\\n<h2>建立</h2>\\n<p>在 <a href=\\"https://basarat.gitbooks.io/typescript/content/docs/quick/browser.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">TypeScript in the browser</a> 章节中，我们已经学会开始开发 React 的应用了，以下是一些重点：</p>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/jsx/reactJSX.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{R as comp,S as data};
