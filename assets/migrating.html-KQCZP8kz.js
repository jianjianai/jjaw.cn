import{_ as i,r as o,o as p,c as l,b as t,e as s,d as a,a as e}from"./app-BYbmP0cm.js";const c={},r=e(`<h1 id="从-javascript-迁移" tabindex="-1"><a class="header-anchor" href="#从-javascript-迁移"><span>从 JavaScript 迁移</span></a></h1><p>首先，假设如下：</p><ul><li>你了解 JavaScript；</li><li>你了解在项目中常用的方式和构建工具（如：webpack）。</li></ul><p>有了以上假设，一般来说，将 JavaScript 代码迁移至 TypeScript 包括以下步骤：</p><ul><li>添加一个 <code>tsconfig.json</code> 文件；</li><li>把文件扩展名从 <code>.js</code> 改成 <code>.ts</code>，开始使用 <code>any</code> 来减少错误；</li><li>开始在 TypeScript 中写代码，尽可能的减少 <code>any</code> 的使用；</li><li>回到旧代码，开始添加类型注解，并修复已识别的错误；</li><li>为第三方 JavaScript 代码定义环境声明。</li></ul><p>让我们进一步讨论其中的几个关键点。</p><p>记住：所有的 JavaScript 代码都是有效的 TypeScript 代码。这意味着，如果让 TypeScript 编译器编译 TypeScript 里的 JavaScript 代码，编译后的结果将会与原始的 JavaScript 代码一模一样。也就是说，把文件扩展名从 <code>.js</code> 改成 <code>.ts</code> 将不会造成任何负面的影响。</p><h2 id="减少错误" tabindex="-1"><a class="header-anchor" href="#减少错误"><span>减少错误</span></a></h2><p>代码被迁移至 TypeScript 后，TypeScript 将会立即对你的代码进行类型检查，你的 JavaScript 代码可能并不像想象中那样整齐了，因此你可能会收到一些报错信息。这时，可以使用 <code>any</code> 来解决大部分的报错问题：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// Error: 不能把 number 类型赋值给 string 类型</span></span>
<span class="line"></span></code></pre></div><p>虽然这些错误是有效的，并且在大多数情况下，根据这些错误所推断出的信息比代码库的不同部分的原始作者想象的更好，但是你的重点是在逐步更新旧代码库的同时，用 TypeScript 编写新代码。在这里，你可以使用类型断言来减少此错误：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">bar <span class="token operator">=</span> foo <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// ok</span></span>
<span class="line"></span></code></pre></div><p>从另一方面来说，你可能想用 <code>any</code> 用作类型注解：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span></span>
<span class="line">bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 不能把一个 number 类型赋值给 string 类型</span></span>
<span class="line"></span></code></pre></div><p>减少这种错误：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 添加 &#39;any&#39;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span></span>
<span class="line">bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">NOTICE</p><p>使用此种方式来减少错误是危险的，但是它允许你将注意力转移到你的新 TypeScript 代码错误上。当你进行下一步前，最好要留下 <code>// TODO</code> 的注释。</p></div><h2 id="第三方代码" tabindex="-1"><a class="header-anchor" href="#第三方代码"><span>第三方代码</span></a></h2><p>你可以将你的 JavaScript 代码改成 TypeScript 代码，但是你不能让整个世界都使用 TypeScript。这正是 TypeScript 环境声明支持的地方。我建议你以创建一个 <code>vendor.d.ts</code> 文件作为开始（<code>.d.ts</code> 文件扩展名指定这个文件是一个声明文件），然后我向文件里添加东西。或者，你也可以创建一个针对于特定库的声明文件，如为 jquery 创建 <code>jquery.d.ts</code> 文件。</p>`,19),d={class:"hint-container tip"},k=t("p",{class:"hint-container-title"},"NOTICE",-1),m={href:"https://github.com/borisyankov/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>根据 <code>jquery</code> 的使用，你可以非常简单快速的为它创建一个定义：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">var</span> $<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>有时，你可能想在某些内容（如 <code>jQuery</code>）上添加显式的注解，并且你会在类型声明空间中使用它。你可以通过 <code>type</code> 关键字快速的实现它：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">JQuery</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">var</span> $<span class="token operator">:</span> JQuery<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这提供给你一个更清晰的使用模式。</p>`,5),h=t("code",null,"jquery.d.ts",-1),y={href:"https://github.com/borisyankov/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},u=t("h2",{id:"第三方的-npm-模块",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#第三方的-npm-模块"},[t("span",null,"第三方的 NPM 模块")])],-1),b=t("code",null,"jquery",-1),v={href:"https://www.npmjs.com/package/jquery",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>然后你就可以在必要时导入它：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div>`,3),S={class:"hint-container tip"},j=t("p",{class:"hint-container-title"},"提示",-1),_=t("code",null,"jquery.d.ts",-1),T={href:"https://github.com/borisyankov/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},w=e(`<h2 id="额外的非-javascript-资源" tabindex="-1"><a class="header-anchor" href="#额外的非-javascript-资源"><span>额外的非 JavaScript 资源</span></a></h2><p>在 TypeScript 中，甚至可以允许你导入任何文件，例如 <code>.css</code> 文件（如果你使用的是 webpack 样式加载器或 css 模块），你只要添加如下代码（放在 <code>global.d.ts</code>）：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.css&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>现在你可以使用 <code>import * as foo from &#39;./some/file.css&#39;</code>。</p><p>与此相似，如果你想使用 html 模版（例如：angular），你可以：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.html&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div>`,6);function x(J,q){const n=o("ExternalLinkIcon");return p(),l("div",null,[r,t("div",d,[k,t("p",null,[s("几乎排名前 90% 的 JavaScript 库的声明文件存在于 "),t("a",m,[s("DefinitelyTyped"),a(n)]),s(" 仓库里，在创建自己定义的声明文件之前，我们建议你先去仓库中寻找是否有对应的声明文件。尽管如此，创建一个声明文件这种快速但不好的方式是减小使用 TypeScript 初始阻力的重要步骤")])]),g,t("p",null,[s("一个高质量的 "),h,s(" 已经在 "),t("a",y,[s("DefinitelyTyped"),a(n)]),s(" 中存在。现在你已经知道如何在使用第三方 JavaScript 模块时，快速克服从 JavaScript 至 TypeScript 的阻力了。在接下去的章节，我们将会讨论环境声明。")]),u,t("p",null,[s("与全局变量声明相似，你可以快速的定义一个全局模块，如：对于 "),b,s("，如果你想把它作为一个模块来使用（"),t("a",v,[s("NPM"),a(n)]),s("），可以自己通过以下方式实现：")]),f,t("div",S,[j,t("p",null,[s("再一次说明，一个高质量的 "),_,s(" 已经在 "),t("a",T,[s("DefinitelyTyped"),a(n)]),s(" 中存在，但是可能在你的包里没有，那么，你现在有一个简单快速的方式来继续迁移。")])]),w])}const N=i(c,[["render",x],["__file","migrating.html.vue"]]),C=JSON.parse('{"path":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移","lang":"zh-CN","frontmatter":{"description":"从 JavaScript 迁移 首先，假设如下： 你了解 JavaScript； 你了解在项目中常用的方式和构建工具（如：webpack）。 有了以上假设，一般来说，将 JavaScript 代码迁移至 TypeScript 包括以下步骤： 添加一个 tsconfig.json 文件； 把文件扩展名从 .js 改成 .ts，开始使用 any 来减少错误...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/typings/migrating.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"从 JavaScript 迁移"}],["meta",{"property":"og:description","content":"从 JavaScript 迁移 首先，假设如下： 你了解 JavaScript； 你了解在项目中常用的方式和构建工具（如：webpack）。 有了以上假设，一般来说，将 JavaScript 代码迁移至 TypeScript 包括以下步骤： 添加一个 tsconfig.json 文件； 把文件扩展名从 .js 改成 .ts，开始使用 any 来减少错误..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-02-23T01:22:58.000Z"}],["meta",{"property":"article:modified_time","content":"2020-02-23T01:22:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从 JavaScript 迁移\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-02-23T01:22:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"减少错误","slug":"减少错误","link":"#减少错误","children":[]},{"level":2,"title":"第三方代码","slug":"第三方代码","link":"#第三方代码","children":[]},{"level":2,"title":"第三方的 NPM 模块","slug":"第三方的-npm-模块","link":"#第三方的-npm-模块","children":[]},{"level":2,"title":"额外的非 JavaScript 资源","slug":"额外的非-javascript-资源","link":"#额外的非-javascript-资源","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1533973275000,"updatedTime":1582420978000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":6},{"name":"Charles","email":"15555602203@163.com","commits":1},{"name":"EastblueOkay","email":"eastblue_lan@126.com","commits":1},{"name":"Jexxie","email":"1989wjx@gmail.com","commits":1},{"name":"Sean Wong","email":"1971822513@qq.com","commits":1},{"name":"stevezyyang","email":"stevezyyang@tencent.com","commits":1},{"name":"阿卡琳","email":"hufan.akarin@Gmail.com","commits":1},{"name":"项鸿伟","email":"734824565@qq.com","commits":1}]},"excerpt":"\\n<p>首先，假设如下：</p>\\n<ul>\\n<li>你了解 JavaScript；</li>\\n<li>你了解在项目中常用的方式和构建工具（如：webpack）。</li>\\n</ul>\\n<p>有了以上假设，一般来说，将 JavaScript 代码迁移至 TypeScript 包括以下步骤：</p>\\n<ul>\\n<li>添加一个 <code>tsconfig.json</code> 文件；</li>\\n<li>把文件扩展名从 <code>.js</code> 改成 <code>.ts</code>，开始使用 <code>any</code> 来减少错误；</li>\\n<li>开始在 TypeScript 中写代码，尽可能的减少 <code>any</code> 的使用；</li>\\n<li>回到旧代码，开始添加类型注解，并修复已识别的错误；</li>\\n<li>为第三方 JavaScript 代码定义环境声明。</li>\\n</ul>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/typings/migrating.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{N as comp,C as data};
