import{_ as n,r as c,o as l,c as s,b as e,e as t,d as a,w as o,a as f}from"./app-CcpjxeBW.js";const p={},d=e("h1",{id:"用-javascript-写测试用例",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#用-javascript-写测试用例"},[e("span",null,"用 JavaScript 写测试用例")])],-1),h=e("p",null,"Truffle使用Mocha测试框架和Chai进行断言，为您提供了一个坚实的框架，以便编写JavaScript测试。让我们深入了解一下Truffle如何在Mocha的基础上进行构建，使得您的合约测试变得轻而易举。",-1),u={href:"https://mochajs.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},m=f('<h2 id="使用contract-代替describe" tabindex="-1"><a class="header-anchor" href="#使用contract-代替describe"><span>使用contract()代替describe()</span></a></h2><p>结构上，您的测试应该与Mocha的测试基本保持不变：您的测试应该存在于<code>./test</code>目录中，它们应该以.js扩展名结尾，并且它们应该包含Mocha将识别为自动化测试的代码。使Truffle测试与Mocha不同的是<code>contract()</code>函数：此函数的工作方式与<code>describe()</code>完全相同，但它启用了Truffle的迁移功能。它的工作方式如下：</p><p>在运行每个<code>contract()</code>函数之前，您的合约会重新部署到正在运行的以太坊客户端，以便其中的测试在干净的状态下运行。</p><p><code>contract()</code>函数提供了一个由您的以太坊客户端提供的帐户列表，您可以使用这些帐户来编写测试。</p><p>由于Truffle在底层使用Mocha，因此您仍然可以使用<code>describe()</code>来运行普通的Mocha测试，而无需使用Truffle的迁移功能。</p><h2 id="在您的测试中使用合约类。" tabindex="-1"><a class="header-anchor" href="#在您的测试中使用合约类。"><span>在您的测试中使用合约类。</span></a></h2><p>合约类是使JavaScript能够与合约进行交互的基础（它们基本上就一个合约的映射）。由于Truffle无法检测出您在测试中需要与哪些合约进行交互，您需要明确要求这些合约。您可以通过使用<code>artifacts.require()</code>方法来实现这一点，这是Truffle提供的一种方法，允许您请求特定Solidity合约的可用合约类。如下面的示例所示，您可以使用这个类来确保您的合约正常工作。</p><p>有关使用合约类的更多信息，请参阅“与您的合约交互”部分。</p><h2 id="使用-artifacts-require" tabindex="-1"><a class="header-anchor" href="#使用-artifacts-require"><span>使用 artifacts.require()</span></a></h2><p>在您的测试中使用<code>artifacts.require()</code>的方式与在迁移中使用它的方式相同；您只需传递合约的名称即可。有关详细用法，请参阅迁移部分中的<code>artifacts.require()</code>文档。</p><h2 id="使用-web3" tabindex="-1"><a class="header-anchor" href="#使用-web3"><span>使用 web3</span></a></h2><p>在每个测试文件中，都有一个已配置到正确提供程序的web3实例。因此，调用<code>web3.eth.getBalance</code>就可以正常工作！</p><h2 id="相关内容" tabindex="-1"><a class="header-anchor" href="#相关内容"><span>相关内容</span></a></h2>',13);function b(_,g){const i=c("ExternalLinkIcon"),r=c("RouteLink");return l(),s("div",null,[d,h,e("p",null,[t("注意：如果您不熟悉使用Mocha编写单元测试，请在继续之前查看"),e("a",u,[t("Mocha的文档"),a(i)]),t("。")]),m,e("p",null,[a(r,{to:"/articles/12-truffle%E6%B5%8B%E8%AF%95/0-truffleApi%E7%AE%80%E4%BB%8B.html"},{default:o(()=>[t("truffleApi简介")]),_:1}),a(r,{to:"/articles/12-truffle%E6%B5%8B%E8%AF%95/2-truffle%E5%88%9D%E6%AD%A5%E5%85%A5%E9%97%A8.html"},{default:o(()=>[t("truffle初步入门")]),_:1})])])}const k=n(p,[["render",b],["__file","index.html.vue"]]),M=JSON.parse('{"path":"/2024/12/11/truffle-test-start/","title":"truffle 测试用例简单讲解","lang":"zh-CN","frontmatter":{"permalinkPattern":"2024/12/11/truffle-test-start/","title":"truffle 测试用例简单讲解","description":"本文简单讲解了truffle测试的使用方法，帮助对于有Mocha经验的您快速入门。","tags":["后端"],"star":false,"comment":true,"head":[["meta",{"property":"og:url","content":"https://jjaw.cn/2024/12/11/truffle-test-start/"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"truffle 测试用例简单讲解"}],["meta",{"property":"og:description","content":"本文简单讲解了truffle测试的使用方法，帮助对于有Mocha经验的您快速入门。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-11T07:27:23.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:modified_time","content":"2024-12-11T07:27:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"truffle 测试用例简单讲解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-11T07:27:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用contract()代替describe()","slug":"使用contract-代替describe","link":"#使用contract-代替describe","children":[]},{"level":2,"title":"在您的测试中使用合约类。","slug":"在您的测试中使用合约类。","link":"#在您的测试中使用合约类。","children":[]},{"level":2,"title":"使用 artifacts.require()","slug":"使用-artifacts-require","link":"#使用-artifacts-require","children":[]},{"level":2,"title":"使用 web3","slug":"使用-web3","link":"#使用-web3","children":[]},{"level":2,"title":"相关内容","slug":"相关内容","link":"#相关内容","children":[]}],"git":{"isRoot":true,"createdTime":1733902043000,"updatedTime":1733902043000,"contributors":[{"name":"jjaw","email":"jjaw@jjaw.cn","commits":1}]},"excerpt":"\\n<p>Truffle使用Mocha测试框架和Chai进行断言，为您提供了一个坚实的框架，以便编写JavaScript测试。让我们深入了解一下Truffle如何在Mocha的基础上进行构建，使得您的合约测试变得轻而易举。</p>\\n<p>注意：如果您不熟悉使用Mocha编写单元测试，请在继续之前查看<a href=\\"https://mochajs.bootcss.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Mocha的文档</a>。</p>\\n<h2>使用contract()代替describe()</h2>\\n<p>结构上，您的测试应该与Mocha的测试基本保持不变：您的测试应该存在于<code>./test</code>目录中，它们应该以.js扩展名结尾，并且它们应该包含Mocha将识别为自动化测试的代码。使Truffle测试与Mocha不同的是<code>contract()</code>函数：此函数的工作方式与<code>describe()</code>完全相同，但它启用了Truffle的迁移功能。它的工作方式如下：</p>","github_edit":{"fileGitUrl":"https://github.com/jianjianai/jjaw.cn/edit/master/articles/12-truffle测试/1-truffle用JavaScript写测试用例.md"},"navPage":[{"title":"truffleApi 使用简介","link":"/2024/12/11/truffle-api/"},{"title":"truffle 测试用例简单讲解","link":"/2024/12/11/truffle-test-start/"},{"title":"truffle 详细快速入门","link":"/2024/12/11/truffle-beginner/"},{"title":"常用 assertApi","link":"/2024/12/11/truffle-assert/"},{"title":"常用 web3Api","link":"/2024/12/11/truffle-web3-api/"}]}');export{k as comp,M as data};
