import{_ as a,o as n,c as s,a as p}from"./app-D0VI1FnG.js";const t={},e=p(`<h1 id="javascript-set-和-map" tabindex="-1"><a class="header-anchor" href="#javascript-set-和-map"><span>JavaScript Set 和 Map</span></a></h1><p>Set 和 Map 是 JavaScript 中的两个重要数据结构。理解 Set 和 Map 可以更好地处理数据，提高代码效率。</p><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h2><p>Set 允许存储任何类型的唯一值，无论是原始值还是对象引用。集合中的元素只会出现一次。此外，Set 的性能优于数组，尤其在添加、删除和查找元素方面。</p><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">//创建一个空的set</span></span>
<span class="line"><span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">//创建一个，包含了整数 \`10\`、字符串 \`&#39;apple&#39;\` 和布尔值 \`true\`的set。</span></span>
<span class="line"><span class="token keyword">const</span> mySet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="添加元素" tabindex="-1"><a class="header-anchor" href="#添加元素"><span>添加元素</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// 现在 \`mySet\` 包含了整数 \`10\`、字符串 \`&#39;apple&#39;\` 和布尔值 \`true\`。</span></span>
<span class="line"></span></code></pre></div><h3 id="删除元素" tabindex="-1"><a class="header-anchor" href="#删除元素"><span>删除元素</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从 Set 中删除整数 10 </span></span>
<span class="line"><span class="token comment">// 现在 \`mySet\` 中没有任何值了</span></span>
<span class="line"></span></code></pre></div><h3 id="去重" tabindex="-1"><a class="header-anchor" href="#去重"><span>去重</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重复元素不会被添加</span></span>
<span class="line"></span></code></pre></div><h3 id="判断元素是否存在" tabindex="-1"><a class="header-anchor" href="#判断元素是否存在"><span>判断元素是否存在</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h3><h4 id="使用-for-of-循环" tabindex="-1"><a class="header-anchor" href="#使用-for-of-循环"><span>使用 <code>for...of</code> 循环</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> mySet<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：10, &#39;apple&#39;, true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h4 id="使用-foreach-方法" tabindex="-1"><a class="header-anchor" href="#使用-foreach-方法"><span>使用 <code>.forEach()</code> 方法</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mySet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：10, &#39;apple&#39;, true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><p>Map 是一种数据结构，用于存储键值对。与普通对象不同，Map 允许使用任何类型的键，而不仅限于字符串。Map 保持键值对的插入顺序，适用于需要按照插入顺序遍历的场景。此外，Map 的灵活性使其适用于处理更复杂的键值对结构。在大量数据操作时，Map 的性能也优越于普通对象。</p><h3 id="创建-map" tabindex="-1"><a class="header-anchor" href="#创建-map"><span>创建 Map</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个空map</span></span>
<span class="line"></span></code></pre></div><h3 id="添加元素-1" tabindex="-1"><a class="header-anchor" href="#添加元素-1"><span>添加元素</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//现在 \`myMap\` 包含了三个键值对。</span></span>
<span class="line"></span></code></pre></div><h3 id="删除元素-1" tabindex="-1"><a class="header-anchor" href="#删除元素-1"><span>删除元素</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">myMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除键为 &#39;key1&#39; 的键值对</span></span>
<span class="line"></span></code></pre></div><p>如果成功删除，返回 <code>true</code>；如果 Map 中不存在该键，返回 <code>false</code>。</p><h3 id="遍历-map" tabindex="-1"><a class="header-anchor" href="#遍历-map"><span>遍历 Map</span></a></h3><h4 id="使用-foreach-方法遍历" tabindex="-1"><a class="header-anchor" href="#使用-foreach-方法遍历"><span>使用 <code>.forEach()</code> 方法遍历</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">myMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="使用-for-of-循环遍历" tabindex="-1"><a class="header-anchor" href="#使用-for-of-循环遍历"><span>使用 <code>for...of</code> 循环遍历</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h4 id="使用-keys-获取所有键" tabindex="-1"><a class="header-anchor" href="#使用-keys-获取所有键"><span>使用 <code>.keys()</code> 获取所有键</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h4 id="使用-values-获取所有值" tabindex="-1"><a class="header-anchor" href="#使用-values-获取所有值"><span>使用 <code>.values()</code> 获取所有值</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h4 id="使用-entries-获取所有键值对" tabindex="-1"><a class="header-anchor" href="#使用-entries-获取所有键值对"><span>使用 <code>.entries()</code> 获取所有键值对</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,39),c=[e];function o(l,i){return n(),s("div",null,c)}const k=a(t,[["render",o],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/2024/5/29/js-set-map/","title":"JavaScript Set 和 Map - 前端开发入门","lang":"zh-CN","frontmatter":{"permalinkPattern":"2024/5/29/js-set-map/","title":"JavaScript Set 和 Map - 前端开发入门","description":"Set 和 Map 是 JavaScript 中的两个重要数据结构。Set 允许存储任何类型的唯一值。此外，Set 的性能优于数组，尤其在添加、删除和查找元素方面。Map 是一种数据结构，用于存储键值对。与普通对象不同，Map 允许使用任何类型的键，而不仅限于字符串。此外，Map 在大量数据操作时，Map 的性能也优越于普通对象。","star":false,"comment":true,"head":[["meta",{"property":"og:url","content":"https://jjaw.cn/2024/5/29/js-set-map/"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"JavaScript Set 和 Map - 前端开发入门"}],["meta",{"property":"og:description","content":"Set 和 Map 是 JavaScript 中的两个重要数据结构。Set 允许存储任何类型的唯一值。此外，Set 的性能优于数组，尤其在添加、删除和查找元素方面。Map 是一种数据结构，用于存储键值对。与普通对象不同，Map 允许使用任何类型的键，而不仅限于字符串。此外，Map 在大量数据操作时，Map 的性能也优越于普通对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T08:47:36.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T08:47:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript Set 和 Map - 前端开发入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-07T08:47:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Set","slug":"set","link":"#set","children":[{"level":3,"title":"创建","slug":"创建","link":"#创建","children":[]},{"level":3,"title":"添加元素","slug":"添加元素","link":"#添加元素","children":[]},{"level":3,"title":"删除元素","slug":"删除元素","link":"#删除元素","children":[]},{"level":3,"title":"去重","slug":"去重","link":"#去重","children":[]},{"level":3,"title":"判断元素是否存在","slug":"判断元素是否存在","link":"#判断元素是否存在","children":[]},{"level":3,"title":"遍历","slug":"遍历","link":"#遍历","children":[]}]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[{"level":3,"title":"创建 Map","slug":"创建-map","link":"#创建-map","children":[]},{"level":3,"title":"添加元素","slug":"添加元素-1","link":"#添加元素-1","children":[]},{"level":3,"title":"删除元素","slug":"删除元素-1","link":"#删除元素-1","children":[]},{"level":3,"title":"遍历 Map","slug":"遍历-map","link":"#遍历-map","children":[]}]}],"git":{"isRoot":true,"createdTime":1716987291000,"updatedTime":1723020456000,"contributors":[{"name":"jjaw","email":"jjaw@jjaw.cn","commits":1},{"name":"panpanaw","email":"131033097+panpanaw@users.noreply.github.com","commits":1}]},"excerpt":"\\n<p>Set 和 Map 是 JavaScript 中的两个重要数据结构。理解 Set 和 Map 可以更好地处理数据，提高代码效率。</p>\\n<h2>Set</h2>\\n<p>Set 允许存储任何类型的唯一值，无论是原始值还是对象引用。集合中的元素只会出现一次。此外，Set 的性能优于数组，尤其在添加、删除和查找元素方面。</p>\\n<h3>创建</h3>\\n<div class=\\"language-javascript\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"line\\"><span class=\\"token comment\\">//创建一个空的set</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> mySet <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Set</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> </span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">//创建一个，包含了整数 `10`、字符串 `\'apple\'` 和布尔值 `true`的set。</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> mySet1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Set</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\'apple\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","github_edit":{"fileGitUrl":"https://github.com/jianjianai/jjaw.cn/edit/master/articles/9-web教程系列/JavaScriptSet和Map.md"},"navPage":[{"title":"js系列","link":"#","items":[{"title":"JavaScript正则表达式","link":"/2024/5/26/js-regular-expression/"},{"title":"JavaScript数组方法","link":"/2024/5/26/js-array-method/"},{"title":"JavaScript字符串操作","link":"/2024/5/22/js-string-operation/"},{"title":"JavaScript Set 和 Map","link":"/2024/5/29/js-set-map/"}]}]}');export{k as comp,r as data};
