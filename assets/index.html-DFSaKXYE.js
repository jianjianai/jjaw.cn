import{_ as s,o as n,c as a,a as t}from"./app-BDxFVNMI.js";const p={},e=t(`<h1 id="javascript字符串操作" tabindex="-1"><a class="header-anchor" href="#javascript字符串操作"><span>JavaScript字符串操作</span></a></h1><p>字符串操作对于web开发是至关重要的，在Web开发中，字符串是存储和处理文本数据的基本单位。无论是用户输入、文件读取还是网络请求，大部分数据都以字符串形式出现。只有掌握字符串操作才能效地处理这些数据。</p><p>用户与网站的交互很大程度上涉及到字符串数据的使用，例如填写表单、搜索查询和显示消息。也需要掌握字符串操作。</p><h2 id="字符串的创建和基本操作" tabindex="-1"><a class="header-anchor" href="#字符串的创建和基本操作"><span>字符串的创建和基本操作</span></a></h2><p>在JavaScript中，字符串是存储文本数据的一种基本数据类型，它们是不可变的，意味着字符串一旦创建，其内容就不能被改变。</p><p>字符串的基本操作包含创建字符串变量，连接字符串，获取字符串长度。</p><h3 id="创建字符串变量" tabindex="-1"><a class="header-anchor" href="#创建字符串变量"><span>创建字符串变量</span></a></h3><ul><li>直接定义 可以通过简单地将文本放在引号中来创建字符串。可以使用单引号、双引号或反引号（模板字符串）。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> str3 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello World</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li>构造函数创建</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="连接字符串" tabindex="-1"><a class="header-anchor" href="#连接字符串"><span>连接字符串</span></a></h3><ul><li>使用加号（+）操作符 最简单的连接字符串的方法是使用加号 +。这个运算符可以将多个字符串值连接起来，形成一个新的字符串。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">&#39;神奇&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">&#39;小破站&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> fullName <span class="token operator">=</span> firstName <span class="token operator">+</span> lastName<span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;神奇小破站&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>使用模板字符串 ES6引入了模板字符串，这是一种新的字符串拼接方式，可以使用反引号 \` 来创建。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">&#39;神奇&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">&#39;小破站&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;你好，神奇小破站！&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>使用concat()方法</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">&#39;神奇&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">&#39;小破站&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> fullName <span class="token operator">=</span> firstName<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;神奇小破站&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="获取字符串长度" tabindex="-1"><a class="header-anchor" href="#获取字符串长度"><span>获取字符串长度</span></a></h3><p>length 属性用于获取字符串的长度。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> length <span class="token operator">=</span> greeting<span class="token punctuation">.</span>length<span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span></span>
<span class="line"></span></code></pre></div><h2 id="字符串的查找和替换" tabindex="-1"><a class="header-anchor" href="#字符串的查找和替换"><span>字符串的查找和替换</span></a></h2><p>在JavaScript中，字符串的查找和替换是处理文本数据时常用的操作。</p><h3 id="查找子字符串" tabindex="-1"><a class="header-anchor" href="#查找子字符串"><span>查找子字符串</span></a></h3><ul><li>indexOf() indexOf() 返回子字符串首次出现的索引位置，如果没有找到则返回-1。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span></span>
<span class="line"></span></code></pre></div><ul><li>lastIndexOf() 与 indexOf() 类似，但返回子字符串最后一次出现的索引位置。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lastIndex <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span></span>
<span class="line"></span></code></pre></div><h3 id="替换内容" tabindex="-1"><a class="header-anchor" href="#替换内容"><span>替换内容</span></a></h3><ul><li>replace() replace() 用于替换字符串中的内容。它可以接受一个子字符串或正则表达式作为搜索值，以及一个替换值。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> replacedStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replacedStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hello JavaScript&#39;</span></span>
<span class="line"></span></code></pre></div><ul><li>replaceAll() 它可以替换字符串中所有匹配的子字符串，而不仅仅是第一个匹配项。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> repeatedStr <span class="token operator">=</span> <span class="token string">&#39;Hello Hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> replacedStr <span class="token operator">=</span> repeatedStr<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replacedStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hi Hi&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="字符串的切割和组合" tabindex="-1"><a class="header-anchor" href="#字符串的切割和组合"><span>字符串的切割和组合</span></a></h2><h3 id="分割字符串" tabindex="-1"><a class="header-anchor" href="#分割字符串"><span>分割字符串</span></a></h3><ul><li>split() split() 方法可以根据指定的分隔符将字符串分割成一个数组。如果不提供分隔符，整个字符串会作为数组的唯一元素。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;apple,banana,cherry&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;]</span></span>
<span class="line"></span></code></pre></div><ul><li>slice() slice() 方法可以提取字符串的一部分，并返回一个新字符串，不会修改原字符串。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;apple,banana,cherry&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> slicedStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>slicedStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;banana&#39;</span></span>
<span class="line"></span></code></pre></div><ul><li>substring() substring() 方法类似于 slice()，但它不能接受负数索引。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;apple,banana,cherry&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> subStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;apple&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="合并数组为字符串" tabindex="-1"><a class="header-anchor" href="#合并数组为字符串"><span>合并数组为字符串</span></a></h3><ul><li>join() 当你有一个字符串数组时，join() 方法可以将数组中的所有元素组合成一个字符串。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> sentence <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;Hello world !&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="字符串的转换和处理" tabindex="-1"><a class="header-anchor" href="#字符串的转换和处理"><span>字符串的转换和处理</span></a></h2><h3 id="大小写转换" tabindex="-1"><a class="header-anchor" href="#大小写转换"><span>大小写转换</span></a></h3><ul><li>toUpperCase() 使用 toUpperCase() 可以将字符串转换为全部大写。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> upperStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>upperStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;HELLO WORLD&#39;</span></span>
<span class="line"></span></code></pre></div><ul><li>toLowerCase() 使用 toLowerCase() 可以将字符串转换为全部小写。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lowerStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lowerStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;hello world&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="字符串解析" tabindex="-1"><a class="header-anchor" href="#字符串解析"><span>字符串解析</span></a></h3><ul><li>parseInt() parseInt() 可以将字符串解析为整数</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> intValue <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>intValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 123</span></span>
<span class="line"></span></code></pre></div><ul><li>parseFloat() parseFloat() 可以将字符串解析为小数</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> floatValue <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;123.45&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>floatValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.45</span></span>
<span class="line"></span></code></pre></div><h3 id="去除空白" tabindex="-1"><a class="header-anchor" href="#去除空白"><span>去除空白</span></a></h3><ul><li>trim() trim() 方法可以去除字符串两端的空白字符</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> paddedStr <span class="token operator">=</span> <span class="token string">&#39;   Hello World   &#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> trimmedStr <span class="token operator">=</span> paddedStr<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trimmedStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello World</span></span>
<span class="line"></span></code></pre></div><h2 id="字符串编码和解码" tabindex="-1"><a class="header-anchor" href="#字符串编码和解码"><span>字符串编码和解码</span></a></h2><p>字符串编码和解码是处理URI的重要操作。它们允许开发者在发送请求之前对URL进行编码，以及在接收响应后对其进行解码。</p><h3 id="encodeuri和encodeuricomponent" tabindex="-1"><a class="header-anchor" href="#encodeuri和encodeuricomponent"><span>encodeURI和encodeURIComponent</span></a></h3><ul><li>encodeURI encodeURI 用于编码整个URI，它不会对 URI 中本身属于合法部分的字符进行编码，如冒号、正斜杠、问号和井号。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> uri <span class="token operator">=</span> <span class="token string">&#39;https://lanqiao.com/搜索?query=测试&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> encodedURI <span class="token operator">=</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encodedURI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;https://lanqiao.com/%E6%90%9C%E7%B4%A2?query=%E6%B5%8B%E8%AF%95&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>encodeURIComponent encodeURIComponent 用于编码 URI 的组件或参数，它会对传递给它的所有字符进行编码，包括那些在URI中有特殊含义的字符。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token string">&#39;搜索?query=测试&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> encodedQuery <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encodedQuery<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;%E6%90%9C%E7%B4%A2%3Fquery%3D%E6%B5%8B%E8%AF%95&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="decodeuri和decodeuricomponent" tabindex="-1"><a class="header-anchor" href="#decodeuri和decodeuricomponent"><span>decodeURI和decodeURIComponent</span></a></h3><ul><li>decodeURI decodeURI 用于解码通过 encodeURI 方法编码的整个URI。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> encodedURI <span class="token operator">=</span> <span class="token string">&quot;https://lanqiao.com/%E6%90%9C%E7%B4%A2?query=%E6%B5%8B%E8%AF%95&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> decodedURI <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>encodedURI<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decodedURI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;https://example.com/搜索?query=测试&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>decodeURIComponent decodeURIComponent 用于解码通过 encodeURIComponent 方法编码的URI。</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> encodedQuery <span class="token operator">=</span> <span class="token string">&quot;%E6%90%9C%E7%B4%A2%3Fquery%3D%E6%B5%8B%E8%AF%95&quot;</span></span>
<span class="line"><span class="token keyword">let</span> decodedQuery <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>encodedQuery<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decodedQuery<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;搜索?query=测试&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>特性 <ul><li>不可变性：JavaScript中的字符串在创建后其内容不能被改变。</li></ul></li><li>基本操作 <ul><li>创建 <ul><li>直接定义：&#39; &quot; \` 符号定义字符串</li><li>构造函数创建： new String() 构造函数创建字符串对象。</li></ul></li><li>拼接 <ul><li>+运算符：+将多个字符串连接成一个新字符串。</li><li>模板字符串：反引号和 \${} 插入变量或表达式。</li><li>concat()：将字符串序列连接起来。</li></ul></li><li>长度 <ul><li>length属性：属性获取字符串的长度。</li></ul></li></ul></li><li>查找和替换 <ul><li>查找 <ul><li>indexOf()：查找子字符串首次出现的位置。</li><li>lastIndexOf()： 查找子字符串最后一次出现的位置。</li></ul></li><li>替换 <ul><li>replace()：替换字符串中的内容。</li><li>replaceAll()：替换所有匹配的子字符串。</li></ul></li></ul></li><li>切割和组合 <ul><li>分割 <ul><li>split()：根据分隔符将字符串分割成数组</li><li>substring()：提取字符串的一部分</li></ul></li><li>合并 <ul><li>join()：将数组中的元素组合成一个字符串</li></ul></li></ul></li><li>转换和处理 <ul><li>大小写转换 <ul><li>toUpperCase()：部转化为大写</li><li>toLowerCase()：全部转换为小写</li></ul></li><li>字符串解析 <ul><li>parseInt()：解析成整数</li><li>parseFloat()：解析成小数</li></ul></li><li>去除空白 <ul><li>trim()：去除两端的空白</li></ul></li></ul></li><li>编码和解码 <ul><li>encodeURI和encodeURIComponent：将字符串进行URL编码。</li><li>decodeURI和decodeURIComponent：将URL解码的字符串进行解码。</li></ul></li></ul>`,72),l=[e];function o(c,i){return n(),a("div",null,l)}const r=s(p,[["render",o],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/2024/5/22/js-string-operation/","title":"JavaScript字符串操作 - 前端开发入门","lang":"zh-CN","frontmatter":{"permalinkPattern":"2024/5/22/js-string-operation/","title":"JavaScript字符串操作 - 前端开发入门","description":"深入了解JavaScript字符串的强大功能，从基本的创建和操作到复杂的查找、替换、编码和解码。本教程将带你一步步探索字符串处理的各个方面，包括实用的正则表达式技巧。无论你是编程新手还是希望巩固知识的开发者，这个教程都将为你提供清晰的指导和实践练习，帮助你提升在Web开发中处理文本数据的能力。","star":false,"comment":true,"head":[["meta",{"property":"og:url","content":"https://jjaw.cn/2024/5/22/js-string-operation/"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"JavaScript字符串操作 - 前端开发入门"}],["meta",{"property":"og:description","content":"深入了解JavaScript字符串的强大功能，从基本的创建和操作到复杂的查找、替换、编码和解码。本教程将带你一步步探索字符串处理的各个方面，包括实用的正则表达式技巧。无论你是编程新手还是希望巩固知识的开发者，这个教程都将为你提供清晰的指导和实践练习，帮助你提升在Web开发中处理文本数据的能力。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T08:47:36.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T08:47:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript字符串操作 - 前端开发入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-07T08:47:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"字符串的创建和基本操作","slug":"字符串的创建和基本操作","link":"#字符串的创建和基本操作","children":[{"level":3,"title":"创建字符串变量","slug":"创建字符串变量","link":"#创建字符串变量","children":[]},{"level":3,"title":"连接字符串","slug":"连接字符串","link":"#连接字符串","children":[]},{"level":3,"title":"获取字符串长度","slug":"获取字符串长度","link":"#获取字符串长度","children":[]}]},{"level":2,"title":"字符串的查找和替换","slug":"字符串的查找和替换","link":"#字符串的查找和替换","children":[{"level":3,"title":"查找子字符串","slug":"查找子字符串","link":"#查找子字符串","children":[]},{"level":3,"title":"替换内容","slug":"替换内容","link":"#替换内容","children":[]}]},{"level":2,"title":"字符串的切割和组合","slug":"字符串的切割和组合","link":"#字符串的切割和组合","children":[{"level":3,"title":"分割字符串","slug":"分割字符串","link":"#分割字符串","children":[]},{"level":3,"title":"合并数组为字符串","slug":"合并数组为字符串","link":"#合并数组为字符串","children":[]}]},{"level":2,"title":"字符串的转换和处理","slug":"字符串的转换和处理","link":"#字符串的转换和处理","children":[{"level":3,"title":"大小写转换","slug":"大小写转换","link":"#大小写转换","children":[]},{"level":3,"title":"字符串解析","slug":"字符串解析","link":"#字符串解析","children":[]},{"level":3,"title":"去除空白","slug":"去除空白","link":"#去除空白","children":[]}]},{"level":2,"title":"字符串编码和解码","slug":"字符串编码和解码","link":"#字符串编码和解码","children":[{"level":3,"title":"encodeURI和encodeURIComponent","slug":"encodeuri和encodeuricomponent","link":"#encodeuri和encodeuricomponent","children":[]},{"level":3,"title":"decodeURI和decodeURIComponent","slug":"decodeuri和decodeuricomponent","link":"#decodeuri和decodeuricomponent","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"isRoot":true,"createdTime":1716431549000,"updatedTime":1723020456000,"contributors":[{"name":"jjaw","email":"jjaw@jjaw.cn","commits":4},{"name":"Iron","email":"131033097+panpanaw@users.noreply.github.com","commits":1},{"name":"简简aw","email":"jjaw@jjaw.cn","commits":1}]},"excerpt":"\\n<p>字符串操作对于web开发是至关重要的，在Web开发中，字符串是存储和处理文本数据的基本单位。无论是用户输入、文件读取还是网络请求，大部分数据都以字符串形式出现。只有掌握字符串操作才能效地处理这些数据。</p>\\n<p>用户与网站的交互很大程度上涉及到字符串数据的使用，例如填写表单、搜索查询和显示消息。也需要掌握字符串操作。</p>\\n<h2>字符串的创建和基本操作</h2>\\n<p>在JavaScript中，字符串是存储文本数据的一种基本数据类型，它们是不可变的，意味着字符串一旦创建，其内容就不能被改变。</p>\\n<p>字符串的基本操作包含创建字符串变量，连接字符串，获取字符串长度。</p>","github_edit":{"fileGitUrl":"https://github.com/jianjianai/jjaw.cn/edit/master/articles/9-web教程系列/JavaScript字符串操作.md"},"navPage":[{"title":"js系列","link":"#","items":[{"title":"JavaScript正则表达式","link":"/2024/5/26/js-regular-expression/"},{"title":"JavaScript数组方法","link":"/2024/5/26/js-array-method/"},{"title":"JavaScript字符串操作","link":"/2024/5/22/js-string-operation/"},{"title":"JavaScript Set 和 Map","link":"/2024/5/29/js-set-map/"}]}]}');export{r as comp,k as data};
