import{_ as n,o as s,c as a,a as t}from"./app-BYbmP0cm.js";const p={},e=t(`<h1 id="发射器" tabindex="-1"><a class="header-anchor" href="#发射器"><span>发射器</span></a></h1><p>TypeScript 编译器提供了两个发射器：</p><ul><li><code>emitter.ts</code>：可能是你最感兴趣的发射器，它是 TS -&gt; JavaScript 的发射器</li><li><code>declarationEmitter.ts</code>：这个发射器用于为 <em>TypeScript 源文件（<code>.ts</code>）</em> 创建<em>声明文件（<code>.d.ts</code>）</em></li></ul><p>本节我们介绍 <code>emitter.ts</code></p><h3 id="promgram-对发射器的使用" tabindex="-1"><a class="header-anchor" href="#promgram-对发射器的使用"><span>Promgram 对发射器的使用</span></a></h3><p>Program 提供了一个 <code>emit</code> 函数。该函数主要将功能委托给 <code>emitter.ts</code>中的 <code>emitFiles</code> 函数。下面是调用栈：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Program.emit -&gt;</span>
<span class="line">    \`emitWorker\` （在 program.ts 中的 createProgram） -&gt;</span>
<span class="line">        \`emitFiles\` （emitter.ts 中的函数）</span>
<span class="line"></span></code></pre></div><p><code>emitWorker</code>（通过 <code>emitFiles</code> 参数）给发射器提供一个 <code>EmitResolver</code>。 <code>EmitResolver</code> 由程序的 TypeChecker 提供，基本上它是一个来自 <code>createChecker</code> 的本地函数的子集。</p><h2 id="发射器函数" tabindex="-1"><a class="header-anchor" href="#发射器函数"><span>发射器函数</span></a></h2><h3 id="emitfiles" tabindex="-1"><a class="header-anchor" href="#emitfiles"><span><code>emitFiles</code></span></a></h3><p>定义在 <code>emitter.ts</code> 中，下面是该函数的签名：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// targetSourceFile 当用户想发射项目中的某个文件时指定，保存时编译（compileOnSave）功能使用此参数</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">emitFiles</span><span class="token punctuation">(</span>resolver<span class="token operator">:</span> EmitResolver<span class="token punctuation">,</span> host<span class="token operator">:</span> EmitHost<span class="token punctuation">,</span> targetSourceFile<span class="token operator">?</span><span class="token operator">:</span> SourceFile<span class="token punctuation">)</span><span class="token operator">:</span> EmitResult <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre></div><p><code>EmitHost</code> 是 <code>CompilerHost</code> 的简化版（运行时，很多用例实际上都是 <code>CompilerHost</code>）</p><p><code>emitFiles</code> 中的最有趣的调用栈如下所示：</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">emitFiles -&gt;</span>
<span class="line">    emitFile(jsFilePath, targetSourceFile) -&gt;</span>
<span class="line">        emitJavaScript(jsFilePath, targetSourceFile);</span>
<span class="line"></span></code></pre></div><h3 id="emitjavascript" tabindex="-1"><a class="header-anchor" href="#emitjavascript"><span><code>emitJavaScript</code></span></a></h3><p>该函数有良好的注释，我们下面给出它：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">emitJavaScript</span><span class="token punctuation">(</span>jsFilePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> root<span class="token operator">?</span><span class="token operator">:</span> SourceFile<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> writer <span class="token operator">=</span> <span class="token function">createTextWriter</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> write <span class="token operator">=</span> writer<span class="token punctuation">.</span>write<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> writeTextOfNode <span class="token operator">=</span> writer<span class="token punctuation">.</span>writeTextOfNode<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> writeLine <span class="token operator">=</span> writer<span class="token punctuation">.</span>writeLine<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> increaseIndent <span class="token operator">=</span> writer<span class="token punctuation">.</span>increaseIndent<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> decreaseIndent <span class="token operator">=</span> writer<span class="token punctuation">.</span>decreaseIndent<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> currentSourceFile<span class="token operator">:</span> SourceFile<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 导出器函数的名称，如果文件是个系统外部模块的话</span></span>
<span class="line">  <span class="token comment">// System.register([...], function (&lt;exporter&gt;) {...})</span></span>
<span class="line">  <span class="token comment">// System 模块中的导出像这样：</span></span>
<span class="line">  <span class="token comment">// export var x; ... x = 1</span></span>
<span class="line">  <span class="token comment">// =&gt;</span></span>
<span class="line">  <span class="token comment">// var x;... exporter(&quot;x&quot;, x = 1)</span></span>
<span class="line">  <span class="token keyword">let</span> exportFunctionForFile<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> generatedNameSet<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> nodeToGeneratedName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> computedPropertyNamesToGeneratedNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> extendsEmitted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> decorateEmitted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> paramEmitted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> awaiterEmitted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> tempFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> tempVariables<span class="token operator">:</span> Identifier<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> tempParameters<span class="token operator">:</span> Identifier<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> externalImports<span class="token operator">:</span> <span class="token punctuation">(</span>ImportDeclaration <span class="token operator">|</span> ImportEqualsDeclaration <span class="token operator">|</span> ExportDeclaration<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> exportSpecifiers<span class="token operator">:</span> Map<span class="token operator">&lt;</span>ExportSpecifier<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> exportEquals<span class="token operator">:</span> ExportAssignment<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> hasExportStars<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/** 将发射输出写入磁盘 */</span></span>
<span class="line">  <span class="token keyword">let</span> writeEmittedFiles <span class="token operator">=</span> writeJavaScriptFile<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> detachedCommentsInfo<span class="token operator">:</span> <span class="token punctuation">{</span> nodePos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> detachedCommentEndPos<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> writeComment <span class="token operator">=</span> writeCommentRange<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/** 发射一个节点 */</span></span>
<span class="line">  <span class="token keyword">let</span> emit <span class="token operator">=</span> emitNodeWithoutSourceMap<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/** 在发射节点前调用 */</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token function-variable function">emitStart</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/** 发射结点完成后调用 */</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token function-variable function">emitEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/** 从 startPos 位置开始，为指定的 token 发射文本。默认写入的文本由 tokenKind 提供，</span>
<span class="line">   * 但是如果提供了可选的 emitFn 回调，将使用该回调来代替默认方式发射文本。</span>
<span class="line">   * @param tokenKind 要搜索并发射的 token 的类别</span>
<span class="line">   * @param startPos 源码中搜索 token 的起始位置</span>
<span class="line">   * @param emitFn 如果给出，会被调用来进行文本的发射。</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">let</span> emitToken <span class="token operator">=</span> emitTokenText<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/** 该函数由于节点的缘故，在被发射的代码中的函数或类中，会在启用词法作用域前被调用</span>
<span class="line">   * @param scopeDeclaration 启动词法作用域的节点</span>
<span class="line">   * @param scopeName 可选的作用域的名称，默认从节点声明中推导</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token function-variable function">scopeEmitStart</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>scopeDeclaration<span class="token operator">:</span> Node<span class="token punctuation">,</span> scopeName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/** 出了作用域后调用 */</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token function-variable function">scopeEmitEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/** 会被编码的 Sourcemap 数据 */</span></span>
<span class="line">  <span class="token keyword">let</span> sourceMapData<span class="token operator">:</span> SourceMapData<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>compilerOptions<span class="token punctuation">.</span>sourceMap <span class="token operator">||</span> compilerOptions<span class="token punctuation">.</span>inlineSourceMap<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">initializeEmitterWithSourceMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 不要直接调用 emit，那样不会设置 currentSourceFile</span></span>
<span class="line">    <span class="token function">emitSourceFile</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">forEach</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getSourceFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sourceFile <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isExternalModuleOrDeclarationFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">emitSourceFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">writeLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">writeEmittedFiles</span><span class="token punctuation">(</span>writer<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*writeByteOrderMark*/</span> compilerOptions<span class="token punctuation">.</span>emitBOM<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// 一批本地函数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>它主要设置了一批本地变量和函数（这些函数构成 <code>emitter.ts</code> 的<em>大部分</em>内容），接着交给本地函数 <code>emitSourceFile</code> 发射文本。<code>emitSourceFile</code> 函数设置 <code>currentSourceFile</code> 然后交给本地函数 <code>emit</code> 去处理。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">emitSourceFile</span><span class="token punctuation">(</span>sourceFile<span class="token operator">:</span> SourceFile<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">  currentSourceFile <span class="token operator">=</span> sourceFile<span class="token punctuation">;</span></span>
<span class="line">  exportFunctionForFile <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">emit</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><code>emit</code> 函数处理 <em>注释</em> 和 <em>实际 JavaScript</em> 的发射。<em>实际 JavaScript</em> 的发射是 emitJavaScriptWorker 函数的工作。</p><h3 id="emitjavascriptworker" tabindex="-1"><a class="header-anchor" href="#emitjavascriptworker"><span><code>emitJavaScriptWorker</code></span></a></h3><p>完整的函数：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">emitJavaScriptWorker</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 检查节点是否可以忽略 ScriptTarget 发射</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>Identifier<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitIdentifier</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Identifier<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>Parameter<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitParameter</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ParameterDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>MethodDeclaration<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>MethodSignature<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitMethod</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MethodDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>GetAccessor<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>SetAccessor<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitAccessor</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>AccessorDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ThisKeyword<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitThis</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>SuperKeyword<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitSuper</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>NullKeyword<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TrueKeyword<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>FalseKeyword<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>NumericLiteral<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>StringLiteral<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>RegularExpressionLiteral<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>NoSubstitutionTemplateLiteral<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TemplateHead<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TemplateMiddle<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TemplateTail<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitLiteral</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>LiteralExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TemplateExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitTemplateExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>TemplateExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TemplateSpan<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitTemplateSpan</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>TemplateSpan<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>JsxElement<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>JsxSelfClosingElement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitJsxElement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>JsxElement <span class="token operator">|</span> JsxSelfClosingElement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>JsxText<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitJsxText</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>JsxText<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>JsxExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitJsxExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>JsxExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>QualifiedName<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitQualifiedName</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>QualifiedName<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ObjectBindingPattern<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitObjectBindingPattern</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>BindingPattern<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ArrayBindingPattern<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitArrayBindingPattern</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>BindingPattern<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>BindingElement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitBindingElement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>BindingElement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ArrayLiteralExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitArrayLiteral</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ArrayLiteralExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ObjectLiteralExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitObjectLiteral</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ObjectLiteralExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>PropertyAssignment<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitPropertyAssignment</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>PropertyDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ShorthandPropertyAssignment<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitShorthandPropertyAssignment</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ShorthandPropertyAssignment<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ComputedPropertyName<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitComputedPropertyName</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ComputedPropertyName<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>PropertyAccessExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitPropertyAccess</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>PropertyAccessExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ElementAccessExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitIndexedAccess</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ElementAccessExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>CallExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitCallExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>CallExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>NewExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitNewExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>NewExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TaggedTemplateExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitTaggedTemplateExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>TaggedTemplateExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TypeAssertionExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>TypeAssertion<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>AsExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>AsExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ParenthesizedExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitParenExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ParenthesizedExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>FunctionDeclaration<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>FunctionExpression<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ArrowFunction<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitFunctionDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>FunctionLikeDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>DeleteExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitDeleteExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DeleteExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TypeOfExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitTypeOfExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>TypeOfExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>VoidExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitVoidExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>VoidExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>AwaitExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitAwaitExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>AwaitExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>PrefixUnaryExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitPrefixUnaryExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>PrefixUnaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>PostfixUnaryExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitPostfixUnaryExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>PostfixUnaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>BinaryExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitBinaryExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>BinaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ConditionalExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitConditionalExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ConditionalExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>SpreadElementExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitSpreadElementExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>SpreadElementExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>YieldExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitYieldExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>YieldExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>OmittedExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>Block<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ModuleBlock<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitBlock</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Block<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>VariableStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitVariableStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>VariableStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>EmptyStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ExpressionStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitExpressionStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ExpressionStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>IfStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitIfStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>IfStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>DoStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitDoStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DoStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>WhileStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitWhileStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WhileStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ForStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitForStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ForStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ForOfStatement<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ForInStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitForInOrForOfStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ForInStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ContinueStatement<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>BreakStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitBreakOrContinueStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>BreakOrContinueStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ReturnStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitReturnStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ReturnStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>WithStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitWithStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WithStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>SwitchStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitSwitchStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>SwitchStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>CaseClause<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>DefaultClause<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitCaseOrDefaultClause</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>CaseOrDefaultClause<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>LabeledStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitLabelledStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>LabeledStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ThrowStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitThrowStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ThrowStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>TryStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitTryStatement</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>TryStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>CatchClause<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitCatchClause</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>CatchClause<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>DebuggerStatement<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitDebuggerStatement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>VariableDeclaration<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitVariableDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>VariableDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ClassExpression<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitClassExpression</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ClassExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ClassDeclaration<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitClassDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ClassDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>InterfaceDeclaration<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitInterfaceDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>InterfaceDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>EnumDeclaration<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitEnumDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>EnumDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>EnumMember<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitEnumMember</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>EnumMember<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ModuleDeclaration<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitModuleDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ModuleDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ImportDeclaration<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitImportDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ImportDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ImportEqualsDeclaration<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitImportEqualsDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ImportEqualsDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ExportDeclaration<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitExportDeclaration</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ExportDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>ExportAssignment<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitExportAssignment</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ExportAssignment<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>SourceFile<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">emitSourceFileNode</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>SourceFile<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>通过简单地调用相应的 <code>emitXXX</code> 函数来完成递归，例如 <code>emitFunctionDeclaration</code></p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">emitFunctionDeclaration</span><span class="token punctuation">(</span>node<span class="token operator">:</span> FunctionLikeDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">nodeIsMissing</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">emitOnlyPinnedOrTripleSlashComments</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>kind <span class="token operator">!==</span> SyntaxKind<span class="token punctuation">.</span>MethodDeclaration <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>kind <span class="token operator">!==</span> SyntaxKind<span class="token punctuation">.</span>MethodSignature<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 会把注释当做方法声明的一部分去发射。</span></span>
<span class="line">    <span class="token function">emitLeadingComments</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 目标为 es6 之前时，使用 function 关键字来发射类函数（functions-like）声明，包括箭头函数</span></span>
<span class="line">  <span class="token comment">// 目标为 es6 时，可以发射原生的 ES6 箭头函数，并使用宽箭头代替 function 关键字.</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldEmitAsArrowFunction</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isES6ExportedDeclaration</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;export &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> NodeFlags<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;default &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>languageVersion <span class="token operator">&gt;=</span> ScriptTarget<span class="token punctuation">.</span><span class="token constant">ES6</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>asteriskToken<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldEmitFunctionName</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">emitDeclarationName</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">emitSignatureAndBody</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">    languageVersion <span class="token operator">&lt;</span> ScriptTarget<span class="token punctuation">.</span><span class="token constant">ES6</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    node<span class="token punctuation">.</span>kind <span class="token operator">===</span> SyntaxKind<span class="token punctuation">.</span>FunctionDeclaration <span class="token operator">&amp;&amp;</span></span>
<span class="line">    node<span class="token punctuation">.</span>parent <span class="token operator">===</span> currentSourceFile <span class="token operator">&amp;&amp;</span></span>
<span class="line">    node<span class="token punctuation">.</span>name</span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">emitExportMemberAssignments</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>FunctionDeclaration<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>kind <span class="token operator">!==</span> SyntaxKind<span class="token punctuation">.</span>MethodDeclaration <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>kind <span class="token operator">!==</span> SyntaxKind<span class="token punctuation">.</span>MethodSignature<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">emitTrailingComments</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="发射器源映射-sourcemaps" tabindex="-1"><a class="header-anchor" href="#发射器源映射-sourcemaps"><span>发射器源映射（SourceMaps）</span></a></h2><p>如前所述 <code>emitter.ts</code> 中的大部分代码是函数 <code>emitJavaScript</code>（我们之前展示过该函数的初始化例程）。 它主要是设置一批本地变量并交给 <code>emitSourceFile</code> 处理。下面我们再看一遍这个函数，这次我们重点关注 <code>SourceMap</code> 的部分：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">emitJavaScript</span><span class="token punctuation">(</span>jsFilePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> root<span class="token operator">?</span><span class="token operator">:</span> SourceFile<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 无关代码 ........... 已移除</span></span>
<span class="line">    <span class="token keyword">let</span> writeComment <span class="token operator">=</span> writeCommentRange<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/** 将发射的输出写到磁盘上 */</span></span>
<span class="line">    <span class="token keyword">let</span> writeEmittedFiles <span class="token operator">=</span> writeJavaScriptFile<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/** 发射一个节点 */</span></span>
<span class="line">    <span class="token keyword">let</span> emit <span class="token operator">=</span> emitNodeWithoutSourceMap<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/** 节点发射前调用 */</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token function-variable function">emitStart</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/** 节点发射完成后调用 */</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token function-variable function">emitEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/** 从 startPos 位置开始，为指定的 token 发射文本。默认写入的文本由 tokenKind 提供，</span>
<span class="line">      * 但是如果提供了可选的 emitFn 回调，将使用该回调来代替默认方式发射文本。</span>
<span class="line">      * @param tokenKind 要搜索并发射的 token 的类别</span>
<span class="line">      * @param startPos 源码中搜索 token 的起始位置</span>
<span class="line">      * @param emitFn 如果给出，会被调用来进行文本的发射。*/</span></span>
<span class="line">    <span class="token keyword">let</span> emitToken <span class="token operator">=</span> emitTokenText<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/** 该函数因为节点，会在发射的代码中于函数或类中启用词法作用域前调用</span>
<span class="line">      * @param scopeDeclaration 启动词法作用域的节点</span>
<span class="line">      * @param scopeName 可选的作用域的名称，而不是从节点声明中推导</span>
<span class="line">      */</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token function-variable function">scopeEmitStart</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>scopeDeclaration<span class="token operator">:</span> Node<span class="token punctuation">,</span> scopeName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/** 出了作用域后调用 */</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token function-variable function">scopeEmitEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/** 会被编码的 Sourcemap 数据 */</span></span>
<span class="line">    <span class="token keyword">let</span> sourceMapData<span class="token operator">:</span> SourceMapData<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>compilerOptions<span class="token punctuation">.</span>sourceMap <span class="token operator">||</span> compilerOptions<span class="token punctuation">.</span>inlineSourceMap<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">initializeEmitterWithSourceMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 不要直接调用 emit，那样不会设置 currentSourceFile</span></span>
<span class="line">        <span class="token function">emitSourceFile</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">forEach</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getSourceFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sourceFile <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isExternalModuleOrDeclarationFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">emitSourceFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">writeLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">writeEmittedFiles</span><span class="token punctuation">(</span>writer<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*writeByteOrderMark*/</span> compilerOptions<span class="token punctuation">.</span>emitBOM<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>重要的函数调用： <code>initializeEmitterWithSourceMaps</code>，该函数是 <code>emitJavaScript</code> 的本地函数，它覆盖了部分已定义的本地函数。 覆盖的函数可以在 <code>initalizeEmitterWithSourceMap</code> 的底部找到：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// \`initializeEmitterWithSourceMaps\` 函数的最后部分</span></span>
<span class="line"></span>
<span class="line">writeEmittedFiles <span class="token operator">=</span> writeJavaScriptAndSourceMapFile<span class="token punctuation">;</span></span>
<span class="line">emit <span class="token operator">=</span> emitNodeWithSourceMap<span class="token punctuation">;</span></span>
<span class="line">emitStart <span class="token operator">=</span> recordEmitNodeStartSpan<span class="token punctuation">;</span></span>
<span class="line">emitEnd <span class="token operator">=</span> recordEmitNodeEndSpan<span class="token punctuation">;</span></span>
<span class="line">emitToken <span class="token operator">=</span> writeTextWithSpanRecord<span class="token punctuation">;</span></span>
<span class="line">scopeEmitStart <span class="token operator">=</span> recordScopeNameOfNode<span class="token punctuation">;</span></span>
<span class="line">scopeEmitEnd <span class="token operator">=</span> recordScopeNameEnd<span class="token punctuation">;</span></span>
<span class="line">writeComment <span class="token operator">=</span> writeCommentRangeWithMap<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>就是说大部分的发射器代码不关心 <code>SourceMap</code>，它们以相同的方式使用这些（带或不带 SourceMap 的）本地函数。</p>`,32),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","emitter.html.vue"]]),u=JSON.parse('{"path":"/git/ts-book/docs/compiler/emitter.html","title":"发射器","lang":"zh-CN","frontmatter":{"description":"发射器 TypeScript 编译器提供了两个发射器： emitter.ts：可能是你最感兴趣的发射器，它是 TS -> JavaScript 的发射器 declarationEmitter.ts：这个发射器用于为 TypeScript 源文件（.ts） 创建声明文件（.d.ts） 本节我们介绍 emitter.ts Promgram 对发射器的使用 ...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/compiler/emitter.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"发射器"}],["meta",{"property":"og:description","content":"发射器 TypeScript 编译器提供了两个发射器： emitter.ts：可能是你最感兴趣的发射器，它是 TS -> JavaScript 的发射器 declarationEmitter.ts：这个发射器用于为 TypeScript 源文件（.ts） 创建声明文件（.d.ts） 本节我们介绍 emitter.ts Promgram 对发射器的使用 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2019-10-05T05:37:32.000Z"}],["meta",{"property":"article:modified_time","content":"2019-10-05T05:37:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发射器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2019-10-05T05:37:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Promgram 对发射器的使用","slug":"promgram-对发射器的使用","link":"#promgram-对发射器的使用","children":[]},{"level":2,"title":"发射器函数","slug":"发射器函数","link":"#发射器函数","children":[{"level":3,"title":"emitFiles","slug":"emitfiles","link":"#emitfiles","children":[]},{"level":3,"title":"emitJavaScript","slug":"emitjavascript","link":"#emitjavascript","children":[]},{"level":3,"title":"emitJavaScriptWorker","slug":"emitjavascriptworker","link":"#emitjavascriptworker","children":[]}]},{"level":2,"title":"发射器源映射（SourceMaps）","slug":"发射器源映射-sourcemaps","link":"#发射器源映射-sourcemaps","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1537098059000,"updatedTime":1570253852000,"contributors":[{"name":"hopalay","email":"hopalay@qq.com","commits":3},{"name":"jkchao","email":"jkchaom@gmail.com","commits":2}]},"excerpt":"\\n<p>TypeScript 编译器提供了两个发射器：</p>\\n<ul>\\n<li><code>emitter.ts</code>：可能是你最感兴趣的发射器，它是 TS -&gt; JavaScript 的发射器</li>\\n<li><code>declarationEmitter.ts</code>：这个发射器用于为 <em>TypeScript 源文件（<code>.ts</code>）</em> 创建<em>声明文件（<code>.d.ts</code>）</em></li>\\n</ul>\\n<p>本节我们介绍 <code>emitter.ts</code></p>\\n<h3>Promgram 对发射器的使用</h3>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/compiler/emitter.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{k as comp,u as data};
