import{_ as l,r as e,o as i,c,b as n,e as s,d as t,w as r,a}from"./app-9h4tjtpM.js";const k={},d=n("h1",{id:"名义化类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#名义化类型"},[n("span",null,"名义化类型")])],-1),m={href:"https://basarat.gitbooks.io/typescript/content/docs/why-typescript.html",target:"_blank",rel:"noopener noreferrer"},u=a(`<p>这有一些社区使用的方式，我按照个人喜好降序排列：</p><h2 id="使用字面量类型" tabindex="-1"><a class="header-anchor" href="#使用字面量类型"><span>使用字面量类型</span></a></h2><p>这种模式使用泛型和字面量类型：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// 泛型 Id 类型</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Id<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 特殊的 Id 类型</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">FooId</span> <span class="token operator">=</span> Id<span class="token operator">&lt;</span><span class="token string">&#39;foo&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">BarId</span> <span class="token operator">=</span> Id<span class="token operator">&lt;</span><span class="token string">&#39;bar&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 可选：构造函数</span></span>
<span class="line"><span class="token keyword">const</span> createFoo <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> FooId <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> createBar <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> BarId <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token function">createFoo</span><span class="token punctuation">(</span><span class="token string">&#39;sample&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token function">createBar</span><span class="token punctuation">(</span><span class="token string">&#39;sample&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">foo <span class="token operator">=</span> bar<span class="token punctuation">;</span> <span class="token comment">// Error</span></span>
<span class="line">foo <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// Okey</span></span>
<span class="line"></span></code></pre></div><ul><li>优点 <ul><li>不需要类型断言。</li></ul></li><li>缺点 <ul><li>如上结构 <code>{type,value}</code> 可能不那么尽如人意，而且需要服务器序列化支持。</li></ul></li></ul><h2 id="使用枚举" tabindex="-1"><a class="header-anchor" href="#使用枚举"><span>使用枚举</span></a></h2>`,6),g=a(`<p>解决办法包括：</p><ul><li>创建一个只有名字的枚举；</li><li>利用这个枚举与实际结构体创建一个交叉类型（<code>&amp;</code>）。</li></ul><p>如下所示，当实际结构体仅仅是一个字符串时：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// FOO</span></span>
<span class="line"><span class="token keyword">enum</span> FooIdBrand <span class="token punctuation">{</span></span>
<span class="line">  _ <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">FooId</span> <span class="token operator">=</span> FooIdBrand <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// BAR</span></span>
<span class="line"><span class="token keyword">enum</span> BarIdBrand <span class="token punctuation">{</span></span>
<span class="line">  _ <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">BarId</span> <span class="token operator">=</span> BarIdBrand <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// user</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> fooId<span class="token operator">:</span> FooId<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> barId<span class="token operator">:</span> BarId<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 类型安全</span></span>
<span class="line">fooId <span class="token operator">=</span> barId<span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line">barId <span class="token operator">=</span> fooId<span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建一个新的</span></span>
<span class="line">fooId <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span> <span class="token keyword">as</span> FooId<span class="token punctuation">;</span></span>
<span class="line">barId <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span> <span class="token keyword">as</span> BarId<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 两种类型都与基础兼容</span></span>
<span class="line"><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">str <span class="token operator">=</span> fooId<span class="token punctuation">;</span></span>
<span class="line">str <span class="token operator">=</span> barId<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>请注意上文中的 <code>FooIdBrand</code> 与 <code>BarIdBrand</code>，它们都有一个 <code>_</code> 映射到空字符串的成员，即 <code>{ _ = &#39;&#39; }</code>。这可以强制 TypeScript 推断出这是一个基于字符串的枚举，而不是一个数字类型的枚举。这是很重要的，因为 TypeScript 会把一个空的枚举类型（<code>{}</code>）推断为一个数字类型的枚举，在 TypeScript 3.6.2 版本及其以上时，数字类型的枚举与 <code>string</code> 的交叉类型是 <code>never</code>。</p><h2 id="使用接口" tabindex="-1"><a class="header-anchor" href="#使用接口"><span>使用接口</span></a></h2>`,6),h=n("code",null,"number",-1),b=n("code",null,"enum",-1),y=n("code",null,"_",-1),f=n("code",null,"Brand",-1),I={href:"https://github.com/Microsoft/TypeScript/blob/7b48a182c05ea4dea81bab73ecbbe9e013a79e99/src/compiler/types.ts#L693-L698",target:"_blank",rel:"noopener noreferrer"},_=a(`<p>解决办法包括：</p><ul><li>在类型上添加一个不用的属性，用来打破类型兼容性；</li><li>在新建或向下转换类型的时候使用断言。</li></ul><p>如下所示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// FOO</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">FooId</span> <span class="token keyword">extends</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">  _fooIdBrand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 防止类型错误</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// BAR</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">BarId</span> <span class="token keyword">extends</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">  _barIdBrand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 防止类型错误</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用</span></span>
<span class="line"><span class="token keyword">let</span> fooId<span class="token operator">:</span> FooId<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> barId<span class="token operator">:</span> BarId<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 类型安全</span></span>
<span class="line">fooId <span class="token operator">=</span> barId<span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line">barId <span class="token operator">=</span> fooId<span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line">fooId <span class="token operator">=</span> <span class="token operator">&lt;</span>FooId<span class="token operator">&gt;</span>barId<span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line">barId <span class="token operator">=</span> <span class="token operator">&lt;</span>BarId<span class="token operator">&gt;</span>fooId<span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建新的</span></span>
<span class="line">fooId <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line">barId <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 如果你需要以字符串作为基础</span></span>
<span class="line"><span class="token keyword">var</span> str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">str <span class="token operator">=</span> fooId <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line">str <span class="token operator">=</span> barId <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div>`,4);function T(v,w){const o=e("ExternalLinkIcon"),p=e("RouteLink");return i(),c("div",null,[d,n("p",null,[s("TypeScript 的类型系统是结构化的，"),n("a",m,[s("这也是其主要的优点之一"),t(o)]),s("。然而，在实际的特定用例中，有时尽管变量具有相同的结构，你也想将他们视为不同类型。一个非常常见的用例是身份类型结构（它们可能只是在 C# 或者 Java 中表示一个它们语义化名字的字符串）。")]),u,n("p",null,[s("TypeScript 中"),t(p,{to:"/git/ts-book/docs/typings/enums.html"},{default:r(()=>[s("枚举")]),_:1}),s(" 提供一定程度的名义化类型。如果两个枚举的命名不相同，则它们类型不相等。我们可以利用这个事实来为结构上兼容的类型，提供名义化类型。")]),g,n("p",null,[s("因为 "),h,s(" 类型与 "),b,s(" 类型在类型上是兼容的，因此我们不能使用上述提到的方法来处理它们。取而代之，我们可以使用接口打破这种类型的兼容性。TypeScript 编译团队仍然在使用这种方法，因此它值得一提。使用 "),y,s(" 前缀和 "),f,s(" 后缀是一种我强烈推荐的惯例方法（"),n("a",I,[s("TypeScript 也这么推荐"),t(o)]),s("）。")]),_])}const x=l(k,[["render",T],["__file","nominalTyping.html.vue"]]),B=JSON.parse('{"path":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型","lang":"zh-CN","frontmatter":{"description":"名义化类型 TypeScript 的类型系统是结构化的，这也是其主要的优点之一。然而，在实际的特定用例中，有时尽管变量具有相同的结构，你也想将他们视为不同类型。一个非常常见的用例是身份类型结构（它们可能只是在 C# 或者 Java 中表示一个它们语义化名字的字符串）。 这有一些社区使用的方式，我按照个人喜好降序排列： 使用字面量类型 这种模式使用泛型和...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/tips/nominalTyping.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"名义化类型"}],["meta",{"property":"og:description","content":"名义化类型 TypeScript 的类型系统是结构化的，这也是其主要的优点之一。然而，在实际的特定用例中，有时尽管变量具有相同的结构，你也想将他们视为不同类型。一个非常常见的用例是身份类型结构（它们可能只是在 C# 或者 Java 中表示一个它们语义化名字的字符串）。 这有一些社区使用的方式，我按照个人喜好降序排列： 使用字面量类型 这种模式使用泛型和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-12-27T09:13:45.000Z"}],["meta",{"property":"article:modified_time","content":"2020-12-27T09:13:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"名义化类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-12-27T09:13:45.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用字面量类型","slug":"使用字面量类型","link":"#使用字面量类型","children":[]},{"level":2,"title":"使用枚举","slug":"使用枚举","link":"#使用枚举","children":[]},{"level":2,"title":"使用接口","slug":"使用接口","link":"#使用接口","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1535538198000,"updatedTime":1609060425000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":4},{"name":"zhazheng","email":"512557403@qq.com","commits":2},{"name":"yuhengshen","email":"yuhengshen@qq.com","commits":1},{"name":"zongzi531","email":"zongzi.xy@gmail.com","commits":1}]},"excerpt":"\\n<p>TypeScript 的类型系统是结构化的，<a href=\\"https://basarat.gitbooks.io/typescript/content/docs/why-typescript.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这也是其主要的优点之一</a>。然而，在实际的特定用例中，有时尽管变量具有相同的结构，你也想将他们视为不同类型。一个非常常见的用例是身份类型结构（它们可能只是在 C# 或者 Java 中表示一个它们语义化名字的字符串）。</p>\\n<p>这有一些社区使用的方式，我按照个人喜好降序排列：</p>\\n<h2>使用字面量类型</h2>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/tips/nominalTyping.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{x as comp,B as data};
