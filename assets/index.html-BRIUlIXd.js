import{_ as l,r as c,o as i,c as u,b as n,e as s,d as a,w as p,a as o}from"./app-BDxFVNMI.js";const k={},r=o(`<h1 id="truffle初步入门" tabindex="-1"><a class="header-anchor" href="#truffle初步入门"><span>truffle初步入门</span></a></h1><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><h3 id="合约" tabindex="-1"><a class="header-anchor" href="#合约"><span>合约</span></a></h3><p>每个合约都是一个合约,例如<code>Test</code>合约就是一个合约。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="合约实例" tabindex="-1"><a class="header-anchor" href="#合约实例"><span>合约实例</span></a></h3><p>一个合约可以有很多合约实例，每个合约实例都有一个地址，一个合约每被部署一次就会产生一个新的合约实例，例如下面的例子中创建了两个合约实例<code>oneTest</code>和<code>towTest</code>变量中分别存储了两个<code>Test</code>合约的实例。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span></span>
<span class="line">        Test oneTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Test towTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="artifacts-require-name-引入合约" tabindex="-1"><a class="header-anchor" href="#artifacts-require-name-引入合约"><span><code>artifacts.require(name)</code> 引入合约</span></a></h2><p>在truffle中，任何地方都可以通过 <code>artifacts.require(name)</code> 引入合约。</p><p>例如<code>Test</code>变量就代表<code>Test</code>合约。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="migrations-迁移部署" tabindex="-1"><a class="header-anchor" href="#migrations-迁移部署"><span>migrations 迁移部署</span></a></h2><p>migrations中的脚本用于在测试开始之前部署合约，确保每一次测试都是干净的合约，有点像是初始化。</p><h3 id="module-exports-async-function-deployer-迁移函数" tabindex="-1"><a class="header-anchor" href="#module-exports-async-function-deployer-迁移函数"><span><code>module.exports = async function(deployer)</code> 迁移函数</span></a></h3><p>每个迁移脚本中都需要导出一个<code>async function(deployer)</code>异步函数，这个函数接收一个<code>deployer</code>对象。<code>deployer</code>中有一个<code>deploy(class)</code>函数，这个函数的功能就是部署合约。</p><p>下面是一个简单例子：</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">//获取合约</span></span>
<span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">deployer</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//部署合约</span></span>
<span class="line">    deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="带有构造参数的合约" tabindex="-1"><a class="header-anchor" href="#带有构造参数的合约"><span>带有构造参数的合约</span></a></h3><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">,</span><span class="token builtin">string</span> <span class="token keyword">memory</span> b<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">deployer</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>Test<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;qwe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="需要另一个合约作为构造参数" tabindex="-1"><a class="header-anchor" href="#需要另一个合约作为构造参数"><span>需要另一个合约作为构造参数</span></a></h3><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test1</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">constructor</span><span class="token punctuation">(</span>Test1 test<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> Test1 <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">deployer</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>Test1<span class="token punctuation">,</span>Test<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="test测试" tabindex="-1"><a class="header-anchor" href="#test测试"><span>test测试</span></a></h2><h3 id="contract-name-function-accounts-函数" tabindex="-1"><a class="header-anchor" href="#contract-name-function-accounts-函数"><span><code>contract(name,function(accounts))</code> 函数</span></a></h3><p>在测试脚本中，用<code>contract(name,function(accounts))</code>函数注册一个测试项，第一个参数是测试名称，第二个参数是一个回调函数。回调函数接受一个测试账户地址列表。</p><p>例如，这样就可以注册一个名词为<code>a test</code>的测试项。并输出全部的测试地址。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;a test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accounts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;0x8aEd75bb70e8f399e2eA2E30d01a671D6E8617bb&#39;,....]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="it-name-async-function-函数" tabindex="-1"><a class="header-anchor" href="#it-name-async-function-函数"><span><code>it(name,async function())</code> 函数</span></a></h3><p><code>it(name,async function())</code>函数用来注册，测试的子项，每个测试项可以包含多个子项。第一个参数是子项的名称，第二个项目可以是一个异步的回调函数，如果这个函数正常执行完成则代表测试成功。</p><p>例如这样就可以在<code>a test</code>中创建一个<code>hello function test</code>的子项。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello function test&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>直接执行控制台会这样输出。</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">  Contract: contract Test test</span>
<span class="line">    ✔ hello function test</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  1 passing (62ms)</span>
<span class="line"></span></code></pre></div><p>如果测试中有一个异常代表测试失败，下面这个例子会永远都是测试失败。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello function test&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;错误啊啊啊!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">  Contract: contract Test test</span>
<span class="line">    1) hello function test</span>
<span class="line">    &gt; No events were emitted</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  0 passing (92ms)</span>
<span class="line">  1 failing</span>
<span class="line"></span>
<span class="line">  1) Contract: contract Test test</span>
<span class="line">       hello function test:</span>
<span class="line">     Error: 错误啊啊啊!</span>
<span class="line">      at Context.&lt;anonymous&gt; (test/1_test1.js:8:15)</span>
<span class="line">      at processTicksAndRejections (node:internal/process/task_queues:96:5)</span>
<span class="line"></span></code></pre></div>`,39),d=n("code",null,"throw",-1),g=n("code",null,"assert",-1),y=n("code",null,"assert",-1),h=o(`<div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello function test&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span></span>
<span class="line">        assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>len <span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;长度必须为10。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="调用solidty合约" tabindex="-1"><a class="header-anchor" href="#调用solidty合约"><span>调用solidty合约</span></a></h3><h4 id="api-deployed" tabindex="-1"><a class="header-anchor" href="#api-deployed"><span>API <code>deployed()</code></span></a></h4><p>使用合约中的<code>deployed()</code>方法可以获得之前在<code>migrations</code>中部署的合约对象。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x....</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="实例函数" tabindex="-1"><a class="header-anchor" href="#实例函数"><span>实例函数</span></a></h4><p>实例对象中的函数与solidity合约中的函数是一一对应的关系。</p><p>下面例子调用了，Test合约中的hello函数。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="带参函数" tabindex="-1"><a class="header-anchor" href="#带参函数"><span>带参函数</span></a></h4><p>带参函数中的参数在js中也是一一对应的。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">,</span><span class="token builtin">uint</span> count<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&quot;jianjian&quot;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="pure或view函数-calls调用" tabindex="-1"><a class="header-anchor" href="#pure或view函数-calls调用"><span>pure或view函数(calls调用)</span></a></h4><p>pure或view函数都三calls调用，calls调调用会执行合约上的代码并立即返回，calls调用只会读取数据，不会更改合约上的数据。执行calls调用是免费的，不会消耗gas。</p><ul><li>免费(不花费gas)</li><li>不改变链上的状态</li><li>立即执行</li><li>有返回值</li></ul><h5 id="返回单个值" tabindex="-1"><a class="header-anchor" href="#返回单个值"><span>返回单个值</span></a></h5><p>如果是返回单个值，则直接返回函数的返回值。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;are you ok&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// are you ok</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h5 id="返回多个值" tabindex="-1"><a class="header-anchor" href="#返回多个值"><span>返回多个值</span></a></h5><p>如果是返回多个值，则返回一个<code>Result</code>对象，用法似数组。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">,</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// world</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h5 id="返回值型对应" tabindex="-1"><a class="header-anchor" href="#返回值型对应"><span>返回值型对应</span></a></h5><p>solidty中的部分对象在js中是不存在的，因此solidty返回值需要转换转换为js对象。</p><table><thead><tr><th>solidty</th><th>-&gt;</th><th>js</th><th></th></tr></thead><tbody><tr><td>address</td><td>-&gt;</td><td>string</td><td>十六进制表示</td></tr><tr><td>byte</td><td>-&gt;</td><td>string</td><td>十六进制表示</td></tr><tr><td>string</td><td>-&gt;</td><td>string</td><td></td></tr><tr><td>uint</td><td>-&gt;</td><td>BN (BigNum)</td><td>一个特殊的对象</td></tr><tr><td>int</td><td>-&gt;</td><td>BN (BigNum)</td><td>一个特殊的对象</td></tr><tr><td>string[]</td><td>-&gt;</td><td>string[]</td><td></td></tr><tr><td>uint[]</td><td>-&gt;</td><td>BN[]</td><td></td></tr><tr><td>int[]</td><td>-&gt;</td><td>BN[]</td><td></td></tr></tbody></table><h6 id="address-byte" tabindex="-1"><a class="header-anchor" href="#address-byte"><span>address,byte</span></a></h6><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">pure</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">,</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">yte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0x0000000000000000000000000000000000000000</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0x00</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h6 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>string</span></a></h6><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">pure</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hello</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h6 id="uint-int" tabindex="-1"><a class="header-anchor" href="#uint-int"><span>uint,int</span></a></h6><p>uint和int会返回一个特殊的<code>BN</code>对象,可以使用<code>.toNumber()</code>方法来转换成number对象，solidty中的uint表示访问远大于js中的nubner表示范围，可能会遇到错误或无法预期的行为。</p>`,36),f={href:"https://github.com/indutny/bn.js/",target:"_blank",rel:"noopener noreferrer"},w=o(`<div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">pure</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-5</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h6 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h6><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">pragma</span> experimental ABIEncoderV2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;qwe&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;asd&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ BN{...} , BN{...} ]</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;qwe&#39;, &#39;asd&#39; ]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="函数调用-transactions交易" tabindex="-1"><a class="header-anchor" href="#函数调用-transactions交易"><span>函数调用(Transactions交易)</span></a></h4><p>交易会改变合约的状态，因此需要花费gas，当我们通过交易执行合约的函数时，我们无法接收该函数的返回值，因为交易不会立即处理。通过交易执行的函数不会返回值，而是返回一个交易的ID。</p><ul><li>消耗Gas</li><li>会更改网络状态</li><li>不会立即执行（需要等待网络矿工打包）</li><li>没有执行返回值（只是一个交易ID）。</li></ul><h5 id="得到交易的回执" tabindex="-1"><a class="header-anchor" href="#得到交易的回执"><span>得到交易的回执</span></a></h5><p>调用交易不会有返回值,只能得到交易的回执。</p><p><em><strong>solidty函数中就算返回了值，也是拿不到的，只能得到交易回执。</strong></em></p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">string</span> world<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">setWorld</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _world<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        world <span class="token operator">=</span> _world<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">setWorld</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><code>console.log(returns);</code>输出：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">tx</span><span class="token operator">:</span> <span class="token string">&#39;0xXXX&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">receipt</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">transactionHash</span><span class="token operator">:</span> <span class="token string">&#39;0xXXX&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">transactionIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">blockNumber</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">blockHash</span><span class="token operator">:</span> <span class="token string">&#39;0xXXX&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;0xXXX&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">&#39;0xXXX&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">cumulativeGasUsed</span><span class="token operator">:</span> <span class="token number">21496</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">gasUsed</span><span class="token operator">:</span> <span class="token number">21496</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">contractAddress</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">logs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">logsBloom</span><span class="token operator">:</span> <span class="token string">&#39;0xXXX&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">effectiveGasPrice</span><span class="token operator">:</span> <span class="token number">3036981786</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;0x2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">rawLogs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">logs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h5 id="使用call调用来得到返回值" tabindex="-1"><a class="header-anchor" href="#使用call调用来得到返回值"><span>使用<code>call</code>调用来得到返回值</span></a></h5><p>在函数对象上使用<code>call</code>来调用可以和pure或view函数一样拿到函数的返回值。<code>call</code>调用不会改变合约的状态，也不会花费gas，因为这种调用不会作为交易发送给矿工打包。</p><ul><li>免费(不花费gas)</li><li>不改变链上的状态</li><li>立即执行</li><li>有返回值</li></ul><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">string</span> world<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">setWorld</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _world<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        world <span class="token operator">=</span> _world<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">setWorld</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hello</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="调用参数" tabindex="-1"><a class="header-anchor" href="#调用参数"><span>调用参数</span></a></h4><h5 id="指定调用账户" tabindex="-1"><a class="header-anchor" href="#指定调用账户"><span>指定调用账户</span></a></h5><p>在函数的最后一个参数的后面一个参数，传入一个对象，<code>from</code>项为账户地址。</p><p>参考下方表格以此推。</p><table><thead><tr><th>solidity</th><th>js</th></tr></thead><tbody><tr><td><code>function h()</code></td><td><code>xxx.h({from:accounts[0]})</code></td></tr><tr><td><code>function h(uint a)</code></td><td><code>xxx.h(1,{from:accounts[0]})</code></td></tr><tr><td><code>function h(uint a,uint b)</code></td><td><code>xxx.h(1,2,{from:accounts[0]})</code></td></tr></tbody></table><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token builtin">uint</span> count<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span>accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x...</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个打印一定和上一个相同</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h5 id="转账-payable函数" tabindex="-1"><a class="header-anchor" href="#转账-payable函数"><span>转账，payable函数</span></a></h5><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">uint</span> saves <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span><span class="token punctuation">{</span></span>
<span class="line">        saves <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">qury</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> saves<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">qury</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>使用from参数，可以指定用户转账</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">from</span><span class="token operator">:</span>accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="直接发起交易-触发fallback或receive函数。" tabindex="-1"><a class="header-anchor" href="#直接发起交易-触发fallback或receive函数。"><span>直接发起交易，触发Fallback或receive函数。</span></a></h4><h5 id="使用sendtransaction" tabindex="-1"><a class="header-anchor" href="#使用sendtransaction"><span>使用<code>sendTransaction()</code></span></a></h5><p>使用sendTransaction()函数可以直接向合约发起交易。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">qury</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">qury</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h5 id="使用send" tabindex="-1"><a class="header-anchor" href="#使用send"><span>使用<code>send()</code></span></a></h5><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">qury</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">qury</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="获得合约实例" tabindex="-1"><a class="header-anchor" href="#获得合约实例"><span>获得合约实例</span></a></h3><h4 id="new-部署新的合约实例" tabindex="-1"><a class="header-anchor" href="#new-部署新的合约实例"><span>new 部署新的合约实例</span></a></h4><p>使用合约上的<code>new()</code>函数可以创建一个新的合约实例。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">string</span> hi<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _hi<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">{</span></span>
<span class="line">        hi <span class="token operator">=</span> _hi<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> hi<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>在创建时指定账户和转账</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">address</span> hi<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span><span class="token punctuation">{</span></span>
<span class="line">        hi<span class="token operator">=</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> hi<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span>accounts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accounts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0xXXX</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一定和上一个相同</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="at-在已有地址上创建实例" tabindex="-1"><a class="header-anchor" href="#at-在已有地址上创建实例"><span>at 在已有地址上创建实例</span></a></h4><p>如果已有合约的地址，则可以在该地址上创建实例</p><p>下面例子中，test和test1表示同一个合约的实例。</p><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">string</span> hi<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _hi<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">{</span></span>
<span class="line">        hi <span class="token operator">=</span> _hi<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> hi<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">contract</span><span class="token punctuation">(</span><span class="token string">&quot;contract Test test&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">accounts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> returns <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token keyword">await</span> Test<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> returns1 <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returns1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="完结" tabindex="-1"><a class="header-anchor" href="#完结"><span>完结</span></a></h2><p>以上就是全部tuffle常用的内容了，还有更多深入的内容.</p>`,55),m={href:"https://learnblockchain.cn/docs/web3.js/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/indutny/bn.js/",target:"_blank",rel:"noopener noreferrer"},b=o(`<h2 id="常见问题解答" tabindex="-1"><a class="header-anchor" href="#常见问题解答"><span>常见问题解答</span></a></h2><h3 id="报错-hit-an-invalid-opcode-while-deploying" tabindex="-1"><a class="header-anchor" href="#报错-hit-an-invalid-opcode-while-deploying"><span>报错 <code>hit an invalid opcode while deploying</code></span></a></h3><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">&quot;Test&quot; hit an invalid opcode while deploying. Try:</span>
<span class="line">   * Verifying that your constructor params satisfy all assert conditions.</span>
<span class="line">   * Verifying your constructor code doesn&#39;t access an array out of bounds.</span>
<span class="line">   * Adding reason strings to your assert statements.</span>
<span class="line"></span></code></pre></div><div class="language-solidity" data-highlighter="prismjs" data-ext="solidity" data-title="solidity"><pre class="language-solidity"><code><span class="line"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.21</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">pure</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> Test <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">deployer</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">     deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>原因可能是<code>0.8.21</code>版本和truffle不兼容，更换编译器版本为<code>0.8.19</code>即可。</p>`,6);function q(j,x){const t=c("RouteLink"),e=c("ExternalLinkIcon");return i(),u("div",null,[r,n("p",null,[s("当然不建议你直接用"),d,s("来抛出异常，而是用"),g,s("来断言。更多关于"),y,s("的api可以参考："),a(t,{to:"/articles/12-truffle%E6%B5%8B%E8%AF%95/3-assertApi.html"},{default:p(()=>[s("assertApi")]),_:1})]),h,n("p",null,[s("更多关于BN对象的方法可以查看"),n("a",f,[s("bn.js"),a(e)]),s("文档。")]),w,n("ul",null,[n("li",null,[n("a",m,[s("web3.js - 以太坊 JavaScript API"),a(e)])]),n("li",null,[a(t,{to:"/articles/12-truffle%E6%B5%8B%E8%AF%95/3-assertApi.html"},{default:p(()=>[s("assert Api - nodejs 断言")]),_:1})]),n("li",null,[a(t,{to:"/articles/12-truffle%E6%B5%8B%E8%AF%95/0-truffleApi%E7%AE%80%E4%BB%8B.html"},{default:p(()=>[s("truffleApi简介")]),_:1})]),n("li",null,[n("a",v,[s("bn.js - BigNumber js的大数库"),a(e)])]),n("li",null,[a(t,{to:"/articles/12-truffle%E6%B5%8B%E8%AF%95/1-truffle%E7%94%A8JavaScript%E5%86%99%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.html"},{default:p(()=>[s("用JavaScript写测试用例")]),_:1})])]),b])}const _=l(k,[["render",q],["__file","index.html.vue"]]),B=JSON.parse('{"path":"/2024/12/11/truffle-beginner/","title":"truffle 详细快速入门","lang":"zh-CN","frontmatter":{"permalinkPattern":"2024/12/11/truffle-beginner/","title":"truffle 详细快速入门","description":"本文详细讲解了truffle测试的各种概念，帮你快速掌握并熟练使用truffle进行自能合约测试，相比于官方文档更容易理解。","tags":["后端"],"star":true,"comment":true,"head":[["meta",{"property":"og:url","content":"https://jjaw.cn/2024/12/11/truffle-beginner/"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"truffle 详细快速入门"}],["meta",{"property":"og:description","content":"本文详细讲解了truffle测试的各种概念，帮你快速掌握并熟练使用truffle进行自能合约测试，相比于官方文档更容易理解。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-11T07:27:23.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:modified_time","content":"2024-12-11T07:27:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"truffle 详细快速入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-11T07:27:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"基础概念","slug":"基础概念","link":"#基础概念","children":[{"level":3,"title":"合约","slug":"合约","link":"#合约","children":[]},{"level":3,"title":"合约实例","slug":"合约实例","link":"#合约实例","children":[]}]},{"level":2,"title":"artifacts.require(name) 引入合约","slug":"artifacts-require-name-引入合约","link":"#artifacts-require-name-引入合约","children":[]},{"level":2,"title":"migrations 迁移部署","slug":"migrations-迁移部署","link":"#migrations-迁移部署","children":[{"level":3,"title":"module.exports = async function(deployer) 迁移函数","slug":"module-exports-async-function-deployer-迁移函数","link":"#module-exports-async-function-deployer-迁移函数","children":[]},{"level":3,"title":"带有构造参数的合约","slug":"带有构造参数的合约","link":"#带有构造参数的合约","children":[]},{"level":3,"title":"需要另一个合约作为构造参数","slug":"需要另一个合约作为构造参数","link":"#需要另一个合约作为构造参数","children":[]}]},{"level":2,"title":"test测试","slug":"test测试","link":"#test测试","children":[{"level":3,"title":"contract(name,function(accounts)) 函数","slug":"contract-name-function-accounts-函数","link":"#contract-name-function-accounts-函数","children":[]},{"level":3,"title":"it(name,async function()) 函数","slug":"it-name-async-function-函数","link":"#it-name-async-function-函数","children":[]},{"level":3,"title":"调用solidty合约","slug":"调用solidty合约","link":"#调用solidty合约","children":[]},{"level":3,"title":"获得合约实例","slug":"获得合约实例","link":"#获得合约实例","children":[]}]},{"level":2,"title":"完结","slug":"完结","link":"#完结","children":[]},{"level":2,"title":"常见问题解答","slug":"常见问题解答","link":"#常见问题解答","children":[{"level":3,"title":"报错 hit an invalid opcode while deploying","slug":"报错-hit-an-invalid-opcode-while-deploying","link":"#报错-hit-an-invalid-opcode-while-deploying","children":[]}]}],"git":{"isRoot":true,"createdTime":1733902043000,"updatedTime":1733902043000,"contributors":[{"name":"jjaw","email":"jjaw@jjaw.cn","commits":1}]},"excerpt":"\\n<h2>基础概念</h2>\\n<h3>合约</h3>\\n<p>每个合约都是一个合约,例如<code>Test</code>合约就是一个合约。</p>\\n<div class=\\"language-solidity\\" data-highlighter=\\"prismjs\\" data-ext=\\"solidity\\" data-title=\\"solidity\\"><pre class=\\"language-solidity\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">contract</span> <span class=\\"token class-name\\">Test</span><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","github_edit":{"fileGitUrl":"https://github.com/jianjianai/jjaw.cn/edit/master/articles/12-truffle测试/2-truffle初步入门.md"},"navPage":[{"title":"truffleApi 使用简介","link":"/2024/12/11/truffle-api/"},{"title":"truffle 测试用例简单讲解","link":"/2024/12/11/truffle-test-start/"},{"title":"truffle 详细快速入门","link":"/2024/12/11/truffle-beginner/"},{"title":"常用 assertApi","link":"/2024/12/11/truffle-assert/"},{"title":"常用 web3Api","link":"/2024/12/11/truffle-web3-api/"}]}');export{_ as comp,B as data};
