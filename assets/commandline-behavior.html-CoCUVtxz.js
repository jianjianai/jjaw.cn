import{_ as i,r as n,o as l,c as a,b as t,e,d as o,a as c}from"./app-DoDWfFAT.js";const p={},r=t("h1",{id:"命令行的行为",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#命令行的行为"},[t("span",null,"命令行的行为")])],-1),d=t("h2",{id:"如何控制输出文件中的排序-out",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#如何控制输出文件中的排序-out"},[t("span",null,"如何控制输出文件中的排序（-- out）？")])],-1),k=t("p",null,"输出文件的排序遵循预处理后输入文件的顺序。",-1),m=t("p",null,"编译器执行预处理，主要是为了解决所有的三斜线指令和模块导入。在这个过程中，额外的文件将会被将入到编译过程中。",-1),g=t("p",null,[e("这个过程开始于一个给定的根文件，这些是在命令行或者是 "),t("code",null,"tsconfig.json"),e(" 文件中 files 指定文件名，这些根文件按照指定的顺序进行预处理。在一个文件添加到这个列表之前，将处理所有的三斜线引用和模块导入语法，并包括它们的目标。三斜线引用和导入语法按照它们在文件中出现的顺序，以深度优先的方式解析。")],-1),h={href:"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.typescriptlang.org/docs/handbook/module-resolution.html",target:"_blank",rel:"noopener noreferrer"},u=c(`<h2 id="exported-variable-name-has-or-is-using-private-name-name-是什么错误" tabindex="-1"><a class="header-anchor" href="#exported-variable-name-has-or-is-using-private-name-name-是什么错误"><span><code>Exported variable [name] has or is using private name [name]</code> 是什么错误？</span></a></h2><p>当你使用 <code>--declarartion</code> 编译选项的时候，可能会出现这个错误，因为编译器试图生成与你定义模块完全匹配的声明文件：</p><p>假设你有这样一段代码：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">/// MyFile.ts</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... other members ....</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> parent<span class="token operator">:</span> Test<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">&#39;some thing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>为了生成声明文件，编译器必须为 <code>t</code> 写一个类型：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">/// MyFile.d.ts, auto-generated</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">let</span> t<span class="token operator">:</span> ___fill <span class="token keyword">in</span> the blank___<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>成员 <code>t</code> 有类型 <code>Test</code>，但是类型 <code>Test</code> 并不是可见的，因为它没有导出，因此我们不能写 <code>t: Test</code>。</p><p>在这个非常简单的例子里，我们可以用一个对象字面量重写 <code>Test&#39;s</code> 的形状。但是对于绝大多数情况，这并不能正常工作。如代码里所写，Test 的形状是自引用的，不能重写为匿名函数。如果 <code>Test</code> 有任何私有或受保护的成员，这同样也不能正常工作。因此，与其让你通过编写一个真实的类来获得 65% 的成功而后开始抛出错误，我们仅仅是在一开始的时候就抛出错误（你以后会发现）并为你省去不必要的麻烦。</p><p>为了避免这些错误：</p><ul><li>导出相关类型中使用的声明</li><li>当编写声明的时候，显示的为编译器指定类型注解</li></ul><h2 id="为什么添加-outdir-属性后-当在添加一个新文件时-会把所有的输出删除" tabindex="-1"><a class="header-anchor" href="#为什么添加-outdir-属性后-当在添加一个新文件时-会把所有的输出删除"><span>为什么添加 <code>--outDir</code> 属性后，当在添加一个新文件时，会把所有的输出删除</span></a></h2><p><code>--outDir</code> 指定输出的「根」目录。编译器需要此属性，用来将资源映射输出到根目录。如果 <code>--rootDir</code> 没有被指定，编辑器将会自己计算出一个。它根据常见的路径计算，它是所有输入文件的最长公共前缀。显然，当在较短路径前缀中添加新文件时，<code>--rootDir</code> 将会被修改。</p><p>为了确保添加一个新文件时，输出不会被修改，你应该在命令行中或 <code>tsconfig.json</code> 指定一个 <code>--rootDir</code>。</p>`,13);function y(f,v){const s=n("ExternalLinkIcon");return l(),a("div",null,[r,d,k,m,g,t("p",null,[e("请参考有关"),t("a",h,[e("三斜线指令"),o(s)]),e("的更多信息，和"),t("a",b,[e("模块"),o(s)]),e("导入语法的信息。")]),u])}const T=i(p,[["render",y],["__file","commandline-behavior.html.vue"]]),x=JSON.parse('{"path":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为","lang":"zh-CN","frontmatter":{"description":"命令行的行为 如何控制输出文件中的排序（-- out）？ 输出文件的排序遵循预处理后输入文件的顺序。 编译器执行预处理，主要是为了解决所有的三斜线指令和模块导入。在这个过程中，额外的文件将会被将入到编译过程中。 这个过程开始于一个给定的根文件，这些是在命令行或者是 tsconfig.json 文件中 files 指定文件名，这些根文件按照指定的顺序进行...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/faqs/commandline-behavior.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"命令行的行为"}],["meta",{"property":"og:description","content":"命令行的行为 如何控制输出文件中的排序（-- out）？ 输出文件的排序遵循预处理后输入文件的顺序。 编译器执行预处理，主要是为了解决所有的三斜线指令和模块导入。在这个过程中，额外的文件将会被将入到编译过程中。 这个过程开始于一个给定的根文件，这些是在命令行或者是 tsconfig.json 文件中 files 指定文件名，这些根文件按照指定的顺序进行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2019-03-31T03:34:38.000Z"}],["meta",{"property":"article:modified_time","content":"2019-03-31T03:34:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"命令行的行为\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2019-03-31T03:34:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"如何控制输出文件中的排序（-- out）？","slug":"如何控制输出文件中的排序-out","link":"#如何控制输出文件中的排序-out","children":[]},{"level":2,"title":"Exported variable [name] has or is using private name [name] 是什么错误？","slug":"exported-variable-name-has-or-is-using-private-name-name-是什么错误","link":"#exported-variable-name-has-or-is-using-private-name-name-是什么错误","children":[]},{"level":2,"title":"为什么添加 --outDir 属性后，当在添加一个新文件时，会把所有的输出删除","slug":"为什么添加-outdir-属性后-当在添加一个新文件时-会把所有的输出删除","link":"#为什么添加-outdir-属性后-当在添加一个新文件时-会把所有的输出删除","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1551100134000,"updatedTime":1554003278000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":2}]},"excerpt":"\\n<h2>如何控制输出文件中的排序（-- out）？</h2>\\n<p>输出文件的排序遵循预处理后输入文件的顺序。</p>\\n<p>编译器执行预处理，主要是为了解决所有的三斜线指令和模块导入。在这个过程中，额外的文件将会被将入到编译过程中。</p>\\n<p>这个过程开始于一个给定的根文件，这些是在命令行或者是 <code>tsconfig.json</code> 文件中 files 指定文件名，这些根文件按照指定的顺序进行预处理。在一个文件添加到这个列表之前，将处理所有的三斜线引用和模块导入语法，并包括它们的目标。三斜线引用和导入语法按照它们在文件中出现的顺序，以深度优先的方式解析。</p>\\n<p>请参考有关<a href=\\"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">三斜线指令</a>的更多信息，和<a href=\\"https://www.typescriptlang.org/docs/handbook/module-resolution.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">模块</a>导入语法的信息。</p>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/faqs/commandline-behavior.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{T as comp,x as data};
