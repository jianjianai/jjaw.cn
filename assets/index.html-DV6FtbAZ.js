import{_ as s,o as a,c as n,a as t}from"./app-Di-cW_m4.js";const e={},p=t(`<h1 id="assert-api" tabindex="-1"><a class="header-anchor" href="#assert-api"><span>assert Api</span></a></h1><p>assert(断言)中的全部函数的用法整理。</p><p>assert模块是Node的内置模块，主要用于断言。如果表达式不符合预期，就抛出一个错误。</p><h2 id="assert-value-msg" tabindex="-1"><a class="header-anchor" href="#assert-value-msg"><span><code>assert(value,msg)</code></span></a></h2><p>value必须为true</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">assert</span><span class="token punctuation">(</span> expected <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;expected必须等于3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="assert-ok-value" tabindex="-1"><a class="header-anchor" href="#assert-ok-value"><span><code>assert.ok(value)</code></span></a></h2><p>value必须为<code>true</code></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">assert<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>expected <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;expected必须等于3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="assert-equal-value1-value2-msg" tabindex="-1"><a class="header-anchor" href="#assert-equal-value1-value2-msg"><span><code>assert.equal(value1,value2,msg)</code></span></a></h2><p>value1和value2必须相同</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;expected必须等于3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="assert-notequal-value1-value2-msg" tabindex="-1"><a class="header-anchor" href="#assert-notequal-value1-value2-msg"><span><code>assert.notEqual(value1,value2,msg)</code></span></a></h2><p>value1和value2必须不同</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">assert<span class="token punctuation">.</span><span class="token function">notEqual</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;expected不可以等于4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="assert-deepequal-obj1-obj2-msg" tabindex="-1"><a class="header-anchor" href="#assert-deepequal-obj1-obj2-msg"><span><code>assert.deepEqual(obj1,obj2,msg)</code></span></a></h2><p>比较两个对象。只要它们的属性一一对应，且值都相等，就认为两个对象相等。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">assert<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">,</span> <span class="token string">&#39;预期两个数组应该有相同的属性&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token string">&quot;21&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token string">&quot;21&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">assert<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">,</span> <span class="token string">&#39;预期两个对象应该有相同的属性&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="assert-notdeepequal-obj1-obj2-msg" tabindex="-1"><a class="header-anchor" href="#assert-notdeepequal-obj1-obj2-msg"><span><code>assert.notDeepEqual(obj1,obj2,msg)</code></span></a></h2><p>和deepEqual相反，用来断言两个对象是否不相等。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">assert<span class="token punctuation">.</span><span class="token function">notDeepEqual</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">,</span> <span class="token string">&#39;预期两个对象不相等&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token string">&quot;21&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;jane&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token string">&quot;19&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">assert<span class="token punctuation">.</span><span class="token function">notDeepEqual</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">,</span> <span class="token string">&#39;预期两个对象不相等&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="assert-strictequal-value1-value2-msg" tabindex="-1"><a class="header-anchor" href="#assert-strictequal-value1-value2-msg"><span><code>assert.strictEqual(value1,value2,msg)</code></span></a></h2><p>strictEqual方法使用严格相等运算符（===），比较两个表达式。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">assert<span class="token punctuation">.</span><span class="token function">strictEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;预期严格相等&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="assert-notstrictequal-value1-value2-msg" tabindex="-1"><a class="header-anchor" href="#assert-notstrictequal-value1-value2-msg"><span><code>assert.notStrictEqual(value1,value2,msg)</code></span></a></h2><p>notStrictEqual方法使用严格不相等运算符（!==），比较两个表达式。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">assert<span class="token punctuation">.</span><span class="token function">notStrictEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;预期严格不相等&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div>`,27),o=[p];function l(c,u){return a(),n("div",null,o)}const i=s(e,[["render",l],["__file","index.html.vue"]]),k=JSON.parse(`{"path":"/2024/12/11/truffle-assert/","title":"assertApi","lang":"zh-CN","frontmatter":{"permalinkPattern":"2024/12/11/truffle-assert/","title":"assertApi","description":"本文详细讲解了truffle中常用的 assertAPI","tags":["后端"],"star":false,"comment":true,"head":[["meta",{"property":"og:url","content":"https://jjaw.cn/2024/12/11/truffle-assert/"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"assertApi"}],["meta",{"property":"og:description","content":"本文详细讲解了truffle中常用的 assertAPI"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-11T07:20:37.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:modified_time","content":"2024-12-11T07:20:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"assertApi\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-11T07:20:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"assert(value,msg)","slug":"assert-value-msg","link":"#assert-value-msg","children":[]},{"level":2,"title":"assert.ok(value)","slug":"assert-ok-value","link":"#assert-ok-value","children":[]},{"level":2,"title":"assert.equal(value1,value2,msg)","slug":"assert-equal-value1-value2-msg","link":"#assert-equal-value1-value2-msg","children":[]},{"level":2,"title":"assert.notEqual(value1,value2,msg)","slug":"assert-notequal-value1-value2-msg","link":"#assert-notequal-value1-value2-msg","children":[]},{"level":2,"title":"assert.deepEqual(obj1,obj2,msg)","slug":"assert-deepequal-obj1-obj2-msg","link":"#assert-deepequal-obj1-obj2-msg","children":[]},{"level":2,"title":"assert.notDeepEqual(obj1,obj2,msg)","slug":"assert-notdeepequal-obj1-obj2-msg","link":"#assert-notdeepequal-obj1-obj2-msg","children":[]},{"level":2,"title":"assert.strictEqual(value1,value2,msg)","slug":"assert-strictequal-value1-value2-msg","link":"#assert-strictequal-value1-value2-msg","children":[]},{"level":2,"title":"assert.notStrictEqual(value1,value2,msg)","slug":"assert-notstrictequal-value1-value2-msg","link":"#assert-notstrictequal-value1-value2-msg","children":[]}],"git":{"isRoot":true,"createdTime":1733901637000,"updatedTime":1733901637000,"contributors":[{"name":"简简爱","email":"2801819967@qq.com","commits":1}]},"excerpt":"\\n<p>assert(断言)中的全部函数的用法整理。</p>\\n<p>assert模块是Node的内置模块，主要用于断言。如果表达式不符合预期，就抛出一个错误。</p>\\n<h2><code>assert(value,msg)</code></h2>\\n<p>value必须为true</p>\\n<div class=\\"language-javascript\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"line\\"><span class=\\"token function\\">assert</span><span class=\\"token punctuation\\">(</span> expected <span class=\\"token operator\\">===</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'expected必须等于3'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","github_edit":{"filePathRelative":"articles/12-truffle测试/3-assertApi.md"},"navPage":[{"title":"truffleApi 使用简介","link":"/2024/12/11/truffle-api/"},{"title":"truffle 测试用例简单讲解","link":"/2024/12/11/truffle-test-start/"},{"title":"truffle 详细快速入门","link":"/2024/12/11/truffle-beginner/"},{"title":"常用 assertApi","link":"/2024/12/11/truffle-assert/"},{"title":"常用 web3Api","link":"/2024/12/11/truffle-web3-api/"}]}`);export{i as comp,k as data};
