import{_ as l,r as p,o as i,c,b as n,e as s,d as a,w as r,a as t}from"./app-9h4tjtpM.js";const d={},u=t(`<h1 id="lib-d-ts" tabindex="-1"><a class="header-anchor" href="#lib-d-ts"><span><code>lib.d.ts</code></span></a></h1><p>当你安装 <code>TypeScript</code> 时，会顺带安装一个 <code>lib.d.ts</code> 声明文件。这个文件包含 JavaScript 运行时以及 DOM 中存在各种常见的环境声明。</p><ul><li>它自动包含在 TypeScript 项目的编译上下文中；</li><li>它能让你快速开始书写经过类型检查的 JavaScript 代码。</li></ul><p>你可以通过指定 <code>--noLib</code> 的编译器命令行标志（或者在 <code>tsconfig.json</code> 中指定选项 <code>noLib: true</code>）从上下文中排除此文件。</p><h2 id="使用例子" tabindex="-1"><a class="header-anchor" href="#使用例子"><span>使用例子</span></a></h2><p>看如下例子：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这段代码的类型检查正常，因为 <code>lib.d.ts</code> 为所有 JavaScript 对象定义了 <code>toString</code> 方法。</p><p>如果你在 <code>noLib</code> 选项下，使用相同的代码，这将会出现类型检查错误：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 属性 toString 不存在类型 number 上</span></span>
<span class="line"></span></code></pre></div><p>现在你已经理解了 <code>lib.d.ts</code> 的重要性，至于它的内容是怎么样的，我们接下来将会解释。</p><h2 id="观察-lib-d-ts-的内容" tabindex="-1"><a class="header-anchor" href="#观察-lib-d-ts-的内容"><span>观察 <code>lib.d.ts</code> 的内容</span></a></h2><p><code>lib.d.ts</code> 的内容主要是一些变量声明（如：<code>window</code>、<code>document</code>、<code>math</code>）和一些类似的接口声明（如：<code>Window</code>、<code>Document</code>、<code>Math</code>）。</p><p>寻找代码类型（如：<code>Math.floor</code>）的最简单方式是使用 IDE 的 <code>F12</code>（跳转到定义）。</p><p>让我们来看一个变量声明的示例，如 <code>window</code> 被定义为：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">var</span> window<span class="token operator">:</span> Window<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这只是一个简单的 <code>declare var</code>，后面跟一个变量名称（<code>window</code>）和一个用来类型注解的接口（<code>Window</code>），这些变量通常指向一些全局的接口，例如，以下是 <code>Window</code> 接口的一小部分：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Window</span></span>
<span class="line">  <span class="token keyword">extends</span> <span class="token class-name">EventTarget</span><span class="token punctuation">,</span></span>
<span class="line">    WindowTimers<span class="token punctuation">,</span></span>
<span class="line">    WindowSessionStorage<span class="token punctuation">,</span></span>
<span class="line">    WindowLocalStorage<span class="token punctuation">,</span></span>
<span class="line">    WindowConsole<span class="token punctuation">,</span></span>
<span class="line">    GlobalEventHandlers<span class="token punctuation">,</span></span>
<span class="line">    IDBEnvironment<span class="token punctuation">,</span></span>
<span class="line">    WindowBase64 <span class="token punctuation">{</span></span>
<span class="line">  animationStartTime<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  applicationCache<span class="token operator">:</span> ApplicationCache<span class="token punctuation">;</span></span>
<span class="line">  clientInformation<span class="token operator">:</span> Navigator<span class="token punctuation">;</span></span>
<span class="line">  closed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  crypto<span class="token operator">:</span> Crypto<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// so on and so forth...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>你可以在这些接口里看到大量的类型信息，当你不使用 TypeScript 时，你需要将它们保存在你的大脑里。现在你可以使用 <code>intellisense</code> 之类东西，从而可以减少对知识的记忆。</p><p>使用这些全局变量是有利的。在不更改 <code>lib.d.ts</code> 的情况下，它可以让你添加额外的属性。接下来，我们将介绍这些概念。</p><h2 id="修改原始类型" tabindex="-1"><a class="header-anchor" href="#修改原始类型"><span>修改原始类型</span></a></h2>`,21),k=n("code",null,"lib.d.ts",-1),g=n("code",null,"lib.d.ts",-1),h=n("code",null,"global.d.ts",-1),m=t(`<p>这里有我们需要添加至 <code>Window</code>，<code>Math</code>，<code>Date</code> 的一些例子：</p><h3 id="window" tabindex="-1"><a class="header-anchor" href="#window"><span>Window</span></a></h3><p>仅仅是添加至 <code>Window</code> 接口：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这将允许你以类型安全的形式使用它：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// Add it at runtime</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">helloWorld</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Call it</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 滥用会导致错误</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token string">&#39;gracius&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 提供的参数与目标不匹配</span></span>
<span class="line"></span></code></pre></div><h3 id="math" tabindex="-1"><a class="header-anchor" href="#math"><span>Math</span></a></h3><p>全局变量 <code>Math</code> 在 <code>lib.d.ts</code> 中被定义为：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">/** An intrinsic object that provides basic mathematics functionality and constants. */</span></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">var</span> Math<span class="token operator">:</span> Math<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>即变量 <code>Math</code> 是 <code>Math</code> 的一个实例，<code>Math</code> 接口被定义为：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">E</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token constant">LN10</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// others ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,11),b=n("code",null,"Math",-1),y=n("code",null,"Math",-1),f={href:"https://www.npmjs.com/package/seedrandom",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"seedrandom Project",-1),w=n("code",null,"seedrandom",-1),j=n("code",null,"Math",-1),x=t(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">seedrandom</span><span class="token punctuation">(</span>seed<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>你可以像下面一样使用它：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">Math<span class="token punctuation">.</span><span class="token function">seedrandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Math<span class="token punctuation">.</span><span class="token function">seedrandom</span><span class="token punctuation">(</span><span class="token string">&#39;Any string you want&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span>Date</span></a></h3><p>如果你在 <code>lib.d.ts</code> 中寻找 <code>Date</code> 定义的声明，你将会找到如下代码：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">var</span> Date<span class="token operator">:</span> DateConstructor<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>接口 <code>DateConstructor</code> 与上文中 <code>Math</code> 和 <code>Window</code> 接口一样，它涵盖了可以使用的 <code>Date</code> 全局变量的成员（如：<code>Date.now()</code>）。除此之外，它还包含了可以让你创建 <code>Date</code> 实例的构造函数签名（如：<code>new Date()</code>）。<code>DateConstructor</code> 接口的一部分代码如下所示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">DateConstructor</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 一些其他的构造函数签名</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 其他成员函数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,8),S={href:"https://github.com/abritinthebay/datejs",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"Date",-1),q=n("code",null,"Date",-1),T={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/datejs/index.d.ts",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// DateJS 公开的静态方法</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">DateConstructor</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/** Gets a date that is set to the current date. The time is set to the start of the day (00:00 or 12:00 AM) */</span></span>
<span class="line">  <span class="token function">today</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ... so on and so forth</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// DateJS 公开的实例方法</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Date</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/** Adds the specified number of milliseconds to this instance. */</span></span>
<span class="line">  <span class="token function">addMilliseconds</span><span class="token punctuation">(</span>milliseconds<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ... so on and so forth</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这允许你在类型安全的情况下做：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> today <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">today</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> todayAfter1second <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">addMilliseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>string</span></a></h3><p>如果你在 <code>lib.d.ts</code> 里寻找 <code>string</code>，你将会找到与 <code>Date</code> 相类似的内容（全局变量 <code>String</code>，<code>StringConstructor</code> 接口，<code>String</code> 接口）。但值得注意的是，<code>String</code> 接口也会影响字符串字面量，如下所示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">endsWith</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> str <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> suffix<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo bas&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="终极-string" tabindex="-1"><a class="header-anchor" href="#终极-string"><span>终极 string</span></a></h3><p>基于可维护性，我们推荐创建一个 <code>global.d.ts</code> 文件。然而，如果你愿意，你可以通过使用 <code>declare global { /* global namespace */ }</code>，从文件模块中进入全局命名空间：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// 确保是模块</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">declare</span> global <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">endsWith</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> str <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> suffix<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo bas&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="使用你自己定义的-lib-d-ts" tabindex="-1"><a class="header-anchor" href="#使用你自己定义的-lib-d-ts"><span>使用你自己定义的 <code>lib.d.ts</code></span></a></h2><p>正如上文所说，使用 <code>--noLib</code> 编译选项会导致 TypeScript 排除自动包含的 <code>lib.d.ts</code> 文件。为什么这个功能是有效的，我例举了一些常见原因：</p><ul><li>运行的 JavaScript 环境与基于标准浏览器运行时环境有很大不同；</li><li>你希望在代码里严格的控制全局变量，例如：<code>lib.d.ts</code> 将 <code>item</code> 定义为全局变量，你不希望它泄漏到你的代码里。</li></ul><p>一旦你排除了默认的 <code>lib.d.ts</code> 文件，你就可以在编译上下文中包含一个命名相似的文件，TypeScript 将提取该文件进行类型检查。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>小心使用 <code>--noLib</code> 选项，一旦你使用了它，当你把你的项目分享给其他人时，它们也将被迫使用 <code>--noLib</code> 选项，更糟糕的是，如果将这些代码放入你的项目中，你可能需要将它们移植到基于你的代码的 <code>lib</code> 中。</p></div><h2 id="编译目标对-lib-d-ts-的影响" tabindex="-1"><a class="header-anchor" href="#编译目标对-lib-d-ts-的影响"><span>编译目标对 <code>lib.d.ts</code> 的影响</span></a></h2><p>设置编译目标为 <code>es6</code> 时，能导致 <code>lib.d.ts</code> 包含更多像 Promise 现代（es6）内容的环境声明。编译器目标的这种作用，改变了代码的环境，这对某些人来说是理想的，但是这对另外一些人来说造成了困扰，因为它将编译出的代码与环境混为一谈。</p><p>当你想对环境进行更细粒的控制时，你应该使用我们接下来将要讨论的 <code>--lib</code> 选项。</p><h2 id="lib-选项" tabindex="-1"><a class="header-anchor" href="#lib-选项"><span><code>--lib</code> 选项</span></a></h2><p>有时，你想要解耦编译目标（即生成的 JavaScript 版本）和环境库支持之间的关系。例如对于 Promise，你的编译目标是 <code>--target es5</code>，但是你仍然想使用它，这时，你可以使用 <code>lib</code> 对它进行控制。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 <code>--lib</code> 选项可以将任何 <code>lib</code> 与 <code>--target</code> 解耦。</p></div><p>你可以通过命令行或者在 <code>tsconfig.json</code> 中提供此选项（推荐）：</p><h3 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行"><span>命令行</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">tsc <span class="token operator">--</span>target es5 <span class="token operator">--</span>lib dom<span class="token punctuation">,</span>es6</span>
<span class="line"></span></code></pre></div><h3 id="config-json" tabindex="-1"><a class="header-anchor" href="#config-json"><span>config.json</span></a></h3><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><code>lib</code> 分类如下：</p><ul><li>JavaScript 功能 <ul><li>es5</li><li>es6</li><li>es2015</li><li>es7</li><li>es2016</li><li>es2017</li><li>esnext</li></ul></li><li>运行环境 <ul><li>dom</li><li>dom.iterable</li><li>webworker</li><li>scripthost</li></ul></li><li>ESNext 功能选项 <ul><li>es2015.core</li><li>es2015.collection</li><li>es2015.generator</li><li>es2015.iterable</li><li>es2015.promise</li><li>es2015.proxy</li><li>es2015.reflect</li><li>es2015.symbol</li><li>es2015.symbol.wellknown</li><li>es2016.array.include</li><li>es2017.object</li><li>es2017.sharedmemory</li><li>esnext.asynciterable</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">NOTE</p><p><code>--lib</code> 选项提供非常精细的控制，因此你最有可能从运行环境与 JavaScript 功能类别中分别选择一项，如果你没有指定 <code>--lib</code>，则会导入默认库：</p><ul><li><code>--target</code> 选项为 es5 时，会导入 es5, dom, scripthost。</li><li><code>--target</code> 选项为 es6 时，会导入 es6, dom, dom.iterable, scripthost。</li></ul></div><p>我个人的推荐：</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dom&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>包括使用 Symbol 的 ES5 使用例子：</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;scripthost&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;es2015.symbol&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="在旧的-javascript-引擎时使用-polyfill" tabindex="-1"><a class="header-anchor" href="#在旧的-javascript-引擎时使用-polyfill"><span>在旧的 JavaScript 引擎时使用 Polyfill</span></a></h2>`,33),M={href:"https://egghead.io/lessons/typescript-using-es6-and-esnext-with-typescript",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>要使用一些新功能如 <code>Map</code>、<code>Set</code>、<code>Promise</code>（随着时间推移会变化），你可以使用现代的 <code>lib</code> 选项，并且需要安装 <code>core-js</code>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> core-js --save-dev</span>
<span class="line"></span></code></pre></div><p>接着，在你的项目里导入它：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token string">&#39;core-js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div>`,4);function J(E,C){const o=p("RouteLink"),e=p("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("在 TypeScript 中，接口是开放式的，这意味着当你想使用不存在的成员时，只需要将它们添加至 "),k,s(" 中的接口声明中即可，TypeScript 将会自动接收它。注意，你需要在"),a(o,{to:"/git/ts-book/docs/project/modules.html"},{default:r(()=>[s("全局模块")]),_:1}),s("中做这些修改，以使这些接口与 "),g,s(" 相关联。我们推荐你创建一个称为 "),h,s(" 的特殊文件。")]),m,n("p",null,[s("当你想在 "),b,s(" 全局变量上添加你需要的属性时，你只需要把它添加到 "),y,s(" 的全局接口上即可，例如：在"),n("a",f,[v,a(e)]),s("项目里，它添加了 "),w,s(" 函数至全局的 "),j,s(" 对象上，这很容易被声明：")]),x,n("p",null,[s("在 "),n("a",S,[s("datejs"),a(e)]),s(" 里，它在 "),_,s(" 的全局变量以及 "),q,s(" 实例上同时添加了成员，因此这个库的 TypeScript 定义看起来像如下所示（社区已经"),n("a",T,[s("定义"),a(e)]),s("好了）：")]),D,n("blockquote",null,[n("p",null,[n("a",M,[s("关于此主题的一个视频"),a(e)])])]),W])}const A=l(d,[["render",J],["__file","lib.html.vue"]]),N=JSON.parse('{"path":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts","lang":"zh-CN","frontmatter":{"description":"lib.d.ts 当你安装 TypeScript 时，会顺带安装一个 lib.d.ts 声明文件。这个文件包含 JavaScript 运行时以及 DOM 中存在各种常见的环境声明。 它自动包含在 TypeScript 项目的编译上下文中； 它能让你快速开始书写经过类型检查的 JavaScript 代码。 你可以通过指定 --noLib 的编译器命令行标...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/typings/lib.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"lib.d.ts"}],["meta",{"property":"og:description","content":"lib.d.ts 当你安装 TypeScript 时，会顺带安装一个 lib.d.ts 声明文件。这个文件包含 JavaScript 运行时以及 DOM 中存在各种常见的环境声明。 它自动包含在 TypeScript 项目的编译上下文中； 它能让你快速开始书写经过类型检查的 JavaScript 代码。 你可以通过指定 --noLib 的编译器命令行标..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-04-26T01:40:49.000Z"}],["meta",{"property":"article:modified_time","content":"2021-04-26T01:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lib.d.ts\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-04-26T01:40:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用例子","slug":"使用例子","link":"#使用例子","children":[]},{"level":2,"title":"观察 lib.d.ts 的内容","slug":"观察-lib-d-ts-的内容","link":"#观察-lib-d-ts-的内容","children":[]},{"level":2,"title":"修改原始类型","slug":"修改原始类型","link":"#修改原始类型","children":[{"level":3,"title":"Window","slug":"window","link":"#window","children":[]},{"level":3,"title":"Math","slug":"math","link":"#math","children":[]},{"level":3,"title":"Date","slug":"date","link":"#date","children":[]},{"level":3,"title":"string","slug":"string","link":"#string","children":[]},{"level":3,"title":"终极 string","slug":"终极-string","link":"#终极-string","children":[]}]},{"level":2,"title":"使用你自己定义的 lib.d.ts","slug":"使用你自己定义的-lib-d-ts","link":"#使用你自己定义的-lib-d-ts","children":[]},{"level":2,"title":"编译目标对 lib.d.ts 的影响","slug":"编译目标对-lib-d-ts-的影响","link":"#编译目标对-lib-d-ts-的影响","children":[]},{"level":2,"title":"--lib 选项","slug":"lib-选项","link":"#lib-选项","children":[{"level":3,"title":"命令行","slug":"命令行","link":"#命令行","children":[]},{"level":3,"title":"config.json","slug":"config-json","link":"#config-json","children":[]}]},{"level":2,"title":"在旧的 JavaScript 引擎时使用 Polyfill","slug":"在旧的-javascript-引擎时使用-polyfill","link":"#在旧的-javascript-引擎时使用-polyfill","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1535248029000,"updatedTime":1619401249000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":8},{"name":"stevezyyang","email":"stevezyyang@tencent.com","commits":3},{"name":"Jasery","email":"jaserydev@163.com","commits":1},{"name":"Sean Wong","email":"1971822513@qq.com","commits":1},{"name":"chenwangji","email":"694093637@qq.com","commits":1},{"name":"huangkairan","email":"56213366+huangkairan@users.noreply.github.com","commits":1},{"name":"zongzi531","email":"zongzi.xy@gmail.com","commits":1},{"name":"阿卡琳","email":"hufan.akarin@Gmail.com","commits":1},{"name":"项鸿伟","email":"734824565@qq.com","commits":1}]},"excerpt":"\\n<p>当你安装 <code>TypeScript</code> 时，会顺带安装一个 <code>lib.d.ts</code> 声明文件。这个文件包含 JavaScript 运行时以及 DOM 中存在各种常见的环境声明。</p>\\n<ul>\\n<li>它自动包含在 TypeScript 项目的编译上下文中；</li>\\n<li>它能让你快速开始书写经过类型检查的 JavaScript 代码。</li>\\n</ul>\\n<p>你可以通过指定 <code>--noLib</code> 的编译器命令行标志（或者在 <code>tsconfig.json</code> 中指定选项 <code>noLib: true</code>）从上下文中排除此文件。</p>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/typings/lib.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{A as comp,N as data};
