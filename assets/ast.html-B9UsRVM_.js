import{_ as e,r as o,o as p,c as i,b as t,e as n,d as l,w as c,a as s}from"./app-Dix9cm9Q.js";const d={},k=s(`<h1 id="抽象语法树" tabindex="-1"><a class="header-anchor" href="#抽象语法树"><span>抽象语法树</span></a></h1><h3 id="node-节点" tabindex="-1"><a class="header-anchor" href="#node-节点"><span>Node 节点</span></a></h3><p>节点是抽象语法树（AST） 的基本构造块。语法上，通常 <code>Node</code> 表示非末端（non-terminals）节点。但是，有些末端节点，如：标识符和字面量也会保留在树中。</p><p>AST 节点文档由两个关键部分构成。一是节点的 <code>SyntaxKind</code> 枚举，用于标识 AST 中的类型。二是其接口，即实例化 AST 时节点提供的 API。</p><p>这里是 <code>interface Node</code> 的一些关键成员：</p><ul><li><code>TextRange</code> 标识该节点在源文件中的起止位置。</li><li><code>parent?: Node</code> 当前节点（在 AST 中）的父节点</li></ul><p><code>Node</code> 还有一些其他的成员，标志（flags）和修饰符（modifiers）等。你可以在源码中搜索 <code>interface Node</code> 来查看，而上面提到对节点的遍历是非常重要的。</p><h3 id="sourcefile" tabindex="-1"><a class="header-anchor" href="#sourcefile"><span>SourceFile</span></a></h3><ul><li><code>SyntaxKind.SourceFile</code></li><li><code>interface SourceFile</code>.</li></ul><p>每个 <code>SourceFile</code> 都是一棵 AST 的顶级节点，它们包含在 <code>Program</code> 中。</p><h2 id="ast-技巧-访问子节点" tabindex="-1"><a class="header-anchor" href="#ast-技巧-访问子节点"><span>AST 技巧：访问子节点</span></a></h2><p>有个工具函数 <code>ts.forEachChild</code>，可以用来访问 AST 任一节点的所有子节点。</p><p>下面是简化的代码片段，用于演示如何工作：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forEachChild</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">,</span> <span class="token function-variable function">cbNode</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span> cbNodeArray<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>nodes<span class="token operator">:</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>BinaryExpression<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>BinaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>BinaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>operatorToken<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>BinaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>IfStatement<span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>IfStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>IfStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>thenStatement<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>IfStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>elseStatement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// .... 更多</span></span>
<span class="line"></span></code></pre></div><p>该函数主要检查 <code>node.kind</code> 并据此判断 node 的接口，然后在其子节点上调用 <code>cbNode</code>。但是，要注意该函数不会为<em>所有</em>子节点调用 <code>visitNode</code>（例如：SyntaxKind.SemicolonToken）。想获得某 AST 节点的<em>所有</em>子节点，只要调用该节点的成员函数 <code>.getChildren</code>。</p><p>如下函数会打印 AST 节点详细信息：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">printAllChildren</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ts<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ts<span class="token punctuation">.</span><span class="token function">syntaxKindToName</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>kind<span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>pos<span class="token punctuation">,</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  depth<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">  node<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token function">printAllChildren</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>我们进一步讨论解析器时会看到该函数的使用示例。</p><h2 id="ast-技巧-syntaxkind-枚举" tabindex="-1"><a class="header-anchor" href="#ast-技巧-syntaxkind-枚举"><span>AST 技巧：SyntaxKind 枚举</span></a></h2><p><code>SyntaxKind</code> 被定义为一个常量枚举，如下所示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> SyntaxKind <span class="token punctuation">{</span></span>
<span class="line">    Unknown<span class="token punctuation">,</span></span>
<span class="line">    EndOfFileToken<span class="token punctuation">,</span></span>
<span class="line">    SingleLineCommentTrivia<span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// ... 更多</span></span>
<span class="line"></span></code></pre></div>`,21),r=t("em",null,"内联",-1),u=t("code",null,"ts.SyntaxKind.EndOfFileToken",-1),m=t("code",null,"1",-1),g=t("em",null,"在运行时仍可用",-1),h=t("code",null,"ts.SyntaxKind.EndOfFileToken",-1),y=s(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">syntaxKindToName</span><span class="token punctuation">(</span>kind<span class="token operator">:</span> ts<span class="token punctuation">.</span>SyntaxKind<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>ts<span class="token punctuation">)</span><span class="token punctuation">.</span>SyntaxKind<span class="token punctuation">[</span>kind<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="ast-杂项" tabindex="-1"><a class="header-anchor" href="#ast-杂项"><span>AST 杂项</span></a></h2><p>杂项（Trivia）是指源文本中对正常理解代码不太重要的部分，例如：空白，注释，冲突标记。（为了保持轻量）杂项<em>不会存储</em>在 AST 中。但是可以<em>视需要</em>使用一些 <code>ts.*</code> API 来获取。</p><p>展示这些 API 前，你需要理解以下内容：</p><h3 id="杂项的所有权" tabindex="-1"><a class="header-anchor" href="#杂项的所有权"><span>杂项的所有权</span></a></h3><p>通常：</p><ul><li>token 拥有它后面 <em>同一行</em> 到下一个 token 之前的所有杂项</li><li>该行之后的注释都与下个的 token 相关</li></ul><p>对于文件中的前导（leading）和结束（ending）注释：</p><ul><li>源文件中的第一个 token 拥有所有开始的杂项</li><li>而文件最后的一些列杂项则附加到文件结束符上，该 token 长度为 0</li></ul><h3 id="杂项-api" tabindex="-1"><a class="header-anchor" href="#杂项-api"><span>杂项 API</span></a></h3><p>注释在多数基本使用中，都是让人关注的杂项。节点的注释可以通过以下函数获取：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>ts.getLeadingCommentRanges</code></td><td>给定源文本及其位置，返回给定位置后第一个换行符到 token 本身之间的注释范围（可能需要结合 <code>ts.Node.getFullStart</code> 使用）。</td></tr><tr><td><code>ts.getTrailingCommentRanges</code></td><td>给定源文本及其位置，返回给定位置后第一个换行符之前的注释范围（可能需要结合 <code>ts.Node.getEnd</code> 使用）。</td></tr></tbody></table><p>假设下面是某个源文件的一部分：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token comment">/*hello*/</span></span>
<span class="line">    <span class="token comment">//bye</span></span>
<span class="line">  <span class="token comment">/*hi*/</span>    <span class="token keyword">function</span></span>
<span class="line"></span></code></pre></div><p>对 <code>function</code> 而言，<code>getLeadingCommentRanges</code> 仅返回最后的两个注释 <code>//bye</code> 和 <code>/*hi*/</code>。 另外，而在 <code>debugger</code> 语句结束位置调用 <code>getTrailingCommentRanges</code> 会得到注释 <code>/*hello*/</code>。</p><h3 id="token-start-和-full-start-位置" tabindex="-1"><a class="header-anchor" href="#token-start-和-full-start-位置"><span>Token Start 和 Full Start 位置</span></a></h3><p>节点有所谓的 &quot;token start&quot; 和 &quot;full start&quot; 位置。</p><ul><li>Token Start：比较自然的版本，即文件中一个 token 的文本开始的位置。</li><li>Full Start：是指扫描器从上一个重要 token 开始扫描的位置。</li></ul><p>AST 节点有 <code>getStart</code> 和 <code>getFullStart</code> API 用于获取以上两种位置，还是这个例子：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token comment">/*hello*/</span></span>
<span class="line">    <span class="token comment">//bye</span></span>
<span class="line">  <span class="token comment">/*hi*/</span>    <span class="token keyword">function</span></span>
<span class="line"></span></code></pre></div><p>对 <code>function</code> 而言，token start 即 <code>function</code> 的位置，而 <em>full</em> start 是 <code>/*hello*/</code> 的位置。要注意，full start 甚至会包含前一节点拥有的杂项。</p>`,21);function b(f,S){const a=o("RouteLink");return p(),i("div",null,[k,t("p",null,[n("这是个"),l(a,{to:"/git/ts-book/docs/typings/enums.html#%E5%B8%B8%E9%87%8F%E6%9E%9A%E4%B8%BE"},{default:c(()=>[n("常量枚举")]),_:1}),n("，方便"),r,n("（例如："),u,n(" 会变为 "),m,n("），这样在使用 AST 时就不会有处理引用的额外开销。但编译时需要使用 --preserveConstEnums 编译标志，以便枚举"),g,n("。JavaScript 中你也可以根据需要使用 "),h,n("。另外，可以用以下函数，将枚举成员转化为可读的字符串：")]),y])}const x=e(d,[["render",b],["__file","ast.html.vue"]]),v=JSON.parse('{"path":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树","lang":"zh-CN","frontmatter":{"description":"抽象语法树 Node 节点 节点是抽象语法树（AST） 的基本构造块。语法上，通常 Node 表示非末端（non-terminals）节点。但是，有些末端节点，如：标识符和字面量也会保留在树中。 AST 节点文档由两个关键部分构成。一是节点的 SyntaxKind 枚举，用于标识 AST 中的类型。二是其接口，即实例化 AST 时节点提供的 API。 ...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/compiler/ast.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"抽象语法树"}],["meta",{"property":"og:description","content":"抽象语法树 Node 节点 节点是抽象语法树（AST） 的基本构造块。语法上，通常 Node 表示非末端（non-terminals）节点。但是，有些末端节点，如：标识符和字面量也会保留在树中。 AST 节点文档由两个关键部分构成。一是节点的 SyntaxKind 枚举，用于标识 AST 中的类型。二是其接口，即实例化 AST 时节点提供的 API。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-05-15T14:05:28.000Z"}],["meta",{"property":"article:modified_time","content":"2020-05-15T14:05:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象语法树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-05-15T14:05:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Node 节点","slug":"node-节点","link":"#node-节点","children":[]},{"level":3,"title":"SourceFile","slug":"sourcefile","link":"#sourcefile","children":[]},{"level":2,"title":"AST 技巧：访问子节点","slug":"ast-技巧-访问子节点","link":"#ast-技巧-访问子节点","children":[]},{"level":2,"title":"AST 技巧：SyntaxKind 枚举","slug":"ast-技巧-syntaxkind-枚举","link":"#ast-技巧-syntaxkind-枚举","children":[]},{"level":2,"title":"AST 杂项","slug":"ast-杂项","link":"#ast-杂项","children":[{"level":3,"title":"杂项的所有权","slug":"杂项的所有权","link":"#杂项的所有权","children":[]},{"level":3,"title":"杂项 API","slug":"杂项-api","link":"#杂项-api","children":[]},{"level":3,"title":"Token Start 和 Full Start 位置","slug":"token-start-和-full-start-位置","link":"#token-start-和-full-start-位置","children":[]}]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1537098059000,"updatedTime":1589551528000,"contributors":[{"name":"hopalay","email":"hopalay@qq.com","commits":4},{"name":"AllenLee","email":"648384410li@gmail.com","commits":1},{"name":"jkchao","email":"jkchaom@gmail.com","commits":1}]},"excerpt":"\\n<h3>Node 节点</h3>\\n<p>节点是抽象语法树（AST） 的基本构造块。语法上，通常 <code>Node</code> 表示非末端（non-terminals）节点。但是，有些末端节点，如：标识符和字面量也会保留在树中。</p>\\n<p>AST 节点文档由两个关键部分构成。一是节点的 <code>SyntaxKind</code> 枚举，用于标识 AST 中的类型。二是其接口，即实例化 AST 时节点提供的 API。</p>\\n<p>这里是 <code>interface Node</code> 的一些关键成员：</p>\\n<ul>\\n<li><code>TextRange</code> 标识该节点在源文件中的起止位置。</li>\\n<li><code>parent?: Node</code> 当前节点（在 AST 中）的父节点</li>\\n</ul>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/compiler/ast.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{x as comp,v as data};
