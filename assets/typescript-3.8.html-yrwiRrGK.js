import{_ as e,r as o,o as c,c as l,b as s,e as n,d as t,a as p}from"./app-DETt0KQg.js";const i={},r=s("h1",{id:"typescript-3-8",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#typescript-3-8"},[s("span",null,"TypeScript 3.8")])],-1),u={href:"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="仅仅导入-导出声明" tabindex="-1"><a class="header-anchor" href="#仅仅导入-导出声明"><span>仅仅导入/导出声明</span></a></h2><p>为了能让我们导入类型，TypeScript 重用了 JavaScript 导入语法。例如在下面的这个例子中，我们确保 JavaScript 的值 <code>doThing</code> 以及 TypeScript 类型 <code>Options</code> 一同被导入</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// ./foo.ts</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">doThing</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ./bar.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> doThing<span class="token punctuation">,</span> Options <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">doThingBetter</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something twice as good</span></span>
<span class="line">  <span class="token function">doThing</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">doThing</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这很方便的，因为在大多数的情况下，我们不必担心导入了什么 —— 仅仅是我们想导入的内容。</p><p>遗憾的是，这仅是因为一个被称之为「导入省略」的功能而起作用。当 TypeScript 输出一个 JavaScript 文件时，TypeScript 会识别出 <code>Options</code> 仅仅是当作了一个类型来使用，它将会删除 <code>Options</code></p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// ./foo.js</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">doThing</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ./bar.js</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> doThing <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">doThingBetter</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Options<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something twice as good</span></span>
<span class="line">  <span class="token function">doThing</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">doThing</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>在通常情况下，这种行为都是比较好的。但是它会导致一些其他问题。</p><p>首先，在一些场景下，TypeScript 会混淆导出的究竟是一个类型还是一个值。比如在下面的例子中， <code>MyThing</code> 究竟是一个值还是一个类型？</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> MyThing <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./some-module.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span> MyThing <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>如果单从这个文件来看，我们无从得知答案。如果 <code>Mything</code> 仅仅是一个类型，Babel 和 TypeScript 使用的 <code>transpileModule</code> API 编译出的代码将无法正确工作，并且 TypeScript 的 <code>isolatedModules</code> 编译选项将会提示我们，这种写法将会抛出错误。问题的关键在于，没有一种方式能识别它仅仅是个类型，以及是否应该删除它，因此「导入省略」并不够好。</p><p>同时，这也存在另外一个问题，TypeScript 导入省略将会去除只包含用于类型声明的导入语句。对于含有副作用的模块，这造成了明显的不同行为。于是，使用者将会不得不添加一条额外的声明语句，来确保有副作用。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// This statement will get erased because of import elision.</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> SomeTypeFoo<span class="token punctuation">,</span> SomeOtherTypeBar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module-with-side-effects&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This statement always sticks around.</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&#39;./module-with-side-effects&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>一个我们看到的具体例子是出现在 Angularjs（1.x）中， <code>services</code> 需要在全局在注册（它是一个副作用），但是导入的 <code>services</code> 仅仅用于类型声明中。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// ./service.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;globalServiceId&#39;</span><span class="token punctuation">,</span> Service<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ./consumer.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Service <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./service.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;globalServiceId&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>service<span class="token operator">:</span> Service<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do stuff with Service</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>结果 <code>./service.js</code> 中的代码不会被执行，导致在运行时会被中断。</p><p>为了避免这类行为，我们意识到在什么该被导入/删除方面，需要给使用者提供更细粒度的控制。</p><p>在 TypeScript 3.8 版本中，我们添加了一个仅仅导入/导出声明语法来作为解决方式。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> SomeThing <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./some-module.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> SomeThing <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><code>import type</code> 仅仅导入被用于类型注解或声明的声明语句，它总是会被完全删除，因此在运行时将不会留下任何代码。与此相似，<code>export type</code> 仅仅提供一个用于类型的导出，在 TypeScript 输出文件中，它也将会被删除。</p><p>值得注意的是，类在运行时具有值，在设计时具有类型。它的使用与上下文有关。当使用 <code>import type</code> 导入一个类时，你不能做类似于从它继承的操作。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">ButtonProps</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Component<span class="token operator">&lt;</span>ButtonProps<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//               ~~~~~~~~~</span></span>
<span class="line">    <span class="token comment">// error! &#39;Component&#39; only refers to a type, but is being used as a value here.</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>如果在之前你使用过 Flow，它们的语法是相似的。一个不同的地方是我们添加了一个新的限制条件，来避免可能混淆的代码。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// Is only &#39;Foo&#39; a type? Or every declaration in the import?</span></span>
<span class="line"><span class="token comment">// We just give an error because it&#39;s not clear.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token class-name">Foo</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> Bar<span class="token punctuation">,</span> Baz <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;some-module&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//     ~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span class="token comment">// error! A type-only import can specify a default import or named bindings, but not both.</span></span>
<span class="line"></span></code></pre></div><p>与 <code>import type</code> 相关联，我们提供来一个新的编译选项：<code>importsNotUsedAsValues</code>，通过它可以来控制没被使用的导入语句将会被如何处理，它的名字是暂定的，但是它提供来三个不同的选项。</p><ul><li><code>remove</code>，这是现在的行为 —— 丢弃这些导入语句。这仍然是默认行为，没有破坏性的更改</li><li><code>preserve</code>，它将会保留所有的语句，即使是从来没有被使用。它可以保留副作用</li><li><code>error</code>，它将会保留所有的导入（与 <code>preserve</code> 选项相同）语句，但是当一个值的导入仅仅用于类型时将会抛出错误。如果你想确保没有意外导入任何值，这会是有用的，但是对于副作用，你仍然需要添加额外的导入语法。</li></ul>`,25),d={href:"https://github.com/microsoft/TypeScript/pull/35200",target:"_blank",rel:"noopener noreferrer"},m=s("h2",{id:"ecmascript-私有字段",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ecmascript-私有字段"},[s("span",null,"ECMAScript 私有字段")])],-1),g={href:"https://github.com/tc39/proposal-class-fields/",target:"_blank",rel:"noopener noreferrer"},h=p(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    #name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>#name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> jeremy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jeremy Bearimy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">jeremy<span class="token punctuation">.</span>#name</span>
<span class="line"><span class="token comment">//     ~~~~~</span></span>
<span class="line"><span class="token comment">// Property &#39;#name&#39; is not accessible outside class &#39;Person&#39;</span></span>
<span class="line"><span class="token comment">// because it has a private identifier.</span></span>
<span class="line"></span></code></pre></div><p>不同于正常属性（甚至是使用 <code>private</code> 修饰符声明的属性），私有字段有一些需要记住的规则：</p><ul><li>私有字段使用 <code>#</code> 字符作为开始，通常，我们也把这些称为私有名称。</li><li>每个私有字段的名字，在被包含的类中，都是唯一的</li><li>在 TypeScript 中，像 <code>public</code> 和 <code>private</code> 修饰符不能用于私有字段</li><li>私有字段不能在所包含的类之外访问 —— 即使是对于 JavaScript 使用者来说也是如此。通常，我们把这种称为「hard privacy」。</li></ul><p>除了「hard privacy」，私有字段的另外一个优点是我们先前提到的唯一性。</p><p>正常的属性容易被子类所改写</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span></span>
<span class="line">  foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">cHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span></span>
<span class="line">  foo <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">dHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">D</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// &#39;this.foo&#39; refers to the same property on each instance.</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">cHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;20&#39;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">dHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;20&#39;</span></span>
<span class="line"></span></code></pre></div><p>使用私有字段时，你完全不必对此担心，因为每个私有字段，在所包含的类中，都是唯一的</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span></span>
<span class="line">    #foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">cHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#foo<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span></span>
<span class="line">    #foo <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">dHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#foo<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">D</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// &#39;this.#foo&#39; refers to a different field within each class.</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">cHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;10&#39;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">dHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;20&#39;</span></span>
<span class="line"></span></code></pre></div><p>另外有一个值得注意的地方，访问一个有其他类型的私有字段，都将导致 <code>TypeError</code>。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span></span>
<span class="line">    #sideLength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span>sideLength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>#sideLength <span class="token operator">=</span> sideLength<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#sideLength <span class="token operator">===</span> other<span class="token punctuation">.</span>#sideLength<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> sideLength<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Boom!</span></span>
<span class="line"><span class="token comment">// TypeError: attempted to get private field on non-instance</span></span>
<span class="line"><span class="token comment">// This fails because &#39;b&#39; is not an instance of &#39;Square&#39;.</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>对于类属性来说，JavaScript 总是允许使用者访问没被声明的属性，而 TypeScript 需要使用者在访问之前先定义声明。使用私有字段时，无论时 <code>.js</code> 文件还是 <code>.ts</code>，都需要先声明。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/** @type {number} */</span></span>
<span class="line">    #foo<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span>foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// This works.</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>#foo <span class="token operator">=</span> foo<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,12),y={href:"https://github.com/Microsoft/TypeScript/pull/30829",target:"_blank",rel:"noopener noreferrer"},f=p(`<h3 id="该使用哪个" tabindex="-1"><a class="header-anchor" href="#该使用哪个"><span>该使用哪个？</span></a></h3><p>我们已经收到很多关于「我该使用 <code>private</code> 关键字，还是使用 ECMAScript 提供的私有字段 <code>#</code> 了？」这类的问题。</p><p>像所有其他好的问题一样，答案总是令人遗憾的：它取决你。</p><p>在属性方面，TypeScript <code>private</code> 修饰符在编译后将会被删除 —— 因此，尽管有数据存在，但是在输出的 JavaScript 代码中没有关于该属性声明的任何编码。在运行时，它的行为就像一个普通的属性。当你使用 <code>private</code> 关键字时，私有属性的有关行为只会出现在编译阶段/设计阶段，而对于 JavaScript 消费者来说，则是完全无感知的。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This is an error at compile time,</span></span>
<span class="line"><span class="token comment">// but when TypeScript outputs .js files,</span></span>
<span class="line"><span class="token comment">// it&#39;ll run fine and print &#39;10&#39;.</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;10&#39;</span></span>
<span class="line"><span class="token comment">//                  ~~~</span></span>
<span class="line"><span class="token comment">// error! Property &#39;foo&#39; is private and only accessible within class &#39;C&#39;.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// TypeScript allows this at compile-time</span></span>
<span class="line"><span class="token comment">// as a &quot;work-around&quot; to avoid the error.</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;10&#39;</span></span>
<span class="line"></span></code></pre></div><p>另一方面，ECMAScript 私有属性无法在类之外访问。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span></span>
<span class="line">    #foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>#foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError</span></span>
<span class="line"><span class="token comment">//                  ~~~~</span></span>
<span class="line"><span class="token comment">// TypeScript reports an error *and*</span></span>
<span class="line"><span class="token comment">// this won&#39;t work at runtime!</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;#foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints undefined</span></span>
<span class="line"><span class="token comment">//          ~~~~~~~~~~~~~~~</span></span>
<span class="line"><span class="token comment">// TypeScript reports an error under &#39;noImplicitAny&#39;,</span></span>
<span class="line"><span class="token comment">// and this prints &#39;undefined&#39;.</span></span>
<span class="line"></span></code></pre></div><p>「hard privacy」对于确保没有人能使用你的任何内部变量是有用的，如果你是一个库的作者，移除或者重命名一个私有字段不会造成任何重大变化。</p><p>正如上文所述，使用 ECMAScript 的私有字段，创建子类会更容易，因为它们是<strong>真</strong>私有。当使用 ECMAScript 私有字段时，子类无需担心字段名字的冲突。当使用 TypeScript <code>private</code> 属性声明时，使用者仍然需要小心不要覆盖父类中的相同字段。</p><p>最后，还有一些你需要考虑的事情，比如你打算让你的代码在哪运行？当前，TypeScript 只有在编译目标为 ECMAScript 2015（ES6）及其以上时，才能支持该私有字段。因为我们在底层使用 <code>WeakMaps</code> 实现这种方法 —— <code>WeakMaps</code> 并不能以一种不会导致内存泄漏的方式 polyfill。对比而言，TypeScript 的 <code>private</code> 声明属性能在所有的编译目标下正常工作 —— 甚至是 ECMAScript 3。</p><h2 id="export-as-ns-语法" tabindex="-1"><a class="header-anchor" href="#export-as-ns-语法"><span><code>export * as ns</code> 语法</span></a></h2><p>以下方式很常见</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> utilities <span class="token keyword">from</span> <span class="token string">&#39;./utilities.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span> utilities <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>在 ECMAScript 2020 中，添加了一种新的语法来支持该模式：</p><div class="language-TS" data-highlighter="prismjs" data-ext="TS" data-title="TS"><pre class="language-TS"><code><span class="line">export * as utilities from &quot;./utilities.js&quot;;</span>
<span class="line"></span></code></pre></div><p>这是一次 JavaScript 代码质量的改进，TypeScript 3.8 实现了此语法。</p><p>当你的编译目标早于 <code>es2020</code> 时，TypeScript 将会按照第一个代码片段输出内容。</p><h2 id="top-level-await" tabindex="-1"><a class="header-anchor" href="#top-level-await"><span><code>Top-Level await</code></span></a></h2><p>大多数使用 JavaScript 提供 I/O（如 http 请求）的现代环境都是异步的，并且很多现代 API 都返回 <code>Promise</code>。尽管它在使操作无阻塞方面有诸多优点，但是它确实在一些如读取文件或外部内容时，会让人厌烦。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>greeting <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>为了避免使用 <code>Promise</code> 中 <code>.then</code> 的链式操作符，JavaScript 使用者通常会引入 <code>async</code> 函数以使用 <code>await</code>，在定义该函数之后，立即调用该函数。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>为了避免引入 <code>async</code> 函数，我们可以使用一个简便的语法，它在即将到来的 ECMAScript feature 中被称为 <code>top-level await</code>。</p><p>在当前的 JavaScript 中（以及其他具有相似功能的大多数其他语言），<code>await</code> 仅仅只能用于 <code>async</code> 函数内部。然而，使用 <code>top-level await</code> 时，我们可以在一个模块的顶层使用 <code>await</code>。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Make sure we&#39;re a module</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这里有一个细节：<code>top-level await</code> 仅仅只能在一个模块的顶层工作 —— 仅当 TypeScript 发现文件代码中含有 <code>export</code> 或者 <code>import</code> 时，才会认为该文件是一个模块。在一些基础的实践中，你可能需要写下 <code>export {}</code> 作为样板，来确保这种行为。</p><p><code>top-level await</code> 并不会在你可能期望的所有环境下工作。现在，只有在编译目标选项是 <code>es2017</code> 及其以上，<code>top-level await</code> 才能被使用，并且 <code>module</code> 选项必须为 <code>esnext</code> 或者 <code>system</code>。</p>`,27),b={href:"https://github.com/microsoft/TypeScript/pull/35813",target:"_blank",rel:"noopener noreferrer"},w=p(`<h2 id="jsdoc-属性修饰符" tabindex="-1"><a class="header-anchor" href="#jsdoc-属性修饰符"><span>JSDoc 属性修饰符</span></a></h2><p>TypeScript 3.8 通过打开 <code>allowJs</code> 选项，能支持 JavaScript 文件，并且当使用 <code>checkJs</code> 选项或者在你的 <code>.js</code> 文件顶部中添加 <code>// @ts-check</code> 注释时，TypeScript 能对这些 <code>.js</code> 文件进行类型检查。</p><p>由于 JavaScript 文件没有专用的语法来进行类型检查，因此 TypeScript 选择利用 JSDoc。TypeScript 3.8 能理解一些新的 JSDoc 属性标签。</p><p>首先是所有的访问修饰符：<code>@public</code>、<code>@private</code>、<code>@protected</code>。这些标签的工作方式与 TypeScript 中 <code>public</code>、<code>private</code>、<code>protected</code> 相同。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/** <span class="token keyword">@private</span> */</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>stuff <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">printStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuff<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stuff<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//        ~~~~~</span></span>
<span class="line"><span class="token comment">// error! Property &#39;stuff&#39; is private and only accessible within class &#39;Foo&#39;.</span></span>
<span class="line"></span></code></pre></div><ul><li><code>@public</code> 是默认的，可以省略，它代表了一个属性可以从任何地方访问它</li><li><code>@private</code> 表示一个属性只能在包含的类中访问</li><li><code>@protected</code> 表示该属性只能在所包含的类及子类中访问，但不能在类的实例中访问</li></ul><p>下一步，我们计划添加 <code>@readonly</code> 修饰符，来确保一个属性只能在初始化时被修改：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/** @readonly */</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>stuff <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">writeToStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>stuff <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//   ~~~~~</span></span>
<span class="line">    <span class="token comment">// Cannot assign to &#39;stuff&#39; because it is a read-only property.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stuff<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//        ~~~~~</span></span>
<span class="line"><span class="token comment">// Cannot assign to &#39;stuff&#39; because it is a read-only property.</span></span>
<span class="line"></span></code></pre></div><h2 id="watchoptions" tabindex="-1"><a class="header-anchor" href="#watchoptions"><span>watchOptions</span></a></h2>`,9),v=s("code",null,"--watch",-1),S={href:"https://nodejs.org/api/fs.html#fs_fs_watchfile_filename_options_listener",target:"_blank",rel:"noopener noreferrer"},T={href:"https://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>这一直是个难题，因为 TypeScript 需要在更多平台上运行，而不仅仅是 Node.js。并且需要考虑到避免依赖模块完全独立。这尤其适用于对 Node.js 原生模块有依赖的模块。</p><p>由于每个项目在不同的策略下都可能更好的工作，TypeScript 3.8 在 <code>tsconfig.json</code> 和 <code>jsconfig.json</code> 中添加了一个新的 <code>watchOptions</code> 字段，它可以让使用者告诉编译器/语言服务，应该使用哪种监听策略来跟踪文件或目录。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Some typical compiler options</span></span>
<span class="line">    <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2020&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// NEW: Options for file/directory watching</span></span>
<span class="line">    <span class="token string-property property">&quot;watchOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Use native file system events for files and directories</span></span>
<span class="line">        <span class="token string-property property">&quot;watchFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;useFsEvents&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;watchDirectory&quot;</span><span class="token operator">:</span> <span class="token string">&quot;useFsEvents&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Poll files for updates more frequently</span></span>
<span class="line">        <span class="token comment">// when they&#39;re updated a lot.</span></span>
<span class="line">        <span class="token string-property property">&quot;fallbackPolling&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dynamicPriority&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><code>watchOptions</code> 包含四种新的选项</p>`,4),x=s("code",null,"watchFile",-1),j=s("li",null,[s("code",null,"fixedPollingInterval"),n("，以固定的时间间隔，检查文件的更改")],-1),q=s("code",null,"priorityPollingInterval",-1),C={href:"https://zh.wikipedia.org/wiki/%E5%90%AF%E5%8F%91%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},E=s("li",null,[s("code",null,"dynamicPriorityPolling"),n("，使用动态队列，在该队列中，较少检查不经常修改的文件")],-1),P=s("li",null,[s("code",null,"useFsEvents"),n("（默认），尝试使用操作系统/文件系统原生事件来监听文件更改")],-1),A=s("li",null,[s("code",null,"useFsEventsOnParentDirectory"),n("，尝试使用操作系统/文件系统原生事件来监听文件、目录的更改，这样可以使用较小的文件监听程序，但是准确性可能较低")],-1),J=p("<li><code>watchDirectory</code>，在缺少递归文件监听功能的系统中，使用哪种策略监听整个目录树，它可以有以下值 <ul><li><code>fixedPollingInterval</code>，以固定的时间间隔，检查目录树的更改</li><li><code>dynamicPriorityPolling</code>，使用动态队列，在该队列中，较少检查不经常修改的目录</li><li><code>useFsEvents</code>（默认），尝试使用操作系统/文件系统原生事件来监听目录更改</li></ul></li><li><code>fallbackPolling</code>，当使用文件系统的事件，该选项用来指定使用特定策略，它可以有以下值 <ul><li><code>fixedPollingInterval</code>，同上</li><li><code>priorityPollingInterval</code>，同上</li><li><code>dynamicPriorityPolling</code>，同上</li></ul></li><li><code>synchronousWatchDirectory</code>，在目录上禁用延迟监听功能。在可能一次发生大量文件（如 node_modules）更改时，它非常有用，但是你可能需要一些不太常见的设置时，禁用它。</li>",3),M=p(`<h2 id="快速和宽松-的增量检查" tabindex="-1"><a class="header-anchor" href="#快速和宽松-的增量检查"><span>“快速和宽松”的增量检查</span></a></h2><p>TypeScript 3.8 带来了一种新的变异选项 —— <code>assumeChangesOnlyAffectDirectDependencies</code>。当该选项开启时，TypeScript 将不会重新检查/构建可能受影响的文件，仅仅重新检查/构建已更改的文件和直接导入它们的文件。</p><p>例如：<code>fileD.ts</code> 导入 <code>fileC.ts</code>，<code>fileC.ts</code> 导入 <code>fileB.ts</code>，<code>fileB.ts</code> 导入 <code>fileA.ts</code> 文件。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">fileA<span class="token punctuation">.</span>ts <span class="token operator">&lt;</span> <span class="token operator">-</span>fileB<span class="token punctuation">.</span>ts <span class="token operator">&lt;</span> <span class="token operator">-</span>fileC<span class="token punctuation">.</span>ts <span class="token operator">&lt;</span> <span class="token operator">-</span>fileD<span class="token punctuation">.</span>ts<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>在 <code>--watch</code> 模式下，改变 <code>fileA.ts</code> 文件通常意味着 TypeScript 需要至少重新检查 <code>fileB.ts</code>、<code>fileC.ts</code> 和 <code>fileD.ts</code>，当使用 <code>assumeChangesOnlyAffectDirectDependencies</code> 时，<code>fileA.ts</code> 改变，意味着只需要检查 <code>fileA.ts</code> 和 <code>fileB.ts</code> 即可。</p><p>在类似与 VSCode 的代码库中，使用该编译选项时，某些文件的构建时间从大约 14s 减小到 1s。然而我们并不推荐所有的代码库中都使用该编译选项，你可能对拥有庞大代码库时，延迟提示所有错误更感兴趣（例如一个专用的配置文件 <code>tsconfig.fullbuild.json</code> 或者是 CI 中）。</p>`,6);function F(O,B){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[s("a",u,[n("TypeScript 3.8"),t(a)]),n(" 将会带来了许多特性，其中包含一些新的或即将到来的 ECMAScript 特性、仅仅导入/导出声明语法等。")]),k,s("p",null,[n("对于该特性的更多信息，参考该 "),s("a",d,[n("PR"),t(a)]),n("。")]),m,s("p",null,[n("TypeScript 3.8 支持在 ECMAScript 中处于 "),s("a",g,[n("stage-3"),t(a)]),n(" 中的私有字段。")]),h,s("p",null,[n("更多信息，请查看此 "),s("a",y,[n("PR"),t(a)]),n("。")]),f,s("p",null,[n("更多相关信息，请查看该 "),s("a",b,[n("PR"),t(a)]),n("。")]),w,s("p",null,[n("一直以来，TypeScript 致力于在 "),v,n(" 模式下和编辑器中提供可靠的文件监听功能。尽管在大部分情况下，它都能很好的工作，但是在 Node.js 中，文件监控非常困难，这主要体现在我们的代码逻辑中。在 Node.js 中内置的 API 中，要么占用大量的 CPU 资源，要么不准确（"),s("a",S,[n("fs.watchFile"),t(a)]),n("），甚至它们在各个平台的行为不一致（"),s("a",T,[n("fs.watch"),t(a)]),n("）。除此之外，我们几乎不可能确定哪个 API 会更好的工作，因为它们不仅依赖于平台，还取决于文件所在的文件系统。")]),_,s("ul",null,[s("li",null,[x,n("：监听单个文件的策略，它可以有以下值 "),s("ul",null,[j,s("li",null,[q,n("，以固定的时间间隔，检查文件的更改，但是使用「启发法」（heuristics）检查某些类型的文件的频率比其他文件低。（heuristics 概念可参考 "),s("a",C,[n("wiki"),t(a)]),n("）")]),E,P,A])]),J]),M])}const I=e(i,[["render",F],["__file","typescript-3.8.html.vue"]]),N=JSON.parse('{"path":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8","lang":"zh-CN","frontmatter":{"description":"TypeScript 3.8 TypeScript 3.8 将会带来了许多特性，其中包含一些新的或即将到来的 ECMAScript 特性、仅仅导入/导出声明语法等。 仅仅导入/导出声明 为了能让我们导入类型，TypeScript 重用了 JavaScript 导入语法。例如在下面的这个例子中，我们确保 JavaScript 的值 doThing 以及 ...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/new/typescript-3.8.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"TypeScript 3.8"}],["meta",{"property":"og:description","content":"TypeScript 3.8 TypeScript 3.8 将会带来了许多特性，其中包含一些新的或即将到来的 ECMAScript 特性、仅仅导入/导出声明语法等。 仅仅导入/导出声明 为了能让我们导入类型，TypeScript 重用了 JavaScript 导入语法。例如在下面的这个例子中，我们确保 JavaScript 的值 doThing 以及 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-07-01T09:35:00.000Z"}],["meta",{"property":"article:modified_time","content":"2020-07-01T09:35:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript 3.8\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-07-01T09:35:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"仅仅导入/导出声明","slug":"仅仅导入-导出声明","link":"#仅仅导入-导出声明","children":[]},{"level":2,"title":"ECMAScript 私有字段","slug":"ecmascript-私有字段","link":"#ecmascript-私有字段","children":[{"level":3,"title":"该使用哪个？","slug":"该使用哪个","link":"#该使用哪个","children":[]}]},{"level":2,"title":"export * as ns 语法","slug":"export-as-ns-语法","link":"#export-as-ns-语法","children":[]},{"level":2,"title":"Top-Level await","slug":"top-level-await","link":"#top-level-await","children":[]},{"level":2,"title":"JSDoc 属性修饰符","slug":"jsdoc-属性修饰符","link":"#jsdoc-属性修饰符","children":[]},{"level":2,"title":"watchOptions","slug":"watchoptions","link":"#watchoptions","children":[]},{"level":2,"title":"“快速和宽松”的增量检查","slug":"快速和宽松-的增量检查","link":"#快速和宽松-的增量检查","children":[]}],"git":{"createdTime":1578819149000,"updatedTime":1593596100000,"contributors":[{"name":"Yates","email":"41691152+DuYueYu@users.noreply.github.com","commits":2},{"name":"Charlie An","email":"1481988258@qq.com","commits":1},{"name":"jkchao","email":"jkchaom@gmail.com","commits":1},{"name":"朱鹏程","email":"309579250@qq.com","commits":1}]},"excerpt":"\\n<p><a href=\\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">TypeScript 3.8</a> 将会带来了许多特性，其中包含一些新的或即将到来的 ECMAScript 特性、仅仅导入/导出声明语法等。</p>\\n<h2>仅仅导入/导出声明</h2>\\n<p>为了能让我们导入类型，TypeScript 重用了 JavaScript 导入语法。例如在下面的这个例子中，我们确保 JavaScript 的值 <code>doThing</code> 以及 TypeScript 类型 <code>Options</code> 一同被导入</p>","autoDesc":true,"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{I as comp,N as data};
