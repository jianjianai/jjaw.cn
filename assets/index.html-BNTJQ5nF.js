import{_ as n,o as s,c as a,a as p}from"./app-CHGq3OoD.js";const t={},e=p(`<h1 id="javascript数组方法" tabindex="-1"><a class="header-anchor" href="#javascript数组方法"><span>JavaScript数组方法</span></a></h1><p>在JavaScript中，数组不仅是存储多个值的基础结构，更是前端开发的核心。它们通过一系列高效的数据处理、搜索和转换的方法。是每位前端开发者必要的基础技能。</p><h2 id="创建和初始化数组" tabindex="-1"><a class="header-anchor" href="#创建和初始化数组"><span>创建和初始化数组</span></a></h2><h3 id="new-array" tabindex="-1"><a class="header-anchor" href="#new-array"><span><code>new Array()</code></span></a></h3><p><code>new Array()</code> 是一个构造函数，用于创建一个新的数组对象。</p><p>创建一个长度为3的空数组:</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>创建一个包含三个元素的数组:</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法 <code>[]</code></span></a></h3><p>语法 <code>[]</code> 是创建数组的另一种更简洁、更常用的方法。</p><p>创建一个空数组:</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>创建一个包含三个元素的数组：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在实际开发中，推荐使用字面量语法 [] 来创建数组，因为它更简单、更直观。</p></div><h2 id="访问和遍历" tabindex="-1"><a class="header-anchor" href="#访问和遍历"><span>访问和遍历</span></a></h2><h3 id="索引访问-array-index" tabindex="-1"><a class="header-anchor" href="#索引访问-array-index"><span>索引访问 <code>array[index]</code></span></a></h3><p>通过索引访问数组元素是最基本的方法。每个数组元素都有一个索引，从0开始。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> firstSite <span class="token operator">=</span> sites<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 访问第一个元素</span></span>
<span class="line"><span class="token keyword">let</span> secondSite <span class="token operator">=</span> sites<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 访问第二个元素</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstSite<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;神奇&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondSite<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;小&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sites<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&#39; - &#39;</span> <span class="token operator">+</span> sites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 输出:</span></span>
<span class="line"><span class="token comment">// 0 - 神奇</span></span>
<span class="line"><span class="token comment">// 1 - 小</span></span>
<span class="line"><span class="token comment">// 2 - 破站</span></span>
<span class="line"></span></code></pre></div><h3 id="增强for" tabindex="-1"><a class="header-anchor" href="#增强for"><span>增强for</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sites<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&#39; - &#39;</span> <span class="token operator">+</span> sites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 输出:</span></span>
<span class="line"><span class="token comment">// 0 - 神奇</span></span>
<span class="line"><span class="token comment">// 1 - 小</span></span>
<span class="line"><span class="token comment">// 2 - 破站</span></span>
<span class="line"></span></code></pre></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span><code>.forEach()</code></span></a></h3><p>.forEach() 方法会对数组的每个元素执行一次提供的函数。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">sites<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">&#39; - &#39;</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 输出:</span></span>
<span class="line"><span class="token comment">// 0 - 神奇</span></span>
<span class="line"><span class="token comment">// 1 - 小</span></span>
<span class="line"><span class="token comment">// 2 - 破站</span></span>
<span class="line"></span></code></pre></div><h2 id="添加和删除元素" tabindex="-1"><a class="header-anchor" href="#添加和删除元素"><span>添加和删除元素</span></a></h2><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push"><span><code>.push()</code></span></a></h3><p><code>.push()</code> 方法用于将一个或多个元素添加到数组的末尾，并返回新的数组长度。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">fruits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;破站&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神奇&#39;, &#39;小&#39;, &#39;破站&#39;]</span></span>
<span class="line"></span></code></pre></div><h3 id="pop" tabindex="-1"><a class="header-anchor" href="#pop"><span><code>.pop()</code></span></a></h3><p><code>.pop()</code> 方法用于删除数组的最后一个元素，并返回被删除的元素。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lastFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神奇&#39;, &#39;小&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastFruit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;破站&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="shift" tabindex="-1"><a class="header-anchor" href="#shift"><span><code>.shift()</code></span></a></h3><p><code>.shift()</code> 方法用于删除数组的第一个元素，并返回被删除的元素。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> firstFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;小&#39;, &#39;破站&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstFruit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;神奇&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="unshift" tabindex="-1"><a class="header-anchor" href="#unshift"><span><code>.unshift()</code></span></a></h3><p><code>.unshift()</code> 方法用于将一个或多个元素添加到数组的开头，并返回新的数组长度。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">fruits<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神奇&#39;, &#39;小&#39;, &#39;破站&#39;]</span></span>
<span class="line"></span></code></pre></div><h3 id="splice" tabindex="-1"><a class="header-anchor" href="#splice"><span><code>.splice()</code></span></a></h3><p><code>.splice()</code> 方法可以删掉数组指定位置的指定个元素或添加元素。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 从索引1开始删除2个元素，然后添加&#39;奇的&#39;和&#39;小破&#39;</span></span>
<span class="line">fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;奇的&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小破&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神&#39;, &#39;奇的&#39;, &#39;小破&#39;, &#39;站&#39;]</span></span>
<span class="line"></span></code></pre></div><p>还可以仅删除元素</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 从索引1开始删除2个元素</span></span>
<span class="line">fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神&#39;, &#39;站&#39;]</span></span>
<span class="line"></span></code></pre></div><p>还可以仅添加元素</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 从索引1开始，删除0个元素，添加&#39;奇&#39;和&#39;小&#39;</span></span>
<span class="line">fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神&#39;, &#39;奇&#39;, &#39;小&#39;, &#39;破&#39;, &#39;站&#39;]</span></span>
<span class="line"></span></code></pre></div><h2 id="复制和合并" tabindex="-1"><a class="header-anchor" href="#复制和合并"><span>复制和合并</span></a></h2><h3 id="slice" tabindex="-1"><a class="header-anchor" href="#slice"><span><code>.slice()</code></span></a></h3><p><code>.slice()</code> 方法返回数组的一个副本，从开始到结束（不包括结束），不会修改原数组。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> slicedSites <span class="token operator">=</span> sites<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引0开始到索引2之前</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>slicedSites<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神奇&#39;, &#39;小&#39;]</span></span>
<span class="line"></span></code></pre></div><h3 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span><code>.concat()</code></span></a></h3><p><code>.concat()</code> 方法用于合并两个或多个数组，不会改变现有的数组，而是返回一个新数组。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> moreSites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> allSites <span class="token operator">=</span> sites<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>moreSites<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合并数组</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allSites<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神奇&#39;, &#39;小&#39;, &#39;破站&#39;]</span></span>
<span class="line"></span></code></pre></div><h2 id="搜索元素" tabindex="-1"><a class="header-anchor" href="#搜索元素"><span>搜索元素</span></a></h2><h3 id="indexof" tabindex="-1"><a class="header-anchor" href="#indexof"><span><code>.indexOf()</code></span></a></h3><p><code>.indexOf()</code> 方法用于搜索数组中某个元素的第一个索引，如果不存在则返回 <code>-1</code>。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> index <span class="token operator">=</span> sites<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;小&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 搜索&#39;小&#39;的第一个索引</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span></span>
<span class="line"></span></code></pre></div><h3 id="lastindexof" tabindex="-1"><a class="header-anchor" href="#lastindexof"><span><code>.lastIndexOf()</code></span></a></h3><p><code>.lastIndexOf()</code> 方法与 <code>.indexOf()</code> 类似，但它返回数组中某个元素的最后一个索引。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lastIndex <span class="token operator">=</span> sites<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;小&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 搜索&#39;小&#39;的最后一个索引</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span></span>
<span class="line"></span></code></pre></div><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find"><span><code>.find()</code></span></a></h3><p><code>.find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值，否则返回 <code>undefined</code>。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> found <span class="token operator">=</span> sites<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> element<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 找到第一个长度大于1的元素</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;神奇&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="findindex" tabindex="-1"><a class="header-anchor" href="#findindex"><span><code>.findIndex()</code></span></a></h3><p><code>.findIndex()</code> 方法返回数组中满足提供的测试函数的第一个元素的索引，否则返回 <code>-1</code>。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> foundIndex <span class="token operator">=</span> sites<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> element<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 找到第一个长度大于1的元素的索引</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foundIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span></span>
<span class="line"></span></code></pre></div><h3 id="includes" tabindex="-1"><a class="header-anchor" href="#includes"><span><code>.includes()</code></span></a></h3><p><code>.includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况返回 <code>true</code> 或 <code>false</code>。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> includesSite <span class="token operator">=</span> sites<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;小&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否包含&#39;小&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>includesSite<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span></span>
<span class="line"></span></code></pre></div><h2 id="筛选和转换" tabindex="-1"><a class="header-anchor" href="#筛选和转换"><span>筛选和转换</span></a></h2><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span><code>.filter()</code></span></a></h3><p><code>.filter()</code> 方法创建一个新数组，包含通过所提供函数实现的测试的所有元素。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> evenNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [2, 4]</span></span>
<span class="line"></span></code></pre></div><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span><code>.map()</code></span></a></h3><p><code>.map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后的返回值。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> squares <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 4, 9, 16]</span></span>
<span class="line"></span></code></pre></div><h2 id="排序和反转" tabindex="-1"><a class="header-anchor" href="#排序和反转"><span>排序和反转</span></a></h2><h3 id="sort" tabindex="-1"><a class="header-anchor" href="#sort"><span><code>.sort()</code></span></a></h3><p><code>.sort()</code> 方法用于对数组的元素进行排序。如果没有指定比较函数，它将默认按照字符串Unicode码点进行排序。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [11, 2, 3, 4, 5]</span></span>
<span class="line"></span></code></pre></div><p>如果需要按照其他标准排序，比如数字大小，可以提供一个比较函数：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [2, 3, 4, 5, 11]</span></span>
<span class="line"></span></code></pre></div><h3 id="reverse" tabindex="-1"><a class="header-anchor" href="#reverse"><span><code>.reverse()</code></span></a></h3><p><code>.reverse()</code> 方法用于反转数组中元素的顺序。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">numbers<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [5, 4, 3, 2, 1]</span></span>
<span class="line"></span></code></pre></div><h2 id="其他常用方法" tabindex="-1"><a class="header-anchor" href="#其他常用方法"><span>其他常用方法</span></a></h2><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span><code>.join()</code></span></a></h3><p><code>.join()</code> 方法将数组中的所有元素连接成一个字符串。你可以指定一个字符串来分隔数组中的每个元素。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用空格作为分隔符</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;神奇 小 破站&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split"><span><code>.split()</code></span></a></h3><p><code>.split()</code> 方法是字符串的方法，它根据提供的分隔符将一个字符串分割成一个字符串数组。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> sentence <span class="token operator">=</span> <span class="token string">&#39;神奇小破站&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> words <span class="token operator">=</span> sentence<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;小&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用&#39;小&#39;作为分隔符</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;神奇&#39;, &#39;破站&#39;]</span></span>
<span class="line"></span></code></pre></div><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span><code>.toString()</code></span></a></h3><p><code>.toString()</code> 方法返回一个表示数组中的元素的字符串。数组中的元素将被逗号分隔。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;神奇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;破站&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;神奇,小,破站&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="tolocalestring" tabindex="-1"><a class="header-anchor" href="#tolocalestring"><span><code>.toLocaleString()</code></span></a></h3><p><code>.toLocaleString()</code> 方法返回一个字符串表示数组中的元素。数组中的元素将被本地化的字符串（如日期或货币）分隔。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1999</span><span class="token punctuation">,</span> <span class="token number">2999</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> localString <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&#39;zh-CN&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token string">&#39;currency&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&#39;CNY&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;￥1,000.00,￥1,999.00,￥2,999.00&#39;</span></span>
<span class="line"></span></code></pre></div>`,99),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/2024/5/26/js-array-method/","title":"JavaScript数组方法 - 前端开发入门","lang":"zh-CN","frontmatter":{"permalinkPattern":"2024/5/26/js-array-method/","title":"JavaScript数组方法 - 前端开发入门","description":"深入了解JavaScript数组及其丰富的操作方法。本教程详细介绍了数组的创建、索引访问、元素修改、元素搜索以及数据转换。无论您是编程新手还是经验丰富的开发者，都能通过本教程快速提升在数据处理和Web开发中的数组操作技能。","star":false,"comment":true,"head":[["meta",{"property":"og:url","content":"https://jjaw.cn/2024/5/26/js-array-method/"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"JavaScript数组方法 - 前端开发入门"}],["meta",{"property":"og:description","content":"深入了解JavaScript数组及其丰富的操作方法。本教程详细介绍了数组的创建、索引访问、元素修改、元素搜索以及数据转换。无论您是编程新手还是经验丰富的开发者，都能通过本教程快速提升在数据处理和Web开发中的数组操作技能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T08:47:36.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T08:47:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript数组方法 - 前端开发入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-07T08:47:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"创建和初始化数组","slug":"创建和初始化数组","link":"#创建和初始化数组","children":[{"level":3,"title":"new Array()","slug":"new-array","link":"#new-array","children":[]},{"level":3,"title":"语法 []","slug":"语法","link":"#语法","children":[]}]},{"level":2,"title":"访问和遍历","slug":"访问和遍历","link":"#访问和遍历","children":[{"level":3,"title":"索引访问 array[index]","slug":"索引访问-array-index","link":"#索引访问-array-index","children":[]},{"level":3,"title":"for循环","slug":"for循环","link":"#for循环","children":[]},{"level":3,"title":"增强for","slug":"增强for","link":"#增强for","children":[]},{"level":3,"title":".forEach()","slug":"foreach","link":"#foreach","children":[]}]},{"level":2,"title":"添加和删除元素","slug":"添加和删除元素","link":"#添加和删除元素","children":[{"level":3,"title":".push()","slug":"push","link":"#push","children":[]},{"level":3,"title":".pop()","slug":"pop","link":"#pop","children":[]},{"level":3,"title":".shift()","slug":"shift","link":"#shift","children":[]},{"level":3,"title":".unshift()","slug":"unshift","link":"#unshift","children":[]},{"level":3,"title":".splice()","slug":"splice","link":"#splice","children":[]}]},{"level":2,"title":"复制和合并","slug":"复制和合并","link":"#复制和合并","children":[{"level":3,"title":".slice()","slug":"slice","link":"#slice","children":[]},{"level":3,"title":".concat()","slug":"concat","link":"#concat","children":[]}]},{"level":2,"title":"搜索元素","slug":"搜索元素","link":"#搜索元素","children":[{"level":3,"title":".indexOf()","slug":"indexof","link":"#indexof","children":[]},{"level":3,"title":".lastIndexOf()","slug":"lastindexof","link":"#lastindexof","children":[]},{"level":3,"title":".find()","slug":"find","link":"#find","children":[]},{"level":3,"title":".findIndex()","slug":"findindex","link":"#findindex","children":[]},{"level":3,"title":".includes()","slug":"includes","link":"#includes","children":[]}]},{"level":2,"title":"筛选和转换","slug":"筛选和转换","link":"#筛选和转换","children":[{"level":3,"title":".filter()","slug":"filter","link":"#filter","children":[]},{"level":3,"title":".map()","slug":"map","link":"#map","children":[]}]},{"level":2,"title":"排序和反转","slug":"排序和反转","link":"#排序和反转","children":[{"level":3,"title":".sort()","slug":"sort","link":"#sort","children":[]},{"level":3,"title":".reverse()","slug":"reverse","link":"#reverse","children":[]}]},{"level":2,"title":"其他常用方法","slug":"其他常用方法","link":"#其他常用方法","children":[{"level":3,"title":".join()","slug":"join","link":"#join","children":[]},{"level":3,"title":".split()","slug":"split","link":"#split","children":[]},{"level":3,"title":".toString()","slug":"tostring","link":"#tostring","children":[]},{"level":3,"title":".toLocaleString()","slug":"tolocalestring","link":"#tolocalestring","children":[]}]}],"git":{"isRoot":true,"createdTime":1716729557000,"updatedTime":1723020456000,"contributors":[{"name":"panpanaw","email":"131033097+panpanaw@users.noreply.github.com","commits":2},{"name":"Iron","email":"131033097+panpanaw@users.noreply.github.com","commits":1},{"name":"jjaw","email":"jjaw@jjaw.cn","commits":1}]},"excerpt":"\\n<p>在JavaScript中，数组不仅是存储多个值的基础结构，更是前端开发的核心。它们通过一系列高效的数据处理、搜索和转换的方法。是每位前端开发者必要的基础技能。</p>\\n<h2>创建和初始化数组</h2>\\n<h3><code>new Array()</code></h3>\\n<p><code>new Array()</code> 是一个构造函数，用于创建一个新的数组对象。</p>\\n<p>创建一个长度为3的空数组:</p>\\n<div class=\\"language-javascript\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">let</span> arr <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","github_edit":{"fileGitUrl":"https://github.com/jianjianai/jjaw.cn/edit/master/articles/9-web教程系列/JavaScript数组方法.md"},"navPage":[{"title":"js系列","link":"#","items":[{"title":"JavaScript正则表达式","link":"/2024/5/26/js-regular-expression/"},{"title":"JavaScript数组方法","link":"/2024/5/26/js-array-method/"},{"title":"JavaScript字符串操作","link":"/2024/5/22/js-string-operation/"},{"title":"JavaScript Set 和 Map","link":"/2024/5/29/js-set-map/"}]}]}');export{r as comp,k as data};
