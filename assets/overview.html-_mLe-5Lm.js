import{_ as c,r as s,o as a,c as r,b as t,e,d as i,w as p,a as l}from"./app-Dix9cm9Q.js";const d={},m=t("h1",{id:"概览",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#概览"},[t("span",null,"概览")])],-1),g={href:"https://github.com/Microsoft/TypeScript/tree/master/src/compiler",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"src/compiler",-1),h=l('<blockquote><p>译注：Typescript Deep Dive 使用的源码应为 2016 年以前的源码。学习时请对照现有的源码</p></blockquote><p>它分为以下几个关键部分：</p><ul><li>Scanner 扫描器（<code>scanner.ts</code>）</li><li>Parser 解析器（<code>parser.ts</code>）</li><li>Binder 绑定器（<code>binder.ts</code>）</li><li>Checker 检查器（<code>checker.ts</code>）</li><li>Emitter 发射器（<code>emitter.ts</code>）</li></ul><p>每个部分在源文件中均有独立文件，本章稍后会对这些部分做解释。</p><h3 id="byots" tabindex="-1"><a class="header-anchor" href="#byots"><span>BYOTS</span></a></h3>',5),b={href:"https://github.com/basarat/byots",target:"_blank",rel:"noopener noreferrer"},y=l(`<h3 id="语法和语义" tabindex="-1"><a class="header-anchor" href="#语法和语义"><span>语法和语义</span></a></h3><p><em>语法</em>正确并不意味着<em>语义</em>上也正确。下面的 TypeScript 代码，语法合法，但是语义却不正确</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">var</span> foo<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token string">&#39;not a number&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><code>语义</code> 从自然语言角度意味着有意义，理解这个概念对你很有用。</p><h3 id="处理概览" tabindex="-1"><a class="header-anchor" href="#处理概览"><span>处理概览</span></a></h3><p>以下演示简单说明 TypeScript 编译器如何将上述几个关键部分组合在一起：</p><div class="language-code" data-highlighter="prismjs" data-ext="code" data-title="code"><pre class="language-code"><code><span class="line">SourceCode（源码） ~~ 扫描器 ~~&gt; Token 流</span>
<span class="line"></span></code></pre></div><div class="language-code" data-highlighter="prismjs" data-ext="code" data-title="code"><pre class="language-code"><code><span class="line">Token 流 ~~ 解析器 ~~&gt; AST（抽象语法树）</span>
<span class="line"></span></code></pre></div><div class="language-code" data-highlighter="prismjs" data-ext="code" data-title="code"><pre class="language-code"><code><span class="line">AST ~~ 绑定器 ~~&gt; Symbols（符号）</span>
<span class="line"></span></code></pre></div><p>符号（<code>Symbol</code>）是 TypeScript <em>语义</em>系统的主要构造块。如上所示，符号是绑定的结果。符号将 AST 中的声明节点与相同实体的其他声明相连。</p><p>符号和 AST 是检查器用来验证源代码<em>语义</em>的</p><div class="language-code" data-highlighter="prismjs" data-ext="code" data-title="code"><pre class="language-code"><code><span class="line">AST + 符号 ~~ 检查器 ~~&gt; 类型验证</span>
<span class="line"></span></code></pre></div><p>最后，需要输出 JavaScript 时：</p><div class="language-code" data-highlighter="prismjs" data-ext="code" data-title="code"><pre class="language-code"><code><span class="line">AST + 检查器 ~~ 发射器 ~~&gt; JavaScript 代码</span>
<span class="line"></span></code></pre></div><p>TypeScript 编译器中还有一些其他文件，为我们接下来介绍的很多关键部分提供实用工具。</p><h2 id="文件-utilities" tabindex="-1"><a class="header-anchor" href="#文件-utilities"><span>文件：Utilities</span></a></h2><p><code>core.ts</code> ：TypeScript 编译器使用的核心工具集，重要的有：</p><ul><li><code>let objectAllocator: ObjectAllocator</code> 是一个定义为全局单例的变量。提供以下定义： <ul><li><code>getNodeConstructor</code>（节点会在解析器 / AST 中介绍）</li><li><code>getSymbolConstructor</code>（符号会在绑定器中介绍）</li><li><code>getTypeConstructor</code>（类型会在检查器中介绍）</li><li><code>getSignatureConstructor</code>（签名是索引，调用和构造签名）</li></ul></li></ul><h2 id="文件-关键数据结构" tabindex="-1"><a class="header-anchor" href="#文件-关键数据结构"><span>文件：关键数据结构</span></a></h2><p><code>types.ts</code> 包含整个编译器中使用的关键数据结构和接口，这里列出一些关键部分：</p><ul><li><code>SyntaxKind</code> AST 节点类型通过 <code>SyntaxKind</code> 枚举进行识别</li><li><code>TypeChecker</code> 类型检查器提供此接口</li><li><code>CompilerHost</code> 用于程序（<code>Program</code>）和系统之间的交互</li><li><code>Node</code> AST 节点</li></ul><h2 id="文件-系统" tabindex="-1"><a class="header-anchor" href="#文件-系统"><span>文件：系统</span></a></h2><p><code>system.ts</code>，TypeScript 编译器与操作系统的所有交互均通过 <code>System</code> 接口进行。接口及其实现（<code>WScript</code> 和 <code>Node</code>） 均定义在 <code>system.ts</code> 中。你可以将其视为<em>操作环境（OE, Operating Environment）</em>。</p>`,23),u=t("code",null,"Program",-1);function S(T,f){const o=s("ExternalLinkIcon"),n=s("RouteLink");return a(),r("div",null,[m,t("p",null,[e("TypeScript 编译器源文件位于 "),t("a",g,[k,i(o)]),e(" 目录下")]),h,t("p",null,[e("我们有个名为 "),t("a",b,[e("Bring Your Own TypeScript (BYOTS)"),i(o)]),e(" 的项目，通过暴露内部接口让编译器 API 使用起来更简单。你可以在全局范围上暴露你 TypeScript 应用的本地变量。")]),y,t("p",null,[e("现在对主要文件有一个整体了解了，我们继续介绍程序（"),i(n,{to:"/git/ts-book/docs/compiler/program.html"},{default:p(()=>[u]),_:1}),e("）的概念")])])}const _=c(d,[["render",S],["__file","overview.html.vue"]]),x=JSON.parse('{"path":"/git/ts-book/docs/compiler/overview.html","title":"概览","lang":"zh-CN","frontmatter":{"description":"概览 TypeScript 编译器源文件位于 src/compiler 目录下 译注：Typescript Deep Dive 使用的源码应为 2016 年以前的源码。学习时请对照现有的源码 它分为以下几个关键部分： Scanner 扫描器（scanner.ts） Parser 解析器（parser.ts） Binder 绑定器（binder.ts） ...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/compiler/overview.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"概览"}],["meta",{"property":"og:description","content":"概览 TypeScript 编译器源文件位于 src/compiler 目录下 译注：Typescript Deep Dive 使用的源码应为 2016 年以前的源码。学习时请对照现有的源码 它分为以下几个关键部分： Scanner 扫描器（scanner.ts） Parser 解析器（parser.ts） Binder 绑定器（binder.ts） ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-05-15T14:05:28.000Z"}],["meta",{"property":"article:modified_time","content":"2020-05-15T14:05:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概览\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-05-15T14:05:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"BYOTS","slug":"byots","link":"#byots","children":[]},{"level":3,"title":"语法和语义","slug":"语法和语义","link":"#语法和语义","children":[]},{"level":3,"title":"处理概览","slug":"处理概览","link":"#处理概览","children":[]},{"level":2,"title":"文件：Utilities","slug":"文件-utilities","link":"#文件-utilities","children":[]},{"level":2,"title":"文件：关键数据结构","slug":"文件-关键数据结构","link":"#文件-关键数据结构","children":[]},{"level":2,"title":"文件：系统","slug":"文件-系统","link":"#文件-系统","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1537098059000,"updatedTime":1589551528000,"contributors":[{"name":"hopalay","email":"hopalay@qq.com","commits":3},{"name":"AllenLee","email":"648384410li@gmail.com","commits":1},{"name":"jkchao","email":"jkchaom@gmail.com","commits":1}]},"excerpt":"\\n<p>TypeScript 编译器源文件位于 <a href=\\"https://github.com/Microsoft/TypeScript/tree/master/src/compiler\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>src/compiler</code></a> 目录下</p>\\n<blockquote>\\n<p>译注：Typescript Deep Dive 使用的源码应为 2016 年以前的源码。学习时请对照现有的源码</p>\\n</blockquote>\\n<p>它分为以下几个关键部分：</p>\\n<ul>\\n<li>Scanner 扫描器（<code>scanner.ts</code>）</li>\\n<li>Parser 解析器（<code>parser.ts</code>）</li>\\n<li>Binder 绑定器（<code>binder.ts</code>）</li>\\n<li>Checker 检查器（<code>checker.ts</code>）</li>\\n<li>Emitter 发射器（<code>emitter.ts</code>）</li>\\n</ul>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/compiler/overview.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{_ as comp,x as data};
