import{_ as t,o as s,c as o,a as e}from"./app-9h4tjtpM.js";const i={},n=e(`<h1 id="export-default-被认为是有害的" tabindex="-1"><a class="header-anchor" href="#export-default-被认为是有害的"><span><code>export default</code> 被认为是有害的</span></a></h1><p>假如你有一个包含以下内容的 <code>foo.ts</code> 文件：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> Foo<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>你可能会使用 ES6 语法导入它（在 <code>bar.ts</code> 里）：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这存在一些可维护性的问题：</p><ul><li>如果你在 <code>foo.ts</code> 里重构 <code>Foo</code>，在 <code>bar.ts</code> 文件中，它将不会被重新命名；</li><li>如果你最终需要从 <code>foo.ts</code> 文件中导出更多有用的信息（在你的很多文件中都存在这种情景），那么你必须兼顾导入语法。</li></ul><p>由于这些原因，我推荐在导入时使用简单的 <code>export</code> 与解构的形式，如 <code>foo.ts</code>：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>接着：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Foo&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>下面，我将会介绍更多的原因。</p><h2 id="可发现性差" tabindex="-1"><a class="header-anchor" href="#可发现性差"><span>可发现性差</span></a></h2><p>默认导出的可发现性非常差，你不能智能的辨别一个模块它是否有默认导出。</p><p>在使用默认导出时，你什么也没有得到（可能它有默认导出，可能它没有）。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token comment">/* here */</span> <span class="token keyword">from</span> <span class="token string">&#39;something&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>没有默认导出，你可以用以下方式获取智能提示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token comment">/* here */</span> <span class="token string">&#39;something&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="自动完成" tabindex="-1"><a class="header-anchor" href="#自动完成"><span>自动完成</span></a></h2><p>不管你是否了解导出，你都可以在 <code>import { /* here */ } from &#39;./foo&#39;</code> 的 <code>here</code> 位置，来了解导出模块的信息。</p><h2 id="commonjs-互用" tabindex="-1"><a class="header-anchor" href="#commonjs-互用"><span>CommonJS 互用</span></a></h2><p>对于必须使用 <code>const { default } = require(&#39;module/foo&#39;)</code> 而不是 <code>const { Foo } = require(&#39;module/foo&#39;)</code> 的 CommonJS 的用户来说，这会是一个糟糕的体验。当你导入一个模块时，你很可能想重命名 <code>default</code> 作为导入的名字。</p><h2 id="防止拼写错误" tabindex="-1"><a class="header-anchor" href="#防止拼写错误"><span>防止拼写错误</span></a></h2><p>当你在开发时使用 <code>import Foo from &#39;./foo&#39;</code> 时，并不会得到有关于拼写的任何错误，其他人可能会这么写 <code>import foo from &#39;./foo&#39;</code>；</p><h2 id="再次导出" tabindex="-1"><a class="header-anchor" href="#再次导出"><span>再次导出</span></a></h2><p>再次导出是没必要的，但是在 <code>npm</code> 包的根文件 <code>index</code> 却是很常见。如：<code>import Foo from &#39;./foo&#39;；export { Foo }</code>（默认导出）VS <code>export * from &#39;./foo&#39;</code> （命名导出）。</p><h2 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入"><span>动态导入</span></a></h2><p>在动态的 <code>import</code> 中，默认导出会以 <code>default</code> 的名字暴露自己，如：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> HighChart <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;https://code.highcharts.com/js/es-modules/masters/highcharts.src.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">HighChart<span class="token punctuation">.</span>default<span class="token punctuation">.</span><span class="token function">chart</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Notice \`.default\`</span></span>
<span class="line"></span></code></pre></div>`,29),a=[n];function l(p,c){return s(),o("div",null,a)}const d=t(i,[["render",l],["__file","avoidExportDefault.html.vue"]]),k=JSON.parse('{"path":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的","lang":"zh-CN","frontmatter":{"description":"export default 被认为是有害的 假如你有一个包含以下内容的 foo.ts 文件： 你可能会使用 ES6 语法导入它（在 bar.ts 里）： 这存在一些可维护性的问题： 如果你在 foo.ts 里重构 Foo，在 bar.ts 文件中，它将不会被重新命名； 如果你最终需要从 foo.ts 文件中导出更多有用的信息（在你的很多文件中都存在这...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/tips/avoidExportDefault.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"export default 被认为是有害的"}],["meta",{"property":"og:description","content":"export default 被认为是有害的 假如你有一个包含以下内容的 foo.ts 文件： 你可能会使用 ES6 语法导入它（在 bar.ts 里）： 这存在一些可维护性的问题： 如果你在 foo.ts 里重构 Foo，在 bar.ts 文件中，它将不会被重新命名； 如果你最终需要从 foo.ts 文件中导出更多有用的信息（在你的很多文件中都存在这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-03-04T13:32:58.000Z"}],["meta",{"property":"article:modified_time","content":"2020-03-04T13:32:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"export default 被认为是有害的\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-03-04T13:32:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"可发现性差","slug":"可发现性差","link":"#可发现性差","children":[]},{"level":2,"title":"自动完成","slug":"自动完成","link":"#自动完成","children":[]},{"level":2,"title":"CommonJS 互用","slug":"commonjs-互用","link":"#commonjs-互用","children":[]},{"level":2,"title":"防止拼写错误","slug":"防止拼写错误","link":"#防止拼写错误","children":[]},{"level":2,"title":"再次导出","slug":"再次导出","link":"#再次导出","children":[]},{"level":2,"title":"动态导入","slug":"动态导入","link":"#动态导入","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1536018965000,"updatedTime":1583328778000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":3},{"name":"Xu Jihan","email":"xutoto@outlook.com","commits":1},{"name":"Yates","email":"41691152+DuYueYu@users.noreply.github.com","commits":1},{"name":"萤火之未","email":"wangjianzhong1990@gmail.com","commits":1}]},"excerpt":"\\n<p>假如你有一个包含以下内容的 <code>foo.ts</code> 文件：</p>\\n<div class=\\"language-typescript\\" data-highlighter=\\"prismjs\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Foo</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> Foo<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/tips/avoidExportDefault.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{d as comp,k as data};
