import{_ as e,r as o,o as c,c as l,b as s,e as n,d as t,a as p}from"./app-D0VI1FnG.js";const i={},r=s("h1",{id:"infer",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#infer"},[s("span",null,"infer")])],-1),k=s("h2",{id:"介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#介绍"},[s("span",null,"介绍")])],-1),u=s("code",null,"infer",-1),d={href:"https://github.com/Microsoft/TypeScript/pull/21496",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"extends",-1),m=p(`<p>简单示例如下：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ParamType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>在这个条件语句 <code>T extends (arg: infer P) =&gt; any ? P : T</code> 中，<code>infer P</code> 表示待推断的函数参数。</p><p>整句表示为：如果 <code>T</code> 能赋值给 <code>(arg: infer P) =&gt; any</code>，则结果是 <code>(arg: infer P) =&gt; any</code> 类型中的参数 <code>P</code>，否则返回为 <code>T</code>。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Param</span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Param = User</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AA</span></span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span></span>
<span class="line"></span></code></pre></div><h2 id="内置类型" tabindex="-1"><a class="header-anchor" href="#内置类型"><span>内置类型</span></a></h2><p>在 2.8 版本中，TypeScript 内置了一些与 <code>infer</code> 有关的映射类型：</p><ul><li><p>用于提取函数类型的返回值类型：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">P</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>相比于文章开始给出的示例，<code>ReturnType&lt;T&gt;</code> 只是将 <code>infer P</code> 从参数位置移动到返回值位置，因此此时 <code>P</code> 即是表示待推断的返回值类型。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> User<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Test = User</span></span>
<span class="line"></span></code></pre></div></li><li><p>用于提取构造函数中参数（实例）类型：</p><p>一个构造函数可以使用 <code>new</code> 来实例化，因此它的类型通常表示如下：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>当 <code>infer</code> 用于构造函数类型中，可用于参数位置 <code>new (...args: infer P) =&gt; any;</code> 和返回值位置 <code>new (...args: any[]) =&gt; infer P;</code>。</p><p>因此就内置如下两个映射类型：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// 获取参数类型</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">P</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取实例类型</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Params</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// [string, number]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Instance</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// TestClass</span></span>
<span class="line"></span></code></pre></div></li></ul><h2 id="一些用例" tabindex="-1"><a class="header-anchor" href="#一些用例"><span>一些用例</span></a></h2><p>至此，相信你已经对 <code>infer</code> 已有基本了解，我们来看看一些使用它的「骚操作」：</p>`,10),y=p(`<p><strong>tuple</strong> 转 <strong>union</strong> ，如：<code>[string, number]</code> -&gt; <code>string | number</code></p><p>解答之前，我们需要了解 tuple 类型在一定条件下，是可以赋值给数组类型：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">TTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TArray</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Res</span> <span class="token operator">=</span> TTuple <span class="token keyword">extends</span> <span class="token class-name">TArray</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ResO</span> <span class="token operator">=</span> TArray <span class="token keyword">extends</span> <span class="token class-name">TTuple</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre></div><p>因此，在配合 <code>infer</code> 时，这很容易做到：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ElementOf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">E</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">E</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ToUnion</span> <span class="token operator">=</span> ElementOf<span class="token operator">&lt;</span>TTuple<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span></span>
<span class="line"></span></code></pre></div>`,5),h={href:"https://stackoverflow.com/questions/44480644/typescript-string-union-to-string-array/45486495#45486495",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">TTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Res</span> <span class="token operator">=</span> TTuple<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span></span>
<span class="line"></span></code></pre></div>`,1),f=s("p",null,[s("strong",null,"union"),n(" 转 "),s("strong",null,"intersection"),n("，如："),s("code",null,"T1 | T2"),n(" -> "),s("code",null,"T1 & T2")],-1),T=s("code",null,"infer",-1),w={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"Wrapped",-1),x=s("code",null,"Array<T>",-1),P=s("code",null,"[T]",-1),U=s("code",null,"Promise<T>",-1),j=s("code",null,"extends",-1),S=s("code",null,"T extends U ? X : Y",-1),A=s("code",null,"T",-1),C=s("code",null,"A | B",-1),R=s("code",null,"A extends U ? X : Y | B extends U ? X : Y",-1),q={href:"https://github.com/Microsoft/TypeScript/pull/21496",target:"_blank",rel:"noopener noreferrer"},M=p(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Bar<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T20</span></span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T21</span></span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// T1 &amp; T2</span></span>
<span class="line"></span></code></pre></div>`,1),I={href:"https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type",target:"_blank",rel:"noopener noreferrer"},E=p(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">T1</span> <span class="token operator">|</span> <span class="token constant">T2</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// T1 &amp; T2</span></span>
<span class="line"></span></code></pre></div><p>当传入 <code>T1 | T2</code> 时：</p><ul><li><p>第一步：<code>(U extends any ? (k: U) =&gt; void : never)</code> 会把 union 拆分成 <code>(T1 extends any ? (k: T1) =&gt; void : never) | (T2 extends any ? (k: T2)=&gt; void : never)</code>，即是得到 <code>(k: T1) =&gt; void | (k: T2) =&gt; void</code>；</p></li><li><p>第二步：<code>(k: T1) =&gt; void | (k: T2) =&gt; void extends ((k: infer I) =&gt; void) ? I : never</code>，根据上文，可以推断出 <code>I</code> 为 <code>T1 &amp; T2</code>。</p></li></ul>`,3),F={href:"https://zhuanlan.zhihu.com/p/58704376",target:"_blank",rel:"noopener noreferrer"},B=s("strong",null,"union",-1),N=s("strong",null,"tuple",-1),X=s("h2",{id:"leetcode-的一道-typescript-面试题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#leetcode-的一道-typescript-面试题"},[s("span",null,"LeetCode 的一道 TypeScript 面试题")])],-1),J={href:"https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md",target:"_blank",rel:"noopener noreferrer"},L=p(`<p>假设有一个这样的类型（原题中给出的是类，这里简化为 interface）：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span></span>
<span class="line">  count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token generic-function"><span class="token function">asyncMethod</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token generic-function"><span class="token function">syncMethod</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>action<span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>在经过 <code>Connect</code> 函数之后，返回值类型为</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token generic-function"><span class="token function">asyncMethod</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token generic-function"><span class="token function">syncMethod</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>其中 <code>Action&lt;T&gt;</code> 的定义为：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这里主要考察两点</p><ul><li>挑选出函数</li><li>此篇文章所提及的 <code>infer</code></li></ul>`,8),z={href:"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html",target:"_blank",rel:"noopener noreferrer"},D=p(`<div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FuncName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Connect</span> <span class="token operator">=</span> <span class="token punctuation">(</span>module<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">T</span> <span class="token keyword">in</span> FuncName<span class="token operator">&lt;</span>Module<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> Module<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * type Connect = (module: Module) =&gt; {</span>
<span class="line"> *   asyncMethod: &lt;T, U&gt;(input: Promise&lt;T&gt;) =&gt; Promise&lt;Action&lt;U&gt;&gt;;</span>
<span class="line"> *   syncMethod: &lt;T, U&gt;(action: Action&lt;T&gt;) =&gt; Action&lt;U&gt;;</span>
<span class="line"> * }</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre></div><p>接下来就比较简单了，主要是利用条件类型 + <code>infer</code>，如果函数可以赋值给 <code>asyncMethod&lt;T, U&gt;(input: Promise&lt;T&gt;): Promise&lt;Action&lt;U&gt;&gt;</code>，则取值为 <code>asyncMethod&lt;T, U&gt;(input: T): Action&lt;U&gt;</code>。具体答案就不给出了，感兴趣的小伙伴可以尝试一下。</p>`,2);function O(V,G){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,k,s("p",null,[u,n(" 最早出现在此 "),s("a",d,[n("PR"),t(a)]),n(" 中，表示在 "),g,n(" 条件语句中待推断的类型变量。")]),m,s("ul",null,[s("li",null,[y,s("p",null,[n("在 "),s("a",h,[n("stackoverflow"),t(a)]),n(" 上看到另一种解法，比较简（牛）单（逼）：")]),b]),s("li",null,[f,s("p",null,[n("这个可能要稍微麻烦一点，需要 "),T,n(" 配合「 "),s("a",w,[n("Distributive conditional types"),t(a)]),n(" 」使用。")]),s("p",null,[n("在"),s("a",v,[n("相关链接"),t(a)]),n("中，我们可以了解到「Distributive conditional types」是由「naked type parameter」构成的条件类型。而「naked type parameter」表示没有被 "),_,n(" 的类型（如："),x,n("、"),P,n("、"),U,n(" 等都是不是「naked type parameter」）。「Distributive conditional types」主要用于拆分 "),j,n(" 左边部分的联合类型，举个例子：在条件类型 "),S,n(" 中，当 "),A,n(" 是 "),C,n(" 时，会拆分成 "),R,n("；")]),s("p",null,[n("有了这个前提，再利用在逆变位置上，"),s("a",q,[n("同一类型变量的多个候选类型将会被推断为交叉类型"),t(a)]),n("的特性，即")]),M,s("p",null,[n("因此，综合以上几点，我们可以得到在 "),s("a",I,[n("stackoverflow"),t(a)]),n(" 上的一个答案：")]),E])]),s("p",null,[n("当然，你可以玩出更多花样，比如 "),s("a",F,[B,n(" 转 "),N,t(a)]),n("。")]),X,s("p",null,[n("前段时间，在 "),s("a",J,[n("GitHub"),t(a)]),n(" 上，发现一道来自 LeetCode TypeScript 的面试题，比较有意思，题目的大致意思是：")]),L,s("p",null,[n("挑选函数的方法，已经在 "),s("a",z,[n("handbook"),t(a)]),n(" 中已经给出，只需判断 value 能赋值给 Function 就行了：")]),D])}const Z=e(i,[["render",O],["__file","infer.html.vue"]]),H=JSON.parse('{"path":"/git/ts-book/docs/tips/infer.html","title":"infer","lang":"zh-CN","frontmatter":{"description":"infer 介绍 infer 最早出现在此 PR 中，表示在 extends 条件语句中待推断的类型变量。 简单示例如下： 在这个条件语句 T extends (arg: infer P) => any ? P : T 中，infer P 表示待推断的函数参数。 整句表示为：如果 T 能赋值给 (arg: infer P) => any，则结果是 (a...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/tips/infer.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"infer"}],["meta",{"property":"og:description","content":"infer 介绍 infer 最早出现在此 PR 中，表示在 extends 条件语句中待推断的类型变量。 简单示例如下： 在这个条件语句 T extends (arg: infer P) => any ? P : T 中，infer P 表示待推断的函数参数。 整句表示为：如果 T 能赋值给 (arg: infer P) => any，则结果是 (a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-30T12:30:48.000Z"}],["meta",{"property":"article:modified_time","content":"2022-06-30T12:30:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"infer\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-06-30T12:30:48.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"内置类型","slug":"内置类型","link":"#内置类型","children":[]},{"level":2,"title":"一些用例","slug":"一些用例","link":"#一些用例","children":[]},{"level":2,"title":"LeetCode 的一道 TypeScript 面试题","slug":"leetcode-的一道-typescript-面试题","link":"#leetcode-的一道-typescript-面试题","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1553477909000,"updatedTime":1656592248000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":3},{"name":"AlexRen","email":"38367160+AlexRen94@users.noreply.github.com","commits":1},{"name":"Kerminate","email":"kepeilin@outlook.com","commits":1},{"name":"Suyan","email":"suyanhanx@gmail.com","commits":1},{"name":"b-ye","email":"yepbug@qq.com","commits":1},{"name":"chun shang","email":"springuper@gmail.com","commits":1},{"name":"haoLingLing","email":"8580508@gmail.com","commits":1},{"name":"月迷津渡","email":"CodeDaraW@gmail.com","commits":1}]},"excerpt":"\\n<h2>介绍</h2>\\n<p><code>infer</code> 最早出现在此 <a href=\\"https://github.com/Microsoft/TypeScript/pull/21496\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">PR</a> 中，表示在 <code>extends</code> 条件语句中待推断的类型变量。</p>\\n<p>简单示例如下：</p>\\n<div class=\\"language-typescript\\" data-highlighter=\\"prismjs\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">ParamType<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">T</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token punctuation\\">(</span>arg<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">infer</span> <span class=\\"token constant\\">P</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token builtin\\">any</span> <span class=\\"token operator\\">?</span> <span class=\\"token constant\\">P</span> <span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/tips/infer.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{Z as comp,H as data};
