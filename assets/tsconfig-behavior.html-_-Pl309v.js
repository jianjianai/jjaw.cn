import{_ as t,o as e,c as i,a as o}from"./app-DHlauKQu.js";const s={},l=o('<h1 id="tsconfig-json-的行为" tabindex="-1"><a class="header-anchor" href="#tsconfig-json-的行为"><span><code>tsconfig.json</code> 的行为</span></a></h1><h2 id="为什么把一个文件放入「exclude」选项中-它仍然会被编译器选中" tabindex="-1"><a class="header-anchor" href="#为什么把一个文件放入「exclude」选项中-它仍然会被编译器选中"><span>为什么把一个文件放入「exclude」选项中，它仍然会被编译器选中？</span></a></h2><p><code>tsconfig.json</code> 将会把一个文件夹转换为「项目」，如果不指定任何 <code>exclude</code> 或者 <code>files</code>，则包含在 <code>tsconfig.json</code> 中的所有文件夹中的所有文件都会被包含在编译中。</p><p>如果你想忽略一些文件，使用 <code>exclude</code>。如果希望指定所有文件，而不是让编译器查找它们，请使用 <code>files</code>。</p><p>这些行为，<code>tsconfig.json</code> 将会自动确认。但是这有一个不同的问题，即是解析模块。模块解析：编译器将尝试去理解 <code>ns</code> 在模块语法中表示什么，即 <code>import * as ns from &#39;mod&#39;</code>。为了理解它，编译器需要定义一个模块，它可能是包含你自己代码的 .ts 文件，或者是导入的一个 .d.ts 文件。如果一个文件被找到，则无论它是否在 <code>excludes</code> 中，它都将会被编译。</p><p>因此，如果你想从编译中排除一个文件，你需要排除所有具有 <code>import</code> 或者 <code>&lt;reference path=&quot;...&quot;&gt;</code> 指令的文件。</p><p>使用 <code>tsc --listFiles</code> 来列出在编译时包含了哪些文件，<code>tsc --traceResolution</code> 来看看它们为什么会被包含在编译中。</p><h2 id="我怎么指定一个-include" tabindex="-1"><a class="header-anchor" href="#我怎么指定一个-include"><span>我怎么指定一个 <code>include</code>？</span></a></h2><p>现在无法在 <code>tsconfig.json</code> 的 <code>include</code> 选项外指定所需要包含的文件。你可以通过以下任意一种方式获得相同的结果：1 使用 <code>files</code> 列表，2 在目录中添加 <code>///&lt;reference path=&quot;&quot;&gt;</code> 指令。</p><h2 id="当我使用-javascript-文件时-为什么我会得到-error-ts5055-cannot-write-file-xxx-js-because-it-would-overwrite-input-file-错误" tabindex="-1"><a class="header-anchor" href="#当我使用-javascript-文件时-为什么我会得到-error-ts5055-cannot-write-file-xxx-js-because-it-would-overwrite-input-file-错误"><span>当我使用 JavaScript 文件时，为什么我会得到 <code>error TS5055: Cannot write file &#39;xxx.js&#39; because it would overwrite input file</code> 错误？</span></a></h2><p>对于 TypeScript 文件来说，在默认情况下，编译器将在同一目录中生成与 JavaScript 相同文件名的文件。因为 TypeScript 文件与编译后的文件总是拥有不同的后缀，这么做是安全的。然而，如果你设置 <code>allowJs</code> 编译选项为 <code>true</code> 和没有设置任何的编译输出属性（<code>outFile</code> 和 <code>outDir</code>），编译器将会尝试使用相同的规则来编译文件，这将导致发出的 JavaScript 文件与源文件具有相同的文件名。为了避免意外覆盖源文件，编译器将会发出此警告，并跳过编写输出文件。</p><p>有多种方法可以解决此问题，但所有这些方法都涉及配置编译器选项，因此建议你在项目根目录中的 tsconfig.json 文件来启用此功能。如果你不想编译 JavaScript 文件，你只需要将 <code>allowJs</code> 选项设置为 <code>false</code>；如果你确实想要包含和编译这些 JavaScript 文件，你应该设置 <code>outDir</code> 或者 <code>outFile</code> 选项，定向到其他位置，这样他们就不会与源文件冲突。如果你仅仅是想包含这些 JavaScript 文件，但是不需要编译，设置 <code>noEmit</code> 选项为 <code>true</code> 可以跳过编译检查。</p>',12),c=[l];function n(d,r){return e(),i("div",null,c)}const p=t(s,[["render",n],["__file","tsconfig-behavior.html.vue"]]),m=JSON.parse(`{"path":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为","lang":"zh-CN","frontmatter":{"description":"tsconfig.json 的行为 为什么把一个文件放入「exclude」选项中，它仍然会被编译器选中？ tsconfig.json 将会把一个文件夹转换为「项目」，如果不指定任何 exclude 或者 files，则包含在 tsconfig.json 中的所有文件夹中的所有文件都会被包含在编译中。 如果你想忽略一些文件，使用 exclude。如果希望...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/faqs/tsconfig-behavior.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"tsconfig.json 的行为"}],["meta",{"property":"og:description","content":"tsconfig.json 的行为 为什么把一个文件放入「exclude」选项中，它仍然会被编译器选中？ tsconfig.json 将会把一个文件夹转换为「项目」，如果不指定任何 exclude 或者 files，则包含在 tsconfig.json 中的所有文件夹中的所有文件都会被包含在编译中。 如果你想忽略一些文件，使用 exclude。如果希望..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-03-11T12:28:30.000Z"}],["meta",{"property":"article:modified_time","content":"2020-03-11T12:28:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"tsconfig.json 的行为\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-03-11T12:28:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"为什么把一个文件放入「exclude」选项中，它仍然会被编译器选中？","slug":"为什么把一个文件放入「exclude」选项中-它仍然会被编译器选中","link":"#为什么把一个文件放入「exclude」选项中-它仍然会被编译器选中","children":[]},{"level":2,"title":"我怎么指定一个 include？","slug":"我怎么指定一个-include","link":"#我怎么指定一个-include","children":[]},{"level":2,"title":"当我使用 JavaScript 文件时，为什么我会得到 error TS5055: Cannot write file 'xxx.js' because it would overwrite input file 错误？","slug":"当我使用-javascript-文件时-为什么我会得到-error-ts5055-cannot-write-file-xxx-js-because-it-would-overwrite-input-file-错误","link":"#当我使用-javascript-文件时-为什么我会得到-error-ts5055-cannot-write-file-xxx-js-because-it-would-overwrite-input-file-错误","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1551100134000,"updatedTime":1583929710000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":2},{"name":"Yates","email":"41691152+DuYueYu@users.noreply.github.com","commits":1}]},"excerpt":"\\n<h2>为什么把一个文件放入「exclude」选项中，它仍然会被编译器选中？</h2>\\n<p><code>tsconfig.json</code> 将会把一个文件夹转换为「项目」，如果不指定任何 <code>exclude</code> 或者 <code>files</code>，则包含在 <code>tsconfig.json</code> 中的所有文件夹中的所有文件都会被包含在编译中。</p>\\n<p>如果你想忽略一些文件，使用 <code>exclude</code>。如果希望指定所有文件，而不是让编译器查找它们，请使用 <code>files</code>。</p>\\n<p>这些行为，<code>tsconfig.json</code> 将会自动确认。但是这有一个不同的问题，即是解析模块。模块解析：编译器将尝试去理解 <code>ns</code> 在模块语法中表示什么，即 <code>import * as ns from 'mod'</code>。为了理解它，编译器需要定义一个模块，它可能是包含你自己代码的 .ts 文件，或者是导入的一个 .d.ts 文件。如果一个文件被找到，则无论它是否在 <code>excludes</code> 中，它都将会被编译。</p>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/faqs/tsconfig-behavior.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}`);export{p as comp,m as data};
