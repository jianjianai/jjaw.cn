import{_ as s,o as n,c as a,a as t}from"./app-CnuUtFHE.js";const p={},e=t(`<h1 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h1><p>枚举是组织收集有关联变量的一种方式，许多程序语言（如：c/c#/Java）都有枚举数据类型。下面是定义一个 TypeScript 枚举类型的方式：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> CardSuit <span class="token punctuation">{</span></span>
<span class="line">  Clubs<span class="token punctuation">,</span></span>
<span class="line">  Diamonds<span class="token punctuation">,</span></span>
<span class="line">  Hearts<span class="token punctuation">,</span></span>
<span class="line">  Spades</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简单的使用枚举类型</span></span>
<span class="line"><span class="token keyword">let</span> Card <span class="token operator">=</span> CardSuit<span class="token punctuation">.</span>Clubs<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 类型安全</span></span>
<span class="line">Card <span class="token operator">=</span> <span class="token string">&#39;not a member of card suit&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error: string 不能赋值给 \`CardSuit\` 类型</span></span>
<span class="line"></span></code></pre></div><p>这些枚举类型的值都是数字类型，因此它们被称为数字类型枚举。</p><h2 id="数字类型枚举与数字类型" tabindex="-1"><a class="header-anchor" href="#数字类型枚举与数字类型"><span>数字类型枚举与数字类型</span></a></h2><p>数字类型枚举，允许我们将数字类型或者其他任何与数字类型兼容的类型赋值给枚举类型的实例。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">  Red<span class="token punctuation">,</span></span>
<span class="line">  Green<span class="token punctuation">,</span></span>
<span class="line">  Blue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> col <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span></span>
<span class="line">col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 有效的，这也是 Color.Red</span></span>
<span class="line"></span></code></pre></div><h2 id="数字类型枚举与字符串类型" tabindex="-1"><a class="header-anchor" href="#数字类型枚举与字符串类型"><span>数字类型枚举与字符串类型</span></a></h2><p>在我们继续深入学习枚举类型之前，先来看看它编译的 JavaScript 吧，以下是一个简单的 TypeScript 枚举类型：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Tristate <span class="token punctuation">{</span></span>
<span class="line">  False<span class="token punctuation">,</span></span>
<span class="line">  True<span class="token punctuation">,</span></span>
<span class="line">  Unknown</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>其被编译成 JavaScript 后如下所示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">var</span> Tristate<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;False&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;False&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;True&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;True&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Tristate <span class="token operator">||</span> <span class="token punctuation">(</span>Tristate <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>先让我们聚焦 <code>Tristate[Tristate[&#39;False&#39;] = 0] = &#39;False&#39;</code> 这行代码，其中 <code>Tristate[&#39;False&#39;] = 0</code> 的意思是将 <code>Tristate</code> 对象里的 <code>False</code> 成员值设置为 <code>0</code>。注意，JavaScript 赋值运算符返回的值是被赋予的值（在此例子中是 <code>0</code>），因此下一次 JavaScript 运行时执行的代码是 <code>Tristate[0] = &#39;False&#39;</code>。意味着你可以使用 <code>Tristate</code> 变量来把字符串枚举类型改造成一个数字或者是数字类型的枚举类型，如下所示：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Tristate <span class="token punctuation">{</span></span>
<span class="line">  False<span class="token punctuation">,</span></span>
<span class="line">  True<span class="token punctuation">,</span></span>
<span class="line">  Unknown</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;False&#39;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;False&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span>Tristate<span class="token punctuation">.</span>False<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;False&#39; because \`Tristate.False == 0\`</span></span>
<span class="line"></span></code></pre></div><h2 id="改变与数字枚举关联的数字" tabindex="-1"><a class="header-anchor" href="#改变与数字枚举关联的数字"><span>改变与数字枚举关联的数字</span></a></h2><p>默认情况下，第一个枚举值是 <code>0</code>，然后每个后续值依次递增 1：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">  Red<span class="token punctuation">,</span> <span class="token comment">// 0</span></span>
<span class="line">  Green<span class="token punctuation">,</span> <span class="token comment">// 1</span></span>
<span class="line">  Blue <span class="token comment">// 2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>但是，你可以通过特定的赋值来改变给任何枚举成员关联的数字，如下例子，我们从 3 开始依次递增：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">  DarkRed <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 3</span></span>
<span class="line">  DarkGreen<span class="token punctuation">,</span> <span class="token comment">// 4</span></span>
<span class="line">  DarkBlue <span class="token comment">// 5</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我通常用 <code>= 1</code> 初始化，因为在枚举类型值里，它能让你做一个安全可靠的检查。</p></div><h2 id="使用数字类型作为标志" tabindex="-1"><a class="header-anchor" href="#使用数字类型作为标志"><span>使用数字类型作为标志</span></a></h2><p>枚举的一个很好用途是使用枚举作为标志。这些标志允许你检查一组条件中的某个条件是否为真。考虑如下代码例子，我们有一组关于 animals 的属性：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> AnimalFlags <span class="token punctuation">{</span></span>
<span class="line">  None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  HasClaws    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  CanFly      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  EatsFish    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">  Endangered  <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>在这里，我们使用了左移的位运算符，将数字 <code>1</code> 的二进制向左移动位置得到数字 <code>0001</code>、<code>0010</code>、<code>0100</code> 和 <code>1000</code>（换成十进制结果是：1, 2, 4, 8）。当你在使用这种标记的时候，这些位运算符 <code>|</code> (或)、<code>&amp;</code> （和）、<code>~</code> （非）将会是你最好的朋友：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> AnimalFlags <span class="token punctuation">{</span></span>
<span class="line">  None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  HasClaws    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  CanFly      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">  flags<span class="token operator">:</span> AnimalFlags<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> animalFlags <span class="token operator">=</span> animal<span class="token punctuation">.</span>flags<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">&amp;</span> AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;animal has claws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">&amp;</span> AnimalFlags<span class="token punctuation">.</span>CanFly<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;animal can fly&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">==</span> AnimalFlags<span class="token punctuation">.</span>None<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nothing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span> flags<span class="token operator">:</span> AnimalFlags<span class="token punctuation">.</span>None <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing</span></span>
<span class="line">animal<span class="token punctuation">.</span>flags <span class="token operator">|=</span> AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// animal has claws</span></span>
<span class="line">animal<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing</span></span>
<span class="line">animal<span class="token punctuation">.</span>flags <span class="token operator">|=</span> AnimalFlags<span class="token punctuation">.</span>HasClaws <span class="token operator">|</span> AnimalFlags<span class="token punctuation">.</span>CanFly<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// animal has claws, animal can fly</span></span>
<span class="line"></span></code></pre></div><p>在这里：</p><ul><li>我们使用 <code>|=</code> 来添加一个标志；</li><li>组合使用 <code>&amp;=</code> 和 <code>~</code> 来清理一个标志；</li><li><code>|</code> 来合并标志。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你可以组合标志，用来在枚举类型中定义方便快捷的方式，如下 <code>EndangeredFlyingClawedFishEating</code>：</p></div><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> AnimalFlags <span class="token punctuation">{</span></span>
<span class="line">  None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  HasClaws    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  CanFly      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  EatsFish    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">  Endangered  <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  EndangeredFlyingClawedFishEating <span class="token operator">=</span> HasClaws <span class="token operator">|</span> CanFly <span class="token operator">|</span> EatsFish <span class="token operator">|</span> Endangered</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="字符串枚举" tabindex="-1"><a class="header-anchor" href="#字符串枚举"><span>字符串枚举</span></a></h2><p>在上文中，我们只看到了数字类型的枚举，实际上，枚举类型的值，也可以是字符串类型。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> EvidenceTypeEnum <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">UNKNOWN</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">PASSPORT_VISA</span> <span class="token operator">=</span> <span class="token string">&#39;passport_visa&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">PASSPORT</span> <span class="token operator">=</span> <span class="token string">&#39;passport&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">SIGHTED_STUDENT_CARD</span> <span class="token operator">=</span> <span class="token string">&#39;sighted_tertiary_edu_id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">SIGHTED_KEYPASS_CARD</span> <span class="token operator">=</span> <span class="token string">&#39;sighted_keypass_card&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">SIGHTED_PROOF_OF_AGE_CARD</span> <span class="token operator">=</span> <span class="token string">&#39;sighted_proof_of_age_card&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这些可以更容易被处理和调试，因为它们提供有意义/可调试的字符串。</p><p>你可以使用它们用于简单的字符串比较：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// Where \`someStringFromBackend\` will be &#39;&#39; | &#39;passport_visa&#39; | &#39;passport&#39; ... etc.</span></span>
<span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> someStringFromBackend <span class="token keyword">as</span> EvidenceTypeEnum<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Sample use in code</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> EvidenceTypeEnum<span class="token punctuation">.</span><span class="token constant">PASSPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You provided a passport&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`passport\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="常量枚举" tabindex="-1"><a class="header-anchor" href="#常量枚举"><span>常量枚举</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Tristate <span class="token punctuation">{</span></span>
<span class="line">  False<span class="token punctuation">,</span></span>
<span class="line">  True<span class="token punctuation">,</span></span>
<span class="line">  Unknown</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> lie <span class="token operator">=</span> Tristate<span class="token punctuation">.</span>False<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><code>const lie = Tristate.False</code> 会被编译成 JavaScript <code>let lie = Tristate.False</code> (是的，编译后与编译前，几乎相同)。这意味着在运行执行时，它将会查找变量 <code>Tristate</code> 和 <code>Tristate.False</code>。在此处获得性能提升的一个小技巧是使用常量枚举：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> <span class="token keyword">enum</span> Tristate <span class="token punctuation">{</span></span>
<span class="line">  False<span class="token punctuation">,</span></span>
<span class="line">  True<span class="token punctuation">,</span></span>
<span class="line">  Unknown</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> lie <span class="token operator">=</span> Tristate<span class="token punctuation">.</span>False<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>将会被编译成：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> lie <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>编译器将会：</p><ul><li>内联枚举的任何用法（<code>0</code> 而不是 <code>Tristate.False</code>）；</li><li>不会为枚举类型编译成任何 JavaScript（在这个例子中，运行时没有 <code>Tristate</code> 变量），因为它使用内联语法。</li></ul><h3 id="常量枚举-preserveconstenums-选项" tabindex="-1"><a class="header-anchor" href="#常量枚举-preserveconstenums-选项"><span>常量枚举 <code>preserveConstEnums</code> 选项</span></a></h3><p>使用内联语法对性能有明显的提升作用。运行时没有 <code>Tristate</code> 变量的事实，是因为编译器帮助你把一些在运行时没有用到的不编译成 JavaScript。然而，你可能想让编译器仍然把枚举类型编译成 JavaScript，用于如上例子中从字符串到数字，或者是从数字到字符串的查找。在这种情景下，你可以使用编译选项 <code>--preserveConstEnums</code>，它会编译出 <code>var Tristate</code> 的定义，因此你在运行时，手动使用 <code>Tristate[&#39;False&#39;]</code> 和 <code>Tristate[0]</code>。并且这不会以任何方式影响内联。</p><h2 id="有静态方法的枚举" tabindex="-1"><a class="header-anchor" href="#有静态方法的枚举"><span>有静态方法的枚举</span></a></h2><p>你可以使用 <code>enum</code> + <code>namespace</code> 的声明的方式向枚举类型添加静态方法。如下例所示，我们将静态成员 <code>isBusinessDay</code> 添加到枚举上：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Weekday <span class="token punctuation">{</span></span>
<span class="line">  Monday<span class="token punctuation">,</span></span>
<span class="line">  Tuesday<span class="token punctuation">,</span></span>
<span class="line">  Wednesday<span class="token punctuation">,</span></span>
<span class="line">  Thursday<span class="token punctuation">,</span></span>
<span class="line">  Friday<span class="token punctuation">,</span></span>
<span class="line">  Saturday<span class="token punctuation">,</span></span>
<span class="line">  Sunday</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> Weekday <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isBusinessDay</span><span class="token punctuation">(</span>day<span class="token operator">:</span> Weekday<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">case</span> Weekday<span class="token punctuation">.</span>Saturday<span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">case</span> Weekday<span class="token punctuation">.</span>Sunday<span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> mon <span class="token operator">=</span> Weekday<span class="token punctuation">.</span>Monday<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sun <span class="token operator">=</span> Weekday<span class="token punctuation">.</span>Sunday<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span><span class="token function">isBusinessDay</span><span class="token punctuation">(</span>mon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span><span class="token function">isBusinessDay</span><span class="token punctuation">(</span>sun<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="开放式枚举" tabindex="-1"><a class="header-anchor" href="#开放式枚举"><span>开放式枚举</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你只有在不使用模块时，开放式的枚举才有意义，你应该使用模块，因此这部分在文章最后。</p></div><p>让我们再一次看看编译成 JavaScript 的枚举是什么样子：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">var</span> Tristate<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;False&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;False&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;True&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;True&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Tristate <span class="token operator">||</span> <span class="token punctuation">(</span>Tristate <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>我们已经解释了 <code>Tristate[Tristate[&#39;False&#39;] = 0] = &#39;False&#39;</code> 部分，现在我们来看看包裹函数 <code>(function (Tristate) { /* code here */})(Tristate || (Tristate = {}))</code>，特别是 <code>(Tristate || (Tristate = {}))</code> 部分。这捕获了一个局部变量 <code>TriState</code>，它要么指向已经定义的<code>TriState</code> 值，要么使用一个新的空对象来初始化它。</p><p>这意味着你可以跨多个文件拆分（和扩展）枚举定义，如下所示，你可以把 <code>Color</code> 的定义拆分至两个块中：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">  Red<span class="token punctuation">,</span></span>
<span class="line">  Green<span class="token punctuation">,</span></span>
<span class="line">  Blue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">  DarkRed <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">  DarkGreen<span class="token punctuation">,</span></span>
<span class="line">  DarkBlue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你应该在枚举的延续块中，重新初始化第一个成员（此处为 <code>DarkRed = 3</code>），使生成的代码不破坏先前定义的值（即0、1...等值）。如果您仍然不这样做，TypeScript 将会发出警告（错误信息：<code>In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element.</code>）。</p></div>`,56),o=[e];function l(c,i){return n(),a("div",null,o)}const k=s(p,[["render",l],["__file","enums.html.vue"]]),r=JSON.parse('{"path":"/git/ts-book/docs/typings/enums.html","title":"枚举","lang":"zh-CN","frontmatter":{"description":"枚举 枚举是组织收集有关联变量的一种方式，许多程序语言（如：c/c#/Java）都有枚举数据类型。下面是定义一个 TypeScript 枚举类型的方式： 这些枚举类型的值都是数字类型，因此它们被称为数字类型枚举。 数字类型枚举与数字类型 数字类型枚举，允许我们将数字类型或者其他任何与数字类型兼容的类型赋值给枚举类型的实例。 数字类型枚举与字符串类型 在...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/typings/enums.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"枚举"}],["meta",{"property":"og:description","content":"枚举 枚举是组织收集有关联变量的一种方式，许多程序语言（如：c/c#/Java）都有枚举数据类型。下面是定义一个 TypeScript 枚举类型的方式： 这些枚举类型的值都是数字类型，因此它们被称为数字类型枚举。 数字类型枚举与数字类型 数字类型枚举，允许我们将数字类型或者其他任何与数字类型兼容的类型赋值给枚举类型的实例。 数字类型枚举与字符串类型 在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-04-26T01:40:49.000Z"}],["meta",{"property":"article:modified_time","content":"2021-04-26T01:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"枚举\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-04-26T01:40:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"数字类型枚举与数字类型","slug":"数字类型枚举与数字类型","link":"#数字类型枚举与数字类型","children":[]},{"level":2,"title":"数字类型枚举与字符串类型","slug":"数字类型枚举与字符串类型","link":"#数字类型枚举与字符串类型","children":[]},{"level":2,"title":"改变与数字枚举关联的数字","slug":"改变与数字枚举关联的数字","link":"#改变与数字枚举关联的数字","children":[]},{"level":2,"title":"使用数字类型作为标志","slug":"使用数字类型作为标志","link":"#使用数字类型作为标志","children":[]},{"level":2,"title":"字符串枚举","slug":"字符串枚举","link":"#字符串枚举","children":[]},{"level":2,"title":"常量枚举","slug":"常量枚举","link":"#常量枚举","children":[{"level":3,"title":"常量枚举 preserveConstEnums 选项","slug":"常量枚举-preserveconstenums-选项","link":"#常量枚举-preserveconstenums-选项","children":[]}]},{"level":2,"title":"有静态方法的枚举","slug":"有静态方法的枚举","link":"#有静态方法的枚举","children":[]},{"level":2,"title":"开放式枚举","slug":"开放式枚举","link":"#开放式枚举","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1535185805000,"updatedTime":1619401249000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":10},{"name":"knorien","email":"zhangjinwei0320@hotmail.com","commits":2},{"name":"Chanvin Xiao","email":"chanvinxiao@163.com","commits":1},{"name":"JunaYa","email":"JunaYa@users.noreply.github.com","commits":1},{"name":"Superman","email":"supermanchc@gmail.com","commits":1},{"name":"Xiaohan Li","email":"hansnow@users.noreply.github.com","commits":1},{"name":"huangkairan","email":"56213366+huangkairan@users.noreply.github.com","commits":1},{"name":"lxvc","email":"403381161@qq.com","commits":1},{"name":"stevezyyang","email":"stevezyyang@tencent.com","commits":1},{"name":"yuanjilee","email":"yuanjilee@users.noreply.github.com","commits":1}]},"excerpt":"\\n<p>枚举是组织收集有关联变量的一种方式，许多程序语言（如：c/c#/Java）都有枚举数据类型。下面是定义一个 TypeScript 枚举类型的方式：</p>\\n<div class=\\"language-typescript\\" data-highlighter=\\"prismjs\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">enum</span> CardSuit <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  Clubs<span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">  Diamonds<span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">  Hearts<span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">  Spades</span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 简单的使用枚举类型</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">let</span> Card <span class=\\"token operator\\">=</span> CardSuit<span class=\\"token punctuation\\">.</span>Clubs<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 类型安全</span></span>\\n<span class=\\"line\\">Card <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\'not a member of card suit\'</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Error: string 不能赋值给 `CardSuit` 类型</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/typings/enums.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{k as comp,r as data};
