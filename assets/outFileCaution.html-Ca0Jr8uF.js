import{_ as n,r as o,o as a,c as l,b as s,e as t,d as c,a as e}from"./app-DHlauKQu.js";const p={},r=e(`<h1 id="谨慎使用-outfile" tabindex="-1"><a class="header-anchor" href="#谨慎使用-outfile"><span>谨慎使用 <code>--outFile</code></span></a></h1><p>由于以下几点原因，你应该谨慎使用 <code>--outFile</code> 选项：</p><ul><li>运行时的错误；</li><li>快速编译；</li><li>全局作用域；</li><li>难以分析；</li><li>难以扩展；</li><li><code>_references</code>；</li><li>代码重用；</li><li>多目标；</li><li>单独编译；</li></ul><h2 id="运行时的错误" tabindex="-1"><a class="header-anchor" href="#运行时的错误"><span>运行时的错误</span></a></h2><p>如果你的代码依赖于上文中的 JavaScript，你可能会在运行时得到错误：</p><ul><li>类的继承在运行时中断。</li></ul><p>有如下 <code>foo.ts</code>：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>以及 <code>bar.ts</code>：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>如果你没有按正确的顺序编译它（例如：<code>tsc bar.ts foo.ts</code>），虽然它能够被编译成功，但是会在运行时抛出 <code>ReferenceError</code> 的错误。</p><ul><li>模块拆分在运行时会失败。</li></ul><p><code>foo.ts</code>：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">namespace</span> App <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><code>bar.ts</code>：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">namespace</span> App <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">const</span> bar <span class="token operator">=</span> foo <span class="token operator">+</span> <span class="token number">456</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>与上文中一致，当你没有用正确的顺序编译它，它会在运行时将 <code>NaN</code> 赋值给 <code>bar</code>；</p><h2 id="快速编译" tabindex="-1"><a class="header-anchor" href="#快速编译"><span>快速编译</span></a></h2><p>如果你使用 <code>--out</code> 编译选项，而没有使用一些 <code>hacks</code> 时，单独的 <code>.ts</code> 文件是不会被编译成单独的 <code>.js</code> 文件。 <code>--out</code> 选项实际上使用了较慢的构建方式。</p><p>此外，由于 source map 基于长度编码，且对位置信息敏感，因此，大部分 source map 都会在编译时重新构建（如果你使用 source map）。</p><h2 id="全局作用域" tabindex="-1"><a class="header-anchor" href="#全局作用域"><span>全局作用域</span></a></h2><p>当然，你可以使用命名空间，但是它仍然在 <code>window</code> 上（如果你在浏览器中打开），命名空间仅仅是一个临时的解决方式。<code>///&lt;reference</code> 也不例外，它会引入一个难以维护的全局上下文。</p><p>如果你的公司有多个独立工作的团队，当有人决定尝试集成两个程序编写 app 时，则很可能存在命名冲突。</p><h2 id="难以分析" tabindex="-1"><a class="header-anchor" href="#难以分析"><span>难以分析</span></a></h2><p>我们希望提供更多代码分析工具。如果你提供调用链的依赖关系，这些将会变得简单。</p><h2 id="难以扩展" tabindex="-1"><a class="header-anchor" href="#难以扩展"><span>难以扩展</span></a></h2><p>实际上这是运行时的随机错误 + 编译时间时间慢 + 难以理解的代码的结果。</p><h2 id="references-ts" tabindex="-1"><a class="header-anchor" href="#references-ts"><span><code>_references.ts</code></span></a></h2>`,28),d=s("code",null,"tsconfig.json",-1),k={href:"https://github.com/Microsoft/TypeScript/issues/2472#issuecomment-85330803",target:"_blank",rel:"noopener noreferrer"},h=e(`<h2 id="代码重用" tabindex="-1"><a class="header-anchor" href="#代码重用"><span>代码重用</span></a></h2><p>如果你想在另一个项目中重用存在隐式依赖关系的代码，如果没有错误提示，很难移植它。</p><h2 id="多目标" tabindex="-1"><a class="header-anchor" href="#多目标"><span>多目标</span></a></h2><p>如果你想在 nodejs 之类的环境下重用在浏览器中的代码（如：testing APIS），你将不得不将其转换到新的模块系统或者使用不好的 <code>hacks</code>，让 nodejs 的 <code>global</code> 成为你的新的全局变量（如：<code>window</code>）。</p><h2 id="单独编译" tabindex="-1"><a class="header-anchor" href="#单独编译"><span>单独编译</span></a></h2><p>文件无法被单独编译，如 <code>a.ts</code>：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">namespace</span> <span class="token constant">M</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> s <span class="token operator">=</span> t<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>根据不同的 <code>b.ts</code> 的形式，它将有不同的输出：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">namespace</span> <span class="token constant">M</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>或者：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>因此 <code>a.ts</code> 不能被单独编译;</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><code>--out</code> 做的是一些构建工具的工作，这些构建工具也可以受益于外部模块所提供的依赖，因此如果你愿意，我们推荐你使用外部模块，让构建工具创建单文件的 <code>.js</code>。</p>`,14);function g(m,u){const i=o("ExternalLinkIcon");return a(),l("div",null,[r,s("p",null,[t("它并没有被 "),d,t(" 支持："),s("a",k,[t("Comment"),c(i)]),t("，你需要手动对文件排序。")]),h])}const y=n(p,[["render",g],["__file","outFileCaution.html.vue"]]),f=JSON.parse('{"path":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile","lang":"zh-CN","frontmatter":{"description":"谨慎使用 --outFile 由于以下几点原因，你应该谨慎使用 --outFile 选项： 运行时的错误； 快速编译； 全局作用域； 难以分析； 难以扩展； _references； 代码重用； 多目标； 单独编译； 运行时的错误 如果你的代码依赖于上文中的 JavaScript，你可能会在运行时得到错误： 类的继承在运行时中断。 有如下 foo.ts...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/tips/outFileCaution.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"谨慎使用 --outFile"}],["meta",{"property":"og:description","content":"谨慎使用 --outFile 由于以下几点原因，你应该谨慎使用 --outFile 选项： 运行时的错误； 快速编译； 全局作用域； 难以分析； 难以扩展； _references； 代码重用； 多目标； 单独编译； 运行时的错误 如果你的代码依赖于上文中的 JavaScript，你可能会在运行时得到错误： 类的继承在运行时中断。 有如下 foo.ts..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2018-11-04T06:43:13.000Z"}],["meta",{"property":"article:modified_time","content":"2018-11-04T06:43:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"谨慎使用 --outFile\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2018-11-04T06:43:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"运行时的错误","slug":"运行时的错误","link":"#运行时的错误","children":[]},{"level":2,"title":"快速编译","slug":"快速编译","link":"#快速编译","children":[]},{"level":2,"title":"全局作用域","slug":"全局作用域","link":"#全局作用域","children":[]},{"level":2,"title":"难以分析","slug":"难以分析","link":"#难以分析","children":[]},{"level":2,"title":"难以扩展","slug":"难以扩展","link":"#难以扩展","children":[]},{"level":2,"title":"_references.ts","slug":"references-ts","link":"#references-ts","children":[]},{"level":2,"title":"代码重用","slug":"代码重用","link":"#代码重用","children":[]},{"level":2,"title":"多目标","slug":"多目标","link":"#多目标","children":[]},{"level":2,"title":"单独编译","slug":"单独编译","link":"#单独编译","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1536397213000,"updatedTime":1541313793000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":2},{"name":"zongzi531","email":"zongzi.xy@gmail.com","commits":1}]},"excerpt":"\\n<p>由于以下几点原因，你应该谨慎使用 <code>--outFile</code> 选项：</p>\\n<ul>\\n<li>运行时的错误；</li>\\n<li>快速编译；</li>\\n<li>全局作用域；</li>\\n<li>难以分析；</li>\\n<li>难以扩展；</li>\\n<li><code>_references</code>；</li>\\n<li>代码重用；</li>\\n<li>多目标；</li>\\n<li>单独编译；</li>\\n</ul>\\n<h2>运行时的错误</h2>\\n<p>如果你的代码依赖于上文中的 JavaScript，你可能会在运行时得到错误：</p>\\n<ul>\\n<li>类的继承在运行时中断。</li>\\n</ul>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/tips/outFileCaution.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}');export{y as comp,f as data};
