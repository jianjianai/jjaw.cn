import{_ as t,r as p,o as e,c as o,b as l,e as s,d as c,w as i,a as n}from"./app-DxLUXMj2.js";const r={},k=n(`<h1 id="类型推断" tabindex="-1"><a class="header-anchor" href="#类型推断"><span>类型推断</span></a></h1><p>TypeScript 能根据一些简单的规则推断（检查）变量的类型，你可以通过实践，很快的了解它们。</p><h2 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量"><span>定义变量</span></a></h2><p>变量的类型，由定义推断：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// foo 是 &#39;number&#39;</span></span>
<span class="line"><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// bar 是 &#39;string&#39;</span></span>
<span class="line"></span>
<span class="line">foo <span class="token operator">=</span> bar<span class="token punctuation">;</span> <span class="token comment">// Error: 不能将 &#39;string&#39; 赋值给 \`number\`</span></span>
<span class="line"></span></code></pre></div><p>这是一个从右向左流动类型的示例。</p><h2 id="函数返回类型" tabindex="-1"><a class="header-anchor" href="#函数返回类型"><span>函数返回类型</span></a></h2><p>返回类型能被 <code>return</code> 语句推断，如下所示，推断函数返回为一个数字：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这是一个从底部流出类型的例子。</p><h2 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值"><span>赋值</span></a></h2><p>函数参数类型/返回值也能通过赋值来推断。如下所示，<code>foo</code> 的类型是 <code>Adder</code>，他能让 <code>foo</code> 的参数 <code>a</code>、<code>b</code> 是 <code>number</code> 类型。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Adder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token function-variable function">Adder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这个事实可以用下面的代码来证明，TypeScript 会发出正如你期望发出的错误警告：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Adder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token function-variable function">Adder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  a <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这是一个从左向右流动类型的示例。</p><p>如果你创建一个函数，并且函数参数为一个回调函数，相同的赋值规则也适用于它。从 <code>argument</code> 至 <code>parameter</code> 只是变量赋值的另一种形式。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Adder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">iTakeAnAdder</span><span class="token punctuation">(</span>adder<span class="token operator">:</span> Adder<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">iTakeAnAdder</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  a <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error: 不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="结构化" tabindex="-1"><a class="header-anchor" href="#结构化"><span>结构化</span></a></h2><p>这些简单的规则也适用于结构化的存在（对象字面量），例如在下面这种情况下 <code>foo</code> 的类型被推断为 <code>{ a: number, b: number }</code>：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span></span>
<span class="line">  b<span class="token operator">:</span> <span class="token number">456</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span>
<span class="line"></span></code></pre></div><p>数组也一样：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">bar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span>
<span class="line"></span></code></pre></div><h2 id="解构" tabindex="-1"><a class="header-anchor" href="#解构"><span>解构</span></a></h2><p>这些也适用于解构中：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span></span>
<span class="line">  b<span class="token operator">:</span> <span class="token number">456</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">a <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span>
<span class="line"></span></code></pre></div><p>数组中：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> bar<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">a <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span>
<span class="line"></span></code></pre></div><p>如果函数参数能够被推断出来，那么解构亦是如此。在如下例子中，函数参数能够被解构为 <code>a/b</code> 成员：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Adder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">iTakeAnAdder</span><span class="token punctuation">(</span>adder<span class="token operator">:</span> Adder<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">iTakeAnAdder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// a, b 的类型能被推断出来</span></span>
<span class="line">  a <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="类型保护" tabindex="-1"><a class="header-anchor" href="#类型保护"><span>类型保护</span></a></h2>`,31),u=n(`<h2 id="警告" tabindex="-1"><a class="header-anchor" href="#警告"><span>警告</span></a></h2><h3 id="小心使用参数" tabindex="-1"><a class="header-anchor" href="#小心使用参数"><span>小心使用参数</span></a></h3><p>如果类型不能被赋值推断出来，类型也将不会流入函数参数中。例如如下的一个例子，编译器并不知道 <code>foo</code> 的类型，所它也就不能推断出 <code>a</code> 或者 <code>b</code> 的类型。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* do something */</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>然而，如果 <code>foo</code> 添加了类型注解，函数参数也就能被推断（<code>a</code>，<code>b</code> 都能被推断为 <code>number</code> 类型）：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">TwoNumberFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> foo<span class="token operator">:</span> <span class="token function-variable function">TwoNumberFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* do something */</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="小心使用返回值" tabindex="-1"><a class="header-anchor" href="#小心使用返回值"><span>小心使用返回值</span></a></h3><p>尽管 TypeScript 一般情况下能推断函数的返回值，但是它可能并不是你想要的。例如如下的 <code>foo</code> 函数，它的返回值为 <code>any</code>：</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token function">addOne</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 一些使用 JavaScript 库的特殊函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">addOne</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>这是因为返回值的类型被一个缺少类型定义的 <code>addOne</code> 函数所影响（<code>a</code> 是 <code>any</code>，所以 <code>addOne</code> 返回值为 <code>any</code>，<code>foo</code> 的返回值是也是 <code>any</code>）。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我发现最简单的方式是明确的写上函数返回值，毕竟这些注解是一个定理，而函数是注解的一个证据。</p></div><p>这里还有一些其他可以想象的情景，但是有一个好消息是有编译器选项 <code>noImplicitAny</code> 可以捕获这些 bug。</p><h3 id="noimplicitany" tabindex="-1"><a class="header-anchor" href="#noimplicitany"><span><code>noImplicitAny</code></span></a></h3><p>选项 <code>noImplicitAny</code> 用来告诉编译器，当无法推断一个变量时发出一个错误（或者只能推断为一个隐式的 <code>any</code> 类型），你可以：</p><ul><li>通过显式添加 <code>:any</code> 的类型注解，来让它成为一个 <code>any</code> 类型；</li><li>通过一些更正确的类型注解来帮助 TypeScript 推断类型。</li></ul>`,15);function d(m,g){const a=p("RouteLink");return e(),o("div",null,[k,l("p",null,[s("在前面章节"),c(a,{to:"/git/ts-book/docs/typings/typeGuard.html"},{default:i(()=>[s("类型保护")]),_:1}),s("中，我们已经知道它如何帮助我们改变和缩小类型范围（特别是在联合类型下）。类型保护只是一个块中变量另一种推断形式。")]),u])}const b=t(r,[["render",d],["__file","typeInference.html.vue"]]),y=JSON.parse(`{"path":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断","lang":"zh-CN","frontmatter":{"description":"类型推断 TypeScript 能根据一些简单的规则推断（检查）变量的类型，你可以通过实践，很快的了解它们。 定义变量 变量的类型，由定义推断： 这是一个从右向左流动类型的示例。 函数返回类型 返回类型能被 return 语句推断，如下所示，推断函数返回为一个数字： 这是一个从底部流出类型的例子。 赋值 函数参数类型/返回值也能通过赋值来推断。如下所示...","head":[["meta",{"property":"og:url","content":"https://jjaw.cn/git/ts-book/docs/typings/typeInference.html"}],["meta",{"property":"og:site_name","content":"神奇小破站"}],["meta",{"property":"og:title","content":"类型推断"}],["meta",{"property":"og:description","content":"类型推断 TypeScript 能根据一些简单的规则推断（检查）变量的类型，你可以通过实践，很快的了解它们。 定义变量 变量的类型，由定义推断： 这是一个从右向左流动类型的示例。 函数返回类型 返回类型能被 return 语句推断，如下所示，推断函数返回为一个数字： 这是一个从底部流出类型的例子。 赋值 函数参数类型/返回值也能通过赋值来推断。如下所示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2020-02-24T12:18:12.000Z"}],["meta",{"property":"article:modified_time","content":"2020-02-24T12:18:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类型推断\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2020-02-24T12:18:12.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"定义变量","slug":"定义变量","link":"#定义变量","children":[]},{"level":2,"title":"函数返回类型","slug":"函数返回类型","link":"#函数返回类型","children":[]},{"level":2,"title":"赋值","slug":"赋值","link":"#赋值","children":[]},{"level":2,"title":"结构化","slug":"结构化","link":"#结构化","children":[]},{"level":2,"title":"解构","slug":"解构","link":"#解构","children":[]},{"level":2,"title":"类型保护","slug":"类型保护","link":"#类型保护","children":[]},{"level":2,"title":"警告","slug":"警告","link":"#警告","children":[{"level":3,"title":"小心使用参数","slug":"小心使用参数","link":"#小心使用参数","children":[]},{"level":3,"title":"小心使用返回值","slug":"小心使用返回值","link":"#小心使用返回值","children":[]},{"level":3,"title":"noImplicitAny","slug":"noimplicitany","link":"#noimplicitany","children":[]}]}],"git":{"externalRepo":{"url":"https://github.com/jianjianai/typescript-book-chinese","branch":"master"},"createdTime":1534518664000,"updatedTime":1582546692000,"contributors":[{"name":"jkchao","email":"jkchaom@gmail.com","commits":7},{"name":"lxvc","email":"403381161@qq.com","commits":2},{"name":"byog","email":"7764115+byog@users.noreply.github.com","commits":1},{"name":"阿卡琳","email":"hufan.akarin@Gmail.com","commits":1},{"name":"随风","email":"daskyrk@users.noreply.github.com","commits":1}]},"excerpt":"\\n<p>TypeScript 能根据一些简单的规则推断（检查）变量的类型，你可以通过实践，很快的了解它们。</p>\\n<h2>定义变量</h2>\\n<p>变量的类型，由定义推断：</p>\\n<div class=\\"language-typescript\\" data-highlighter=\\"prismjs\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token number\\">123</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// foo 是 'number'</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">let</span> bar <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// bar 是 'string'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">foo <span class=\\"token operator\\">=</span> bar<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Error: 不能将 'string' 赋值给 \`number\`</span></span>\\n<span class=\\"line\\"></span></code></pre></div>","autoDesc":true,"github_edit":{"fileGitUrl":"https://github.com/jianjianai/typescript-book-chinese/edit/master/docs/typings/typeInference.md"},"navPage":[{"title":"写在前面","items":[{"link":"/git/ts-book/docs/","title":"深入理解 TypeScript"}]},{"title":"TypeScript 项目","items":[{"link":"/git/ts-book/docs/project/compilationContext.html","title":"编译上下文"},{"link":"/git/ts-book/docs/project/declarationspaces.html","title":"声明空间"},{"link":"/git/ts-book/docs/project/modules.html","title":"模块"},{"link":"/git/ts-book/docs/project/namespaces.html","title":"命名空间"},{"link":"/git/ts-book/docs/project/dynamicImportExpressions.html","title":"动态导入表达式"}]},{"title":"TypeScript 类型系统","items":[{"link":"/git/ts-book/docs/typings/overview.html","title":"概览"},{"link":"/git/ts-book/docs/typings/migrating.html","title":"从 JavaScript 迁移"},{"link":"/git/ts-book/docs/typings/types.html","title":"@types"},{"link":"/git/ts-book/docs/typings/ambient.html","title":"环境声明"},{"link":"/git/ts-book/docs/typings/interfaces.html","title":"接口"},{"link":"/git/ts-book/docs/typings/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/typings/lib.html","title":"lib.d.ts"},{"link":"/git/ts-book/docs/typings/functions.html","title":"函数"},{"link":"/git/ts-book/docs/typings/callable.html","title":"可调用的"},{"link":"/git/ts-book/docs/typings/typeAssertion.html","title":"类型断言"},{"link":"/git/ts-book/docs/typings/freshness.html","title":"Freshness"},{"link":"/git/ts-book/docs/typings/typeGuard.html","title":"类型保护"},{"link":"/git/ts-book/docs/typings/literals.html","title":"字面量类型"},{"link":"/git/ts-book/docs/typings/readonly.html","title":"readonly"},{"link":"/git/ts-book/docs/typings/generices.html","title":"泛型"},{"link":"/git/ts-book/docs/typings/typeInference.html","title":"类型推断"},{"link":"/git/ts-book/docs/typings/typeCompatibility.html","title":"类型兼容性"},{"link":"/git/ts-book/docs/typings/neverType.html","title":"Never"},{"link":"/git/ts-book/docs/typings/discrominatedUnion.html","title":"辨析联合类型"},{"link":"/git/ts-book/docs/typings/indexSignatures.html","title":"索引签名"},{"link":"/git/ts-book/docs/typings/movingTypes.html","title":"流动的类型"},{"link":"/git/ts-book/docs/typings/exceptionsHanding.html","title":"异常处理"},{"link":"/git/ts-book/docs/typings/mixins.html","title":"混合"},{"link":"/git/ts-book/docs/typings/thisType.html","title":"ThisType"}]},{"title":"JSX","items":[{"link":"/git/ts-book/docs/jsx/support.html","title":"支持 JSX"},{"link":"/git/ts-book/docs/jsx/reactJSX.html","title":"React JSX"},{"link":"/git/ts-book/docs/jsx/nonReactJSX.html","title":"非 React JSX"}]},{"title":"TypeScript 错误提示","items":[{"link":"/git/ts-book/docs/error/interpreting.html","title":"解读 Errors"},{"link":"/git/ts-book/docs/error/common.html","title":"常见的 Error"}]},{"title":"TIPs","items":[{"link":"/git/ts-book/docs/tips/stringBasedEmuns.html","title":"基于字符串的枚举"},{"link":"/git/ts-book/docs/tips/nominalTyping.html","title":"名义化类型"},{"link":"/git/ts-book/docs/tips/statefulFunctions.html","title":"状态函数"},{"link":"/git/ts-book/docs/tips/bind.html","title":"Bind 是有害的"},{"link":"/git/ts-book/docs/tips/curry.html","title":"柯里化"},{"link":"/git/ts-book/docs/tips/typeInstantiation.html","title":"泛型的实例化类型"},{"link":"/git/ts-book/docs/tips/lazyObjectLiteralInitialization.html","title":"对象字面量的惰性初始化"},{"link":"/git/ts-book/docs/tips/classAreUseful.html","title":"类是有用的"},{"link":"/git/ts-book/docs/tips/avoidExportDefault.html","title":"export default 被认为是有害的"},{"link":"/git/ts-book/docs/tips/limitPropertySetters.html","title":"减少 setter 属性的使用"},{"link":"/git/ts-book/docs/tips/createArrays.html","title":"创建数组"},{"link":"/git/ts-book/docs/tips/outFileCaution.html","title":"谨慎使用 --outFile"},{"link":"/git/ts-book/docs/tips/staticConstructors.html","title":"TypeScript 中的静态构造函数"},{"link":"/git/ts-book/docs/tips/singletonPatern.html","title":"单例模式"},{"link":"/git/ts-book/docs/tips/functionParameters.html","title":"函数参数"},{"link":"/git/ts-book/docs/tips/truthy.html","title":"Truthy"},{"link":"/git/ts-book/docs/tips/buildToggles.html","title":"构建切换"},{"link":"/git/ts-book/docs/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter"},{"link":"/git/ts-book/docs/tips/metadata.html","title":"Reflect Metadata"},{"link":"/git/ts-book/docs/tips/covarianceAndContravariance.html","title":"协变与逆变"},{"link":"/git/ts-book/docs/tips/infer.html","title":"infer"}]},{"title":"TypeScript 编译原理","items":[{"link":"/git/ts-book/docs/compiler/overview.html","title":"概览"},{"link":"/git/ts-book/docs/compiler/program.html","title":"程序"},{"link":"/git/ts-book/docs/compiler/ast.html","title":"抽象语法树"},{"link":"/git/ts-book/docs/compiler/scanner.html","title":"扫描器"},{"link":"/git/ts-book/docs/compiler/parser.html","title":"解析器"},{"link":"/git/ts-book/docs/compiler/binder.html","title":"绑定器"},{"link":"/git/ts-book/docs/compiler/checker.html","title":"检查器"},{"link":"/git/ts-book/docs/compiler/emitter.html","title":"发射器"}]},{"title":"TypeScript FAQs","items":[{"link":"/git/ts-book/docs/faqs/common-bug-not-bugs.html","title":"一些常见的「bug」并不是 bug"},{"link":"/git/ts-book/docs/faqs/common-feature-request.html","title":"一些常见的 Feature 需求"},{"link":"/git/ts-book/docs/faqs/type-system-behavior.html","title":"类型系统的行为"},{"link":"/git/ts-book/docs/faqs/function.html","title":"函数"},{"link":"/git/ts-book/docs/faqs/class.html","title":"类"},{"link":"/git/ts-book/docs/faqs/generics.html","title":"泛型"},{"link":"/git/ts-book/docs/faqs/modules.html","title":"模块"},{"link":"/git/ts-book/docs/faqs/enums.html","title":"枚举"},{"link":"/git/ts-book/docs/faqs/type-guards.html","title":"类型守卫"},{"link":"/git/ts-book/docs/faqs/jsx-and-react.html","title":"JSX 和 React"},{"link":"/git/ts-book/docs/faqs/thing-that-dont-work.html","title":"一些不能按预期工作的代码"},{"link":"/git/ts-book/docs/faqs/commandline-behavior.html","title":"命令行的行为"},{"link":"/git/ts-book/docs/faqs/tsconfig-behavior.html","title":"tsconfig.json 的行为"}]},{"title":"TypeScript 更新","items":[{"link":"/git/ts-book/docs/new/typescript-3.9.html","title":"TypeScript 3.9"},{"link":"/git/ts-book/docs/new/typescript-3.8.html","title":"TypeScript 3.8"},{"link":"/git/ts-book/docs/new/typescript-3.7.html","title":"TypeScript 3.7"}]}]}`);export{b as comp,y as data};
